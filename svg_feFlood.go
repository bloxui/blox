// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeFloodAttrs holds the attributes for the feFlood SVG element
type SvgFeFloodAttrs struct {
	GlobalAttrs
	FloodColor   string
	FloodOpacity string
}

// SvgFeFloodArg interface for feFlood element arguments
type SvgFeFloodArg interface {
	applyFeFlood(*SvgFeFloodAttrs, *[]Component)
}

// defaultSvgFeFloodAttrs creates default attributes for feFlood
func defaultSvgFeFloodAttrs() *SvgFeFloodAttrs {
	return &SvgFeFloodAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeFlood creates an SVG feFlood element
func SvgFeFlood(args ...SvgFeFloodArg) Node {
	a := defaultSvgFeFloodAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeFlood(a, &kids)
	}
	return Node{
		Tag:   "feFlood",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feFlood
func (g Global) applyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// FloodColorOpt applies to FeFlood
func (o FloodColorOpt) applyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeFlood
func (o FloodOpacityOpt) applyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeFloodAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
}
