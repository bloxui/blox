// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeFloodAttrs holds the attributes for the feFlood SVG element
type SvgFeFloodAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgFeFloodArg interface for feFlood element arguments
type SvgFeFloodArg interface {
	ApplyFeFlood(*SvgFeFloodAttrs, *[]Component)
}

// defaultSvgFeFloodAttrs creates default attributes for feFlood
func defaultSvgFeFloodAttrs() *SvgFeFloodAttrs {
	return &SvgFeFloodAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeFlood creates an SVG feFlood element
func SvgFeFlood(args ...SvgFeFloodArg) Node {
	a := defaultSvgFeFloodAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFeFlood(a, &kids)
	}
	return Node{
		Tag:   "feFlood",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feFlood
func (g Global) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to FeFlood
func (o AlignmentBaselineOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeFlood
func (o BaselineShiftOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeFlood
func (o ClipOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeFlood
func (o ClipPathOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeFlood
func (o ClipRuleOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeFlood
func (o ColorOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeFlood
func (o ColorInterpolationOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeFlood
func (o ColorInterpolationFiltersOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeFlood
func (o ColorProfileOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeFlood
func (o ColorRenderingOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeFlood
func (o CursorOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeFlood
func (o DirectionOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeFlood
func (o DisplayOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeFlood
func (o DominantBaselineOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to FeFlood
func (o EnableBackgroundOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeFlood
func (o FillOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeFlood
func (o FillOpacityOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeFlood
func (o FillRuleOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeFlood
func (o FilterOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeFlood
func (o FloodColorOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeFlood
func (o FloodOpacityOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeFlood
func (o FontFamilyOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeFlood
func (o FontSizeOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeFlood
func (o FontSizeAdjustOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeFlood
func (o FontStretchOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeFlood
func (o FontStyleOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeFlood
func (o FontVariantOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeFlood
func (o FontWeightOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeFlood
func (o GlyphOrientationHorizontalOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeFlood
func (o GlyphOrientationVerticalOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeFlood
func (o HeightOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeFlood
func (o ImageRenderingOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to FeFlood
func (o KerningOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeFlood
func (o LetterSpacingOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeFlood
func (o LightingColorOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeFlood
func (o MarkerEndOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeFlood
func (o MarkerMidOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeFlood
func (o MarkerStartOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeFlood
func (o MaskOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeFlood
func (o OpacityOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to FeFlood
func (o OverflowOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeFlood
func (o PointerEventsOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ResultOpt applies to FeFlood
func (o ResultOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeFlood
func (o ShapeRenderingOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeFlood
func (o StopColorOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeFlood
func (o StopOpacityOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeFlood
func (o StrokeOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeFlood
func (o StrokeDasharrayOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeFlood
func (o StrokeDashoffsetOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeFlood
func (o StrokeLinecapOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeFlood
func (o StrokeLinejoinOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeFlood
func (o StrokeMiterlimitOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeFlood
func (o StrokeOpacityOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeFlood
func (o StrokeWidthOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeFlood
func (o TextAnchorOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeFlood
func (o TextDecorationOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeFlood
func (o TextRenderingOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeFlood
func (o UnicodeBidiOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeFlood
func (o VisibilityOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeFlood
func (o WidthOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeFlood
func (o WordSpacingOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeFlood
func (o WritingModeOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeFlood
func (o XOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FeFlood
func (o YOpt) ApplyFeFlood(a *SvgFeFloodAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeFloodAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Result != "" {
		Attr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
