// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgMarkerAttrs holds the attributes for the marker SVG element
type SvgMarkerAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	MarkerHeight               string
	MarkerUnits                string
	MarkerWidth                string
	Mask                       string
	Opacity                    string
	Orient                     string
	Overflow                   string
	PointerEvents              string
	PreserveAspectRatio        string
	RefX                       string
	RefY                       string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	ViewBox                    string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgMarkerArg interface for marker element arguments
type SvgMarkerArg interface {
	ApplyMarker(*SvgMarkerAttrs, *[]Component)
}

// defaultSvgMarkerAttrs creates default attributes for marker
func defaultSvgMarkerAttrs() *SvgMarkerAttrs {
	return &SvgMarkerAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgMarker creates an SVG marker element
func SvgMarker(args ...SvgMarkerArg) Node {
	a := defaultSvgMarkerAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyMarker(a, &kids)
	}
	return Node{
		Tag:   "marker",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to marker
func (g Global) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Marker
func (o AlignmentBaselineOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Marker
func (o BaselineShiftOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Marker
func (o ClipOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Marker
func (o ClipPathOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Marker
func (o ClipRuleOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Marker
func (o ColorOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Marker
func (o ColorInterpolationOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Marker
func (o ColorInterpolationFiltersOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Marker
func (o ColorProfileOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Marker
func (o ColorRenderingOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Marker
func (o CursorOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Marker
func (o DirectionOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Marker
func (o DisplayOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Marker
func (o DominantBaselineOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Marker
func (o EnableBackgroundOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Marker
func (o ExternalResourcesRequiredOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Marker
func (o FillOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Marker
func (o FillOpacityOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Marker
func (o FillRuleOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Marker
func (o FilterOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Marker
func (o FloodColorOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Marker
func (o FloodOpacityOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Marker
func (o FontFamilyOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Marker
func (o FontSizeOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Marker
func (o FontSizeAdjustOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Marker
func (o FontStretchOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Marker
func (o FontStyleOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Marker
func (o FontVariantOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Marker
func (o FontWeightOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Marker
func (o GlyphOrientationHorizontalOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Marker
func (o GlyphOrientationVerticalOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Marker
func (o ImageRenderingOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Marker
func (o KerningOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Marker
func (o LetterSpacingOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Marker
func (o LightingColorOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Marker
func (o MarkerEndOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Marker
func (o MarkerMidOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Marker
func (o MarkerStartOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MarkerHeightOpt applies to Marker
func (o MarkerHeightOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.MarkerHeight = o.v
}

// MarkerUnitsOpt applies to Marker
func (o MarkerUnitsOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.MarkerUnits = o.v
}

// MarkerWidthOpt applies to Marker
func (o MarkerWidthOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.MarkerWidth = o.v
}

// MaskOpt applies to Marker
func (o MaskOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to Marker
func (o OpacityOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OrientOpt applies to Marker
func (o OrientOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Orient = o.v
}

// OverflowOpt applies to Marker
func (o OverflowOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Marker
func (o PointerEventsOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// PreserveAspectRatioOpt applies to Marker
func (o PreserveAspectRatioOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.PreserveAspectRatio = o.v
}

// RefXOpt applies to Marker
func (o RefXOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.RefX = o.v
}

// RefYOpt applies to Marker
func (o RefYOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.RefY = o.v
}

// ShapeRenderingOpt applies to Marker
func (o ShapeRenderingOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Marker
func (o StopColorOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Marker
func (o StopOpacityOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Marker
func (o StrokeOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Marker
func (o StrokeDasharrayOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Marker
func (o StrokeDashoffsetOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Marker
func (o StrokeLinecapOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Marker
func (o StrokeLinejoinOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Marker
func (o StrokeMiterlimitOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Marker
func (o StrokeOpacityOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Marker
func (o StrokeWidthOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to Marker
func (o TextAnchorOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Marker
func (o TextDecorationOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Marker
func (o TextRenderingOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to Marker
func (o UnicodeBidiOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// ViewBoxOpt applies to Marker
func (o ViewBoxOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.ViewBox = o.v
}

// VisibilityOpt applies to Marker
func (o VisibilityOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Marker
func (o WordSpacingOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Marker
func (o WritingModeOpt) ApplyMarker(a *SvgMarkerAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgMarkerAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.MarkerHeight != "" {
		Attr(sb, "markerHeight", a.MarkerHeight)
	}
	if a.MarkerUnits != "" {
		Attr(sb, "markerUnits", a.MarkerUnits)
	}
	if a.MarkerWidth != "" {
		Attr(sb, "markerWidth", a.MarkerWidth)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Orient != "" {
		Attr(sb, "orient", a.Orient)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.PreserveAspectRatio != "" {
		Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RefX != "" {
		Attr(sb, "refX", a.RefX)
	}
	if a.RefY != "" {
		Attr(sb, "refY", a.RefY)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.ViewBox != "" {
		Attr(sb, "viewBox", a.ViewBox)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
