// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgVkernAttrs holds the attributes for the vkern SVG element
type SvgVkernAttrs struct {
	GlobalAttrs
	G1 string
	G2 string
	K  string
	U1 string
	U2 string
}

// SvgVkernArg interface for vkern element arguments
type SvgVkernArg interface {
	applyVkern(*SvgVkernAttrs, *[]Component)
}

// defaultSvgVkernAttrs creates default attributes for vkern
func defaultSvgVkernAttrs() *SvgVkernAttrs {
	return &SvgVkernAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgVkern creates an SVG vkern element
func SvgVkern(args ...SvgVkernArg) Node {
	a := defaultSvgVkernAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyVkern(a, &kids)
	}
	return Node{
		Tag:   "vkern",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to vkern
func (g Global) applyVkern(a *SvgVkernAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// G1Opt applies to Vkern
func (o G1Opt) applyVkern(a *SvgVkernAttrs, _ *[]Component) {
	a.G1 = o.v
}

// G2Opt applies to Vkern
func (o G2Opt) applyVkern(a *SvgVkernAttrs, _ *[]Component) {
	a.G2 = o.v
}

// KOpt applies to Vkern
func (o KOpt) applyVkern(a *SvgVkernAttrs, _ *[]Component) {
	a.K = o.v
}

// U1Opt applies to Vkern
func (o U1Opt) applyVkern(a *SvgVkernAttrs, _ *[]Component) {
	a.U1 = o.v
}

// U2Opt applies to Vkern
func (o U2Opt) applyVkern(a *SvgVkernAttrs, _ *[]Component) {
	a.U2 = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgVkernAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.G1 != "" {
		Attr(sb, "g1", a.G1)
	}
	if a.G2 != "" {
		Attr(sb, "g2", a.G2)
	}
	if a.K != "" {
		Attr(sb, "k", a.K)
	}
	if a.U1 != "" {
		Attr(sb, "u1", a.U1)
	}
	if a.U2 != "" {
		Attr(sb, "u2", a.U2)
	}
}
