// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// FeDisplacementMapAttrs holds the attributes for the feDisplacementMap SVG element
type FeDisplacementMapAttrs struct {
	SvgGlobal        SvgGlobalAttrs
	In               string
	In2              string
	Scale            string
	XChannelSelector string
	YChannelSelector string
}

// FeDisplacementMapArg interface for feDisplacementMap element arguments
type FeDisplacementMapArg interface {
	ApplyFeDisplacementMap(*FeDisplacementMapAttrs, *[]html.Component)
}

// defaultFeDisplacementMapAttrs creates default attributes for feDisplacementMap
func defaultFeDisplacementMapAttrs() *FeDisplacementMapAttrs {
	return &FeDisplacementMapAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeDisplacementMap creates an SVG feDisplacementMap element
func FeDisplacementMap(args ...FeDisplacementMapArg) html.Node {
	a := defaultFeDisplacementMapAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyFeDisplacementMap(a, &kids)
	}
	return html.Node{
		Tag:   "feDisplacementMap",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feDisplacementMap
func (g Global) ApplyFeDisplacementMap(a *FeDisplacementMapAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeDisplacementMap
func (o InOpt) ApplyFeDisplacementMap(a *FeDisplacementMapAttrs, _ *[]html.Component) {
	a.In = o.v
}

// In2Opt applies to FeDisplacementMap
func (o In2Opt) ApplyFeDisplacementMap(a *FeDisplacementMapAttrs, _ *[]html.Component) {
	a.In2 = o.v
}

// ScaleOpt applies to FeDisplacementMap
func (o ScaleOpt) ApplyFeDisplacementMap(a *FeDisplacementMapAttrs, _ *[]html.Component) {
	a.Scale = o.v
}

// XChannelSelectorOpt applies to FeDisplacementMap
func (o XChannelSelectorOpt) ApplyFeDisplacementMap(a *FeDisplacementMapAttrs, _ *[]html.Component) {
	a.XChannelSelector = o.v
}

// YChannelSelectorOpt applies to FeDisplacementMap
func (o YChannelSelectorOpt) ApplyFeDisplacementMap(a *FeDisplacementMapAttrs, _ *[]html.Component) {
	a.YChannelSelector = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeDisplacementMapAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.In2 != "" {
		SvgAttr(sb, "in2", a.In2)
	}
	if a.Scale != "" {
		SvgAttr(sb, "scale", a.Scale)
	}
	if a.XChannelSelector != "" {
		SvgAttr(sb, "xChannelSelector", a.XChannelSelector)
	}
	if a.YChannelSelector != "" {
		SvgAttr(sb, "yChannelSelector", a.YChannelSelector)
	}
}
