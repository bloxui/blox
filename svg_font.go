// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFontAttrs holds the attributes for the font SVG element
type SvgFontAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	HorizAdvX                  string
	HorizOriginX               string
	HorizOriginY               string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	VertAdvY                   string
	VertOriginX                string
	VertOriginY                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgFontArg interface for font element arguments
type SvgFontArg interface {
	ApplyFont(*SvgFontAttrs, *[]Component)
}

// defaultSvgFontAttrs creates default attributes for font
func defaultSvgFontAttrs() *SvgFontAttrs {
	return &SvgFontAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFont creates an SVG font element
func SvgFont(args ...SvgFontArg) Node {
	a := defaultSvgFontAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFont(a, &kids)
	}
	return Node{
		Tag:   "font",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font
func (g Global) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Font
func (o AlignmentBaselineOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Font
func (o BaselineShiftOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Font
func (o ClipOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Font
func (o ClipPathOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Font
func (o ClipRuleOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Font
func (o ColorOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Font
func (o ColorInterpolationOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Font
func (o ColorInterpolationFiltersOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Font
func (o ColorProfileOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Font
func (o ColorRenderingOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Font
func (o CursorOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Font
func (o DirectionOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Font
func (o DisplayOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Font
func (o DominantBaselineOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Font
func (o EnableBackgroundOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Font
func (o ExternalResourcesRequiredOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Font
func (o FillOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Font
func (o FillOpacityOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Font
func (o FillRuleOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Font
func (o FilterOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Font
func (o FloodColorOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Font
func (o FloodOpacityOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Font
func (o FontFamilyOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Font
func (o FontSizeOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Font
func (o FontSizeAdjustOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Font
func (o FontStretchOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Font
func (o FontStyleOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Font
func (o FontVariantOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Font
func (o FontWeightOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Font
func (o GlyphOrientationHorizontalOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Font
func (o GlyphOrientationVerticalOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HorizAdvXOpt applies to Font
func (o HorizAdvXOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.HorizAdvX = o.v
}

// HorizOriginXOpt applies to Font
func (o HorizOriginXOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.HorizOriginX = o.v
}

// HorizOriginYOpt applies to Font
func (o HorizOriginYOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.HorizOriginY = o.v
}

// ImageRenderingOpt applies to Font
func (o ImageRenderingOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Font
func (o KerningOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Font
func (o LetterSpacingOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Font
func (o LightingColorOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Font
func (o MarkerEndOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Font
func (o MarkerMidOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Font
func (o MarkerStartOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Font
func (o MaskOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to Font
func (o OpacityOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Font
func (o OverflowOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Font
func (o PointerEventsOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ShapeRenderingOpt applies to Font
func (o ShapeRenderingOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Font
func (o StopColorOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Font
func (o StopOpacityOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Font
func (o StrokeOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Font
func (o StrokeDasharrayOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Font
func (o StrokeDashoffsetOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Font
func (o StrokeLinecapOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Font
func (o StrokeLinejoinOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Font
func (o StrokeMiterlimitOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Font
func (o StrokeOpacityOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Font
func (o StrokeWidthOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to Font
func (o TextAnchorOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Font
func (o TextDecorationOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Font
func (o TextRenderingOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to Font
func (o UnicodeBidiOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VertAdvYOpt applies to Font
func (o VertAdvYOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.VertAdvY = o.v
}

// VertOriginXOpt applies to Font
func (o VertOriginXOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.VertOriginX = o.v
}

// VertOriginYOpt applies to Font
func (o VertOriginYOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.VertOriginY = o.v
}

// VisibilityOpt applies to Font
func (o VisibilityOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Font
func (o WordSpacingOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Font
func (o WritingModeOpt) ApplyFont(a *SvgFontAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFontAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.HorizAdvX != "" {
		Attr(sb, "horiz-adv-x", a.HorizAdvX)
	}
	if a.HorizOriginX != "" {
		Attr(sb, "horiz-origin-x", a.HorizOriginX)
	}
	if a.HorizOriginY != "" {
		Attr(sb, "horiz-origin-y", a.HorizOriginY)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.VertAdvY != "" {
		Attr(sb, "vert-adv-y", a.VertAdvY)
	}
	if a.VertOriginX != "" {
		Attr(sb, "vert-origin-x", a.VertOriginX)
	}
	if a.VertOriginY != "" {
		Attr(sb, "vert-origin-y", a.VertOriginY)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
