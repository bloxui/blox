// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// FeDistantLightAttrs holds the attributes for the feDistantLight SVG element
type FeDistantLightAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Azimuth   string
	Elevation string
}

// FeDistantLightArg interface for feDistantLight element arguments
type FeDistantLightArg interface {
	ApplyFeDistantLight(*FeDistantLightAttrs, *[]html.Component)
}

// defaultFeDistantLightAttrs creates default attributes for feDistantLight
func defaultFeDistantLightAttrs() *FeDistantLightAttrs {
	return &FeDistantLightAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeDistantLight creates an SVG feDistantLight element
func FeDistantLight(args ...FeDistantLightArg) html.Node {
	a := defaultFeDistantLightAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyFeDistantLight(a, &kids)
	}
	return html.Node{
		Tag:   "feDistantLight",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feDistantLight
func (g Global) ApplyFeDistantLight(a *FeDistantLightAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AzimuthOpt applies to FeDistantLight
func (o AzimuthOpt) ApplyFeDistantLight(a *FeDistantLightAttrs, _ *[]html.Component) {
	a.Azimuth = o.v
}

// ElevationOpt applies to FeDistantLight
func (o ElevationOpt) ApplyFeDistantLight(a *FeDistantLightAttrs, _ *[]html.Component) {
	a.Elevation = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeDistantLightAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Azimuth != "" {
		SvgAttr(sb, "azimuth", a.Azimuth)
	}
	if a.Elevation != "" {
		SvgAttr(sb, "elevation", a.Elevation)
	}
}
