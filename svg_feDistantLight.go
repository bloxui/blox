// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeDistantLightAttrs holds the attributes for the feDistantLight SVG element
type SvgFeDistantLightAttrs struct {
	GlobalAttrs
	Azimuth   string
	Elevation string
}

// SvgFeDistantLightArg interface for feDistantLight element arguments
type SvgFeDistantLightArg interface {
	ApplyFeDistantLight(*SvgFeDistantLightAttrs, *[]Component)
}

// defaultSvgFeDistantLightAttrs creates default attributes for feDistantLight
func defaultSvgFeDistantLightAttrs() *SvgFeDistantLightAttrs {
	return &SvgFeDistantLightAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeDistantLight creates an SVG feDistantLight element
func SvgFeDistantLight(args ...SvgFeDistantLightArg) Node {
	a := defaultSvgFeDistantLightAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFeDistantLight(a, &kids)
	}
	return Node{
		Tag:   "feDistantLight",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feDistantLight
func (g Global) ApplyFeDistantLight(a *SvgFeDistantLightAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AzimuthOpt applies to FeDistantLight
func (o AzimuthOpt) ApplyFeDistantLight(a *SvgFeDistantLightAttrs, _ *[]Component) {
	a.Azimuth = o.v
}

// ElevationOpt applies to FeDistantLight
func (o ElevationOpt) ApplyFeDistantLight(a *SvgFeDistantLightAttrs, _ *[]Component) {
	a.Elevation = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeDistantLightAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Azimuth != "" {
		Attr(sb, "azimuth", a.Azimuth)
	}
	if a.Elevation != "" {
		Attr(sb, "elevation", a.Elevation)
	}
}
