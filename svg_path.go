// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// PathAttrs holds the attributes for the path SVG element
type PathAttrs struct {
	SvgGlobal   SvgGlobalAttrs
	D           string
	FillOpacity string
	PathLength  string
}

// PathArg interface for path element arguments
type PathArg interface {
	ApplyPath(*PathAttrs, *[]html.Component)
}

// defaultPathAttrs creates default attributes for path
func defaultPathAttrs() *PathAttrs {
	return &PathAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Path creates an SVG path element (self-closing)
func Path(args ...PathArg) html.Node {
	a := defaultPathAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyPath(a, &kids)
	}
	return html.Node{
		Tag:   "path",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to path
func (g Global) ApplyPath(a *PathAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// DOpt applies to Path
func (o DOpt) ApplyPath(a *PathAttrs, _ *[]html.Component) {
	a.D = o.v
}

// FillOpacityOpt applies to Path
func (o FillOpacityOpt) ApplyPath(a *PathAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// PathLengthOpt applies to Path
func (o PathLengthOpt) ApplyPath(a *PathAttrs, _ *[]html.Component) {
	a.PathLength = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *PathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.D != "" {
		SvgAttr(sb, "d", a.D)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.PathLength != "" {
		SvgAttr(sb, "pathLength", a.PathLength)
	}
}
