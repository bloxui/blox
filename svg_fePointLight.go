// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFePointLightAttrs holds the attributes for the fePointLight SVG element
type SvgFePointLightAttrs struct {
	GlobalAttrs
	X string
	Y string
	Z string
}

// SvgFePointLightArg interface for fePointLight element arguments
type SvgFePointLightArg interface {
	applyFePointLight(*SvgFePointLightAttrs, *[]Component)
}

// defaultSvgFePointLightAttrs creates default attributes for fePointLight
func defaultSvgFePointLightAttrs() *SvgFePointLightAttrs {
	return &SvgFePointLightAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFePointLight creates an SVG fePointLight element
func SvgFePointLight(args ...SvgFePointLightArg) Node {
	a := defaultSvgFePointLightAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFePointLight(a, &kids)
	}
	return Node{
		Tag:   "fePointLight",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to fePointLight
func (g Global) applyFePointLight(a *SvgFePointLightAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// XOpt applies to FePointLight
func (o XOpt) applyFePointLight(a *SvgFePointLightAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FePointLight
func (o YOpt) applyFePointLight(a *SvgFePointLightAttrs, _ *[]Component) {
	a.Y = o.v
}

// ZOpt applies to FePointLight
func (o ZOpt) applyFePointLight(a *SvgFePointLightAttrs, _ *[]Component) {
	a.Z = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFePointLightAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
	if a.Z != "" {
		Attr(sb, "z", a.Z)
	}
}
