// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFontFaceFormatAttrs holds the attributes for the font-face-format SVG element
type SvgFontFaceFormatAttrs struct {
	GlobalAttrs
	String string
}

// SvgFontFaceFormatArg interface for font-face-format element arguments
type SvgFontFaceFormatArg interface {
	ApplyFontFaceFormat(*SvgFontFaceFormatAttrs, *[]Component)
}

// defaultSvgFontFaceFormatAttrs creates default attributes for font-face-format
func defaultSvgFontFaceFormatAttrs() *SvgFontFaceFormatAttrs {
	return &SvgFontFaceFormatAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFontFaceFormat creates an SVG font-face-format element
func SvgFontFaceFormat(args ...SvgFontFaceFormatArg) Node {
	a := defaultSvgFontFaceFormatAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFontFaceFormat(a, &kids)
	}
	return Node{
		Tag:   "font-face-format",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font-face-format
func (g Global) ApplyFontFaceFormat(a *SvgFontFaceFormatAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// StringOpt applies to FontFaceFormat
func (o StringOpt) ApplyFontFaceFormat(a *SvgFontFaceFormatAttrs, _ *[]Component) {
	a.String = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFontFaceFormatAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.String != "" {
		Attr(sb, "string", a.String)
	}
}
