// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgDefsAttrs holds the attributes for the defs SVG element
type SvgDefsAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgDefsArg interface for defs element arguments
type SvgDefsArg interface {
	ApplyDefs(*SvgDefsAttrs, *[]Component)
}

// defaultSvgDefsAttrs creates default attributes for defs
func defaultSvgDefsAttrs() *SvgDefsAttrs {
	return &SvgDefsAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgDefs creates an SVG defs element
func SvgDefs(args ...SvgDefsArg) Node {
	a := defaultSvgDefsAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyDefs(a, &kids)
	}
	return Node{
		Tag:   "defs",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to defs
func (g Global) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Defs
func (o AlignmentBaselineOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Defs
func (o BaselineShiftOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Defs
func (o ClipOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Defs
func (o ClipPathOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Defs
func (o ClipRuleOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Defs
func (o ColorOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Defs
func (o ColorInterpolationOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Defs
func (o ColorInterpolationFiltersOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Defs
func (o ColorProfileOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Defs
func (o ColorRenderingOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Defs
func (o CursorOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Defs
func (o DirectionOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Defs
func (o DisplayOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Defs
func (o DominantBaselineOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Defs
func (o EnableBackgroundOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Defs
func (o ExternalResourcesRequiredOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Defs
func (o FillOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Defs
func (o FillOpacityOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Defs
func (o FillRuleOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Defs
func (o FilterOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Defs
func (o FloodColorOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Defs
func (o FloodOpacityOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Defs
func (o FontFamilyOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Defs
func (o FontSizeOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Defs
func (o FontSizeAdjustOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Defs
func (o FontStretchOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Defs
func (o FontStyleOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Defs
func (o FontVariantOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Defs
func (o FontWeightOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Defs
func (o GlyphOrientationHorizontalOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Defs
func (o GlyphOrientationVerticalOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Defs
func (o ImageRenderingOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Defs
func (o KerningOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Defs
func (o LetterSpacingOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Defs
func (o LightingColorOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Defs
func (o MarkerEndOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Defs
func (o MarkerMidOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Defs
func (o MarkerStartOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Defs
func (o MaskOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to Defs
func (o OpacityOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Defs
func (o OverflowOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Defs
func (o PointerEventsOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Defs
func (o RequiredExtensionsOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Defs
func (o RequiredFeaturesOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// ShapeRenderingOpt applies to Defs
func (o ShapeRenderingOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Defs
func (o StopColorOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Defs
func (o StopOpacityOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Defs
func (o StrokeOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Defs
func (o StrokeDasharrayOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Defs
func (o StrokeDashoffsetOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Defs
func (o StrokeLinecapOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Defs
func (o StrokeLinejoinOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Defs
func (o StrokeMiterlimitOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Defs
func (o StrokeOpacityOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Defs
func (o StrokeWidthOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Defs
func (o SystemLanguageOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Defs
func (o TextAnchorOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Defs
func (o TextDecorationOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Defs
func (o TextRenderingOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Defs
func (o TransformOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Defs
func (o UnicodeBidiOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Defs
func (o VisibilityOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Defs
func (o WordSpacingOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Defs
func (o WritingModeOpt) ApplyDefs(a *SvgDefsAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgDefsAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
