// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeMorphologyAttrs holds the attributes for the feMorphology SVG element
type SvgFeMorphologyAttrs struct {
	GlobalAttrs
	In       string
	Operator string
	Radius   string
}

// SvgFeMorphologyArg interface for feMorphology element arguments
type SvgFeMorphologyArg interface {
	applyFeMorphology(*SvgFeMorphologyAttrs, *[]Component)
}

// defaultSvgFeMorphologyAttrs creates default attributes for feMorphology
func defaultSvgFeMorphologyAttrs() *SvgFeMorphologyAttrs {
	return &SvgFeMorphologyAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeMorphology creates an SVG feMorphology element
func SvgFeMorphology(args ...SvgFeMorphologyArg) Node {
	a := defaultSvgFeMorphologyAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeMorphology(a, &kids)
	}
	return Node{
		Tag:   "feMorphology",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feMorphology
func (g Global) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeMorphology
func (o InOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.In = o.v
}

// OperatorOpt applies to FeMorphology
func (o OperatorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Operator = o.v
}

// RadiusOpt applies to FeMorphology
func (o RadiusOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Radius = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeMorphologyAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.Operator != "" {
		Attr(sb, "operator", a.Operator)
	}
	if a.Radius != "" {
		Attr(sb, "radius", a.Radius)
	}
}
