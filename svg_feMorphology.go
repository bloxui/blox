// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// FeMorphologyAttrs holds the attributes for the feMorphology SVG element
type FeMorphologyAttrs struct {
	SvgGlobal SvgGlobalAttrs
	In        string
	Operator  string
	Radius    string
}

// FeMorphologyArg interface for feMorphology element arguments
type FeMorphologyArg interface {
	ApplyFeMorphology(*FeMorphologyAttrs, *[]html.Component)
}

// defaultFeMorphologyAttrs creates default attributes for feMorphology
func defaultFeMorphologyAttrs() *FeMorphologyAttrs {
	return &FeMorphologyAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeMorphology creates an SVG feMorphology element
func FeMorphology(args ...FeMorphologyArg) html.Node {
	a := defaultFeMorphologyAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyFeMorphology(a, &kids)
	}
	return html.Node{
		Tag:   "feMorphology",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feMorphology
func (g Global) ApplyFeMorphology(a *FeMorphologyAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeMorphology
func (o InOpt) ApplyFeMorphology(a *FeMorphologyAttrs, _ *[]html.Component) {
	a.In = o.v
}

// OperatorOpt applies to FeMorphology
func (o OperatorOpt) ApplyFeMorphology(a *FeMorphologyAttrs, _ *[]html.Component) {
	a.Operator = o.v
}

// RadiusOpt applies to FeMorphology
func (o RadiusOpt) ApplyFeMorphology(a *FeMorphologyAttrs, _ *[]html.Component) {
	a.Radius = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeMorphologyAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.Operator != "" {
		SvgAttr(sb, "operator", a.Operator)
	}
	if a.Radius != "" {
		SvgAttr(sb, "radius", a.Radius)
	}
}
