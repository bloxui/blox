// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeMorphologyAttrs holds the attributes for the feMorphology SVG element
type SvgFeMorphologyAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	In                         string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Operator                   string
	Overflow                   string
	PointerEvents              string
	Radius                     string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgFeMorphologyArg interface for feMorphology element arguments
type SvgFeMorphologyArg interface {
	applyFeMorphology(*SvgFeMorphologyAttrs, *[]Component)
}

// defaultSvgFeMorphologyAttrs creates default attributes for feMorphology
func defaultSvgFeMorphologyAttrs() *SvgFeMorphologyAttrs {
	return &SvgFeMorphologyAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeMorphology creates an SVG feMorphology element
func SvgFeMorphology(args ...SvgFeMorphologyArg) Node {
	a := defaultSvgFeMorphologyAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeMorphology(a, &kids)
	}
	return Node{
		Tag:   "feMorphology",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feMorphology
func (g Global) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to FeMorphology
func (o AlignmentBaselineOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeMorphology
func (o BaselineShiftOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeMorphology
func (o ClipOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeMorphology
func (o ClipPathOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeMorphology
func (o ClipRuleOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeMorphology
func (o ColorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeMorphology
func (o ColorInterpolationOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeMorphology
func (o ColorInterpolationFiltersOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeMorphology
func (o ColorProfileOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeMorphology
func (o ColorRenderingOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeMorphology
func (o CursorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeMorphology
func (o DirectionOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeMorphology
func (o DisplayOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeMorphology
func (o DominantBaselineOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to FeMorphology
func (o EnableBackgroundOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeMorphology
func (o FillOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeMorphology
func (o FillOpacityOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeMorphology
func (o FillRuleOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeMorphology
func (o FilterOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeMorphology
func (o FloodColorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeMorphology
func (o FloodOpacityOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeMorphology
func (o FontFamilyOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeMorphology
func (o FontSizeOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeMorphology
func (o FontSizeAdjustOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeMorphology
func (o FontStretchOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeMorphology
func (o FontStyleOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeMorphology
func (o FontVariantOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeMorphology
func (o FontWeightOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeMorphology
func (o GlyphOrientationHorizontalOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeMorphology
func (o GlyphOrientationVerticalOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeMorphology
func (o HeightOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeMorphology
func (o ImageRenderingOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// InOpt applies to FeMorphology
func (o InOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.In = o.v
}

// KerningOpt applies to FeMorphology
func (o KerningOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeMorphology
func (o LetterSpacingOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeMorphology
func (o LightingColorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeMorphology
func (o MarkerEndOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeMorphology
func (o MarkerMidOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeMorphology
func (o MarkerStartOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeMorphology
func (o MaskOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeMorphology
func (o OpacityOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OperatorOpt applies to FeMorphology
func (o OperatorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Operator = o.v
}

// OverflowOpt applies to FeMorphology
func (o OverflowOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeMorphology
func (o PointerEventsOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RadiusOpt applies to FeMorphology
func (o RadiusOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Radius = o.v
}

// ResultOpt applies to FeMorphology
func (o ResultOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeMorphology
func (o ShapeRenderingOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeMorphology
func (o StopColorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeMorphology
func (o StopOpacityOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeMorphology
func (o StrokeOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeMorphology
func (o StrokeDasharrayOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeMorphology
func (o StrokeDashoffsetOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeMorphology
func (o StrokeLinecapOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeMorphology
func (o StrokeLinejoinOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeMorphology
func (o StrokeMiterlimitOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeMorphology
func (o StrokeOpacityOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeMorphology
func (o StrokeWidthOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeMorphology
func (o TextAnchorOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeMorphology
func (o TextDecorationOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeMorphology
func (o TextRenderingOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeMorphology
func (o UnicodeBidiOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeMorphology
func (o VisibilityOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeMorphology
func (o WidthOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeMorphology
func (o WordSpacingOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeMorphology
func (o WritingModeOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeMorphology
func (o XOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FeMorphology
func (o YOpt) applyFeMorphology(a *SvgFeMorphologyAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeMorphologyAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Operator != "" {
		Attr(sb, "operator", a.Operator)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Radius != "" {
		Attr(sb, "radius", a.Radius)
	}
	if a.Result != "" {
		Attr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
