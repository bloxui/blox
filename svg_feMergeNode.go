// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// FeMergeNodeAttrs holds the attributes for the feMergeNode SVG element
type FeMergeNodeAttrs struct {
	SvgGlobal SvgGlobalAttrs
	In        string
}

// FeMergeNodeArg interface for feMergeNode element arguments
type FeMergeNodeArg interface {
	ApplyFeMergeNode(*FeMergeNodeAttrs, *[]html.Component)
}

// defaultFeMergeNodeAttrs creates default attributes for feMergeNode
func defaultFeMergeNodeAttrs() *FeMergeNodeAttrs {
	return &FeMergeNodeAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeMergeNode creates an SVG feMergeNode element
func FeMergeNode(args ...FeMergeNodeArg) html.Node {
	a := defaultFeMergeNodeAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyFeMergeNode(a, &kids)
	}
	return html.Node{
		Tag:   "feMergeNode",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feMergeNode
func (g Global) ApplyFeMergeNode(a *FeMergeNodeAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeMergeNode
func (o InOpt) ApplyFeMergeNode(a *FeMergeNodeAttrs, _ *[]html.Component) {
	a.In = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeMergeNodeAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
}
