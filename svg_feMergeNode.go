// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeMergeNodeAttrs holds the attributes for the feMergeNode SVG element
type SvgFeMergeNodeAttrs struct {
	GlobalAttrs
	In string
}

// SvgFeMergeNodeArg interface for feMergeNode element arguments
type SvgFeMergeNodeArg interface {
	ApplyFeMergeNode(*SvgFeMergeNodeAttrs, *[]Component)
}

// defaultSvgFeMergeNodeAttrs creates default attributes for feMergeNode
func defaultSvgFeMergeNodeAttrs() *SvgFeMergeNodeAttrs {
	return &SvgFeMergeNodeAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeMergeNode creates an SVG feMergeNode element
func SvgFeMergeNode(args ...SvgFeMergeNodeArg) Node {
	a := defaultSvgFeMergeNodeAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFeMergeNode(a, &kids)
	}
	return Node{
		Tag:   "feMergeNode",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feMergeNode
func (g Global) ApplyFeMergeNode(a *SvgFeMergeNodeAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeMergeNode
func (o InOpt) ApplyFeMergeNode(a *SvgFeMergeNodeAttrs, _ *[]Component) {
	a.In = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeMergeNodeAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
}
