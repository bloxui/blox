// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgClipPathAttrs holds the attributes for the clipPath SVG element
type SvgClipPathAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	ClipPathUnits              string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgClipPathArg interface for clipPath element arguments
type SvgClipPathArg interface {
	ApplyClipPath(*SvgClipPathAttrs, *[]Component)
}

// defaultSvgClipPathAttrs creates default attributes for clipPath
func defaultSvgClipPathAttrs() *SvgClipPathAttrs {
	return &SvgClipPathAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgClipPath creates an SVG clipPath element
func SvgClipPath(args ...SvgClipPathArg) Node {
	a := defaultSvgClipPathAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyClipPath(a, &kids)
	}
	return Node{
		Tag:   "clipPath",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to clipPath
func (g Global) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to ClipPath
func (o AlignmentBaselineOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to ClipPath
func (o BaselineShiftOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to ClipPath
func (o ClipOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to ClipPath
func (o ClipPathOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to ClipPath
func (o ClipRuleOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ClipPathUnitsOpt applies to ClipPath
func (o ClipPathUnitsOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ClipPathUnits = o.v
}

// ColorOpt applies to ClipPath
func (o ColorOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to ClipPath
func (o ColorInterpolationOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to ClipPath
func (o ColorInterpolationFiltersOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to ClipPath
func (o ColorProfileOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to ClipPath
func (o ColorRenderingOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to ClipPath
func (o CursorOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to ClipPath
func (o DirectionOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to ClipPath
func (o DisplayOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to ClipPath
func (o DominantBaselineOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to ClipPath
func (o EnableBackgroundOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to ClipPath
func (o ExternalResourcesRequiredOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to ClipPath
func (o FillOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to ClipPath
func (o FillOpacityOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to ClipPath
func (o FillRuleOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to ClipPath
func (o FilterOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to ClipPath
func (o FloodColorOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to ClipPath
func (o FloodOpacityOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to ClipPath
func (o FontFamilyOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to ClipPath
func (o FontSizeOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to ClipPath
func (o FontSizeAdjustOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to ClipPath
func (o FontStretchOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to ClipPath
func (o FontStyleOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to ClipPath
func (o FontVariantOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to ClipPath
func (o FontWeightOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to ClipPath
func (o GlyphOrientationHorizontalOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to ClipPath
func (o GlyphOrientationVerticalOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to ClipPath
func (o ImageRenderingOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to ClipPath
func (o KerningOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to ClipPath
func (o LetterSpacingOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to ClipPath
func (o LightingColorOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to ClipPath
func (o MarkerEndOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to ClipPath
func (o MarkerMidOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to ClipPath
func (o MarkerStartOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to ClipPath
func (o MaskOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to ClipPath
func (o OpacityOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to ClipPath
func (o OverflowOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to ClipPath
func (o PointerEventsOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to ClipPath
func (o RequiredExtensionsOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to ClipPath
func (o RequiredFeaturesOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// ShapeRenderingOpt applies to ClipPath
func (o ShapeRenderingOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to ClipPath
func (o StopColorOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to ClipPath
func (o StopOpacityOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to ClipPath
func (o StrokeOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to ClipPath
func (o StrokeDasharrayOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to ClipPath
func (o StrokeDashoffsetOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to ClipPath
func (o StrokeLinecapOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to ClipPath
func (o StrokeLinejoinOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to ClipPath
func (o StrokeMiterlimitOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to ClipPath
func (o StrokeOpacityOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to ClipPath
func (o StrokeWidthOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to ClipPath
func (o SystemLanguageOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to ClipPath
func (o TextAnchorOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to ClipPath
func (o TextDecorationOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to ClipPath
func (o TextRenderingOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to ClipPath
func (o TransformOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to ClipPath
func (o UnicodeBidiOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to ClipPath
func (o VisibilityOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to ClipPath
func (o WordSpacingOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to ClipPath
func (o WritingModeOpt) ApplyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgClipPathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.ClipPathUnits != "" {
		Attr(sb, "clipPathUnits", a.ClipPathUnits)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
