// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgClipPathAttrs holds the attributes for the clipPath SVG element
type SvgClipPathAttrs struct {
	GlobalAttrs
	ClipPathUnits string
}

// SvgClipPathArg interface for clipPath element arguments
type SvgClipPathArg interface {
	applyClipPath(*SvgClipPathAttrs, *[]Component)
}

// defaultSvgClipPathAttrs creates default attributes for clipPath
func defaultSvgClipPathAttrs() *SvgClipPathAttrs {
	return &SvgClipPathAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgClipPath creates an SVG clipPath element
func SvgClipPath(args ...SvgClipPathArg) Node {
	a := defaultSvgClipPathAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyClipPath(a, &kids)
	}
	return Node{
		Tag:   "clipPath",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to clipPath
func (g Global) applyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// ClipPathUnitsOpt applies to ClipPath
func (o ClipPathUnitsOpt) applyClipPath(a *SvgClipPathAttrs, _ *[]Component) {
	a.ClipPathUnits = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgClipPathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.ClipPathUnits != "" {
		Attr(sb, "clipPathUnits", a.ClipPathUnits)
	}
}
