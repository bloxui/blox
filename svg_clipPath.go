// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// ClipPathAttrs holds the attributes for the clipPath SVG element
type ClipPathAttrs struct {
	SvgGlobal     SvgGlobalAttrs
	ClipPathUnits string
}

// ClipPathArg interface for clipPath element arguments
type ClipPathArg interface {
	ApplyClipPath(*ClipPathAttrs, *[]html.Component)
}

// defaultClipPathAttrs creates default attributes for clipPath
func defaultClipPathAttrs() *ClipPathAttrs {
	return &ClipPathAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// ClipPath creates an SVG clipPath element
func ClipPath(args ...ClipPathArg) html.Node {
	a := defaultClipPathAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyClipPath(a, &kids)
	}
	return html.Node{
		Tag:   "clipPath",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to clipPath
func (g Global) ApplyClipPath(a *ClipPathAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// ClipPathUnitsOpt applies to ClipPath
func (o ClipPathUnitsOpt) ApplyClipPath(a *ClipPathAttrs, _ *[]html.Component) {
	a.ClipPathUnits = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *ClipPathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.ClipPathUnits != "" {
		SvgAttr(sb, "clipPathUnits", a.ClipPathUnits)
	}
}
