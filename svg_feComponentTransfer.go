// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeComponentTransferAttrs holds the attributes for the feComponentTransfer SVG element
type SvgFeComponentTransferAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	In                         string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgFeComponentTransferArg interface for feComponentTransfer element arguments
type SvgFeComponentTransferArg interface {
	applyFeComponentTransfer(*SvgFeComponentTransferAttrs, *[]Component)
}

// defaultSvgFeComponentTransferAttrs creates default attributes for feComponentTransfer
func defaultSvgFeComponentTransferAttrs() *SvgFeComponentTransferAttrs {
	return &SvgFeComponentTransferAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeComponentTransfer creates an SVG feComponentTransfer element
func SvgFeComponentTransfer(args ...SvgFeComponentTransferArg) Node {
	a := defaultSvgFeComponentTransferAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeComponentTransfer(a, &kids)
	}
	return Node{
		Tag:   "feComponentTransfer",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feComponentTransfer
func (g Global) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to FeComponentTransfer
func (o AlignmentBaselineOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeComponentTransfer
func (o BaselineShiftOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeComponentTransfer
func (o ClipOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeComponentTransfer
func (o ClipPathOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeComponentTransfer
func (o ClipRuleOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeComponentTransfer
func (o ColorOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeComponentTransfer
func (o ColorInterpolationOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeComponentTransfer
func (o ColorInterpolationFiltersOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeComponentTransfer
func (o ColorProfileOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeComponentTransfer
func (o ColorRenderingOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeComponentTransfer
func (o CursorOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeComponentTransfer
func (o DirectionOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeComponentTransfer
func (o DisplayOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeComponentTransfer
func (o DominantBaselineOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to FeComponentTransfer
func (o EnableBackgroundOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeComponentTransfer
func (o FillOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeComponentTransfer
func (o FillOpacityOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeComponentTransfer
func (o FillRuleOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeComponentTransfer
func (o FilterOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeComponentTransfer
func (o FloodColorOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeComponentTransfer
func (o FloodOpacityOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeComponentTransfer
func (o FontFamilyOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeComponentTransfer
func (o FontSizeOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeComponentTransfer
func (o FontSizeAdjustOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeComponentTransfer
func (o FontStretchOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeComponentTransfer
func (o FontStyleOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeComponentTransfer
func (o FontVariantOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeComponentTransfer
func (o FontWeightOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeComponentTransfer
func (o GlyphOrientationHorizontalOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeComponentTransfer
func (o GlyphOrientationVerticalOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeComponentTransfer
func (o HeightOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeComponentTransfer
func (o ImageRenderingOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// InOpt applies to FeComponentTransfer
func (o InOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.In = o.v
}

// KerningOpt applies to FeComponentTransfer
func (o KerningOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeComponentTransfer
func (o LetterSpacingOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeComponentTransfer
func (o LightingColorOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeComponentTransfer
func (o MarkerEndOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeComponentTransfer
func (o MarkerMidOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeComponentTransfer
func (o MarkerStartOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeComponentTransfer
func (o MaskOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeComponentTransfer
func (o OpacityOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to FeComponentTransfer
func (o OverflowOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeComponentTransfer
func (o PointerEventsOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ResultOpt applies to FeComponentTransfer
func (o ResultOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeComponentTransfer
func (o ShapeRenderingOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeComponentTransfer
func (o StopColorOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeComponentTransfer
func (o StopOpacityOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeComponentTransfer
func (o StrokeOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeComponentTransfer
func (o StrokeDasharrayOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeComponentTransfer
func (o StrokeDashoffsetOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeComponentTransfer
func (o StrokeLinecapOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeComponentTransfer
func (o StrokeLinejoinOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeComponentTransfer
func (o StrokeMiterlimitOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeComponentTransfer
func (o StrokeOpacityOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeComponentTransfer
func (o StrokeWidthOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeComponentTransfer
func (o TextAnchorOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeComponentTransfer
func (o TextDecorationOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeComponentTransfer
func (o TextRenderingOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeComponentTransfer
func (o UnicodeBidiOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeComponentTransfer
func (o VisibilityOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeComponentTransfer
func (o WidthOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeComponentTransfer
func (o WordSpacingOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeComponentTransfer
func (o WritingModeOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeComponentTransfer
func (o XOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FeComponentTransfer
func (o YOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeComponentTransferAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Result != "" {
		Attr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
