// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeComponentTransferAttrs holds the attributes for the feComponentTransfer SVG element
type SvgFeComponentTransferAttrs struct {
	GlobalAttrs
	In string
}

// SvgFeComponentTransferArg interface for feComponentTransfer element arguments
type SvgFeComponentTransferArg interface {
	applyFeComponentTransfer(*SvgFeComponentTransferAttrs, *[]Component)
}

// defaultSvgFeComponentTransferAttrs creates default attributes for feComponentTransfer
func defaultSvgFeComponentTransferAttrs() *SvgFeComponentTransferAttrs {
	return &SvgFeComponentTransferAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeComponentTransfer creates an SVG feComponentTransfer element
func SvgFeComponentTransfer(args ...SvgFeComponentTransferArg) Node {
	a := defaultSvgFeComponentTransferAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeComponentTransfer(a, &kids)
	}
	return Node{
		Tag:   "feComponentTransfer",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feComponentTransfer
func (g Global) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeComponentTransfer
func (o InOpt) applyFeComponentTransfer(a *SvgFeComponentTransferAttrs, _ *[]Component) {
	a.In = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeComponentTransferAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
}
