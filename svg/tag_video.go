// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// VideoAttrs holds the attributes for the video SVG element
type VideoAttrs struct {
	SvgGlobal                 SvgGlobalAttrs
	Begin                     string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	FocusHighlight            string
	Focusable                 bool
	Height                    string
	InitialVisibility         string
	Max                       string
	Min                       string
	NavDown                   string
	NavDownLeft               string
	NavDownRight              string
	NavLeft                   string
	NavNext                   string
	NavPrev                   string
	NavRight                  string
	NavUp                     string
	NavUpLeft                 string
	NavUpRight                string
	Overlay                   string
	PreserveAspectRatio       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SyncBehavior              string
	SyncMaster                string
	SyncTolerance             string
	SystemLanguage            string
	Transform                 string
	TransformBehavior         string
	Type                      string
	Width                     string
	X                         string
	Y                         string
}

// VideoArg interface for video element arguments
type VideoArg interface {
	applyVideo(*VideoAttrs, *[]html.Component)
}

// defaultVideoAttrs creates default attributes for video
func defaultVideoAttrs() *VideoAttrs {
	return &VideoAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Video creates an SVG video element
func Video(args ...VideoArg) html.Node {
	a := defaultVideoAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyVideo(a, &kids)
	}
	return html.Node{
		Tag:   "video",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to video
func (g Global) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// BeginOpt applies to Video
func (o BeginOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Begin = o.v
}

// DurOpt applies to Video
func (o DurOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Dur = o.v
}

// EndOpt applies to Video
func (o EndOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.End = o.v
}

// ExternalResourcesRequiredOpt applies to Video
func (o ExternalResourcesRequiredOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Video
func (o FillOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FocusHighlightOpt applies to Video
func (o FocusHighlightOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Video
func (o FocusableOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// HeightOpt applies to Video
func (o HeightOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// InitialVisibilityOpt applies to Video
func (o InitialVisibilityOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.InitialVisibility = o.v
}

// MaxOpt applies to Video
func (o MaxOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Max = o.v
}

// MinOpt applies to Video
func (o MinOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Min = o.v
}

// NavDownOpt applies to Video
func (o NavDownOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Video
func (o NavDownLeftOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Video
func (o NavDownRightOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Video
func (o NavLeftOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Video
func (o NavNextOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Video
func (o NavPrevOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Video
func (o NavRightOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Video
func (o NavUpOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Video
func (o NavUpLeftOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Video
func (o NavUpRightOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OverlayOpt applies to Video
func (o OverlayOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Overlay = o.v
}

// PreserveAspectRatioOpt applies to Video
func (o PreserveAspectRatioOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.PreserveAspectRatio = o.v
}

// RepeatCountOpt applies to Video
func (o RepeatCountOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.RepeatCount = o.v
}

// RepeatDurOpt applies to Video
func (o RepeatDurOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.RepeatDur = o.v
}

// RequiredExtensionsOpt applies to Video
func (o RequiredExtensionsOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Video
func (o RequiredFeaturesOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Video
func (o RequiredFontsOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Video
func (o RequiredFormatsOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// RestartOpt applies to Video
func (o RestartOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Restart = o.v
}

// SyncBehaviorOpt applies to Video
func (o SyncBehaviorOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.SyncBehavior = o.v
}

// SyncMasterOpt applies to Video
func (o SyncMasterOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.SyncMaster = o.v
}

// SyncToleranceOpt applies to Video
func (o SyncToleranceOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.SyncTolerance = o.v
}

// SystemLanguageOpt applies to Video
func (o SystemLanguageOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TransformOpt applies to Video
func (o TransformOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// TransformBehaviorOpt applies to Video
func (o TransformBehaviorOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.TransformBehavior = o.v
}

// TypeOpt applies to Video
func (o TypeOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// WidthOpt applies to Video
func (o WidthOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// XOpt applies to Video
func (o XOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Video
func (o YOpt) applyVideo(a *VideoAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *VideoAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Begin != "" {
		SvgAttr(sb, "begin", a.Begin)
	}
	if a.Dur != "" {
		SvgAttr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		SvgAttr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.InitialVisibility != "" {
		SvgAttr(sb, "initialVisibility", a.InitialVisibility)
	}
	if a.Max != "" {
		SvgAttr(sb, "max", a.Max)
	}
	if a.Min != "" {
		SvgAttr(sb, "min", a.Min)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Overlay != "" {
		SvgAttr(sb, "overlay", a.Overlay)
	}
	if a.PreserveAspectRatio != "" {
		SvgAttr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RepeatCount != "" {
		SvgAttr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		SvgAttr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		SvgAttr(sb, "restart", a.Restart)
	}
	if a.SyncBehavior != "" {
		SvgAttr(sb, "syncBehavior", a.SyncBehavior)
	}
	if a.SyncMaster != "" {
		SvgAttr(sb, "syncMaster", a.SyncMaster)
	}
	if a.SyncTolerance != "" {
		SvgAttr(sb, "syncTolerance", a.SyncTolerance)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.TransformBehavior != "" {
		SvgAttr(sb, "transformBehavior", a.TransformBehavior)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
