// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeImageAttrs holds the attributes for the feImage SVG element
type FeImageAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Crossorigin                bool
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	Href                       string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	PreserveAspectRatio        string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// FeImageArg interface for feImage element arguments
type FeImageArg interface {
	applyFeImage(*FeImageAttrs, *[]html.Component)
}

// defaultFeImageAttrs creates default attributes for feImage
func defaultFeImageAttrs() *FeImageAttrs {
	return &FeImageAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeImage creates an SVG feImage element
func FeImage(args ...FeImageArg) html.Node {
	a := defaultFeImageAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeImage(a, &kids)
	}
	return html.Node{
		Tag:   "feImage",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feImage
func (g Global) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to FeImage
func (o AlignmentBaselineOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeImage
func (o BaselineShiftOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeImage
func (o ClipOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeImage
func (o ClipPathOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeImage
func (o ClipRuleOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeImage
func (o ColorOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeImage
func (o ColorInterpolationOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeImage
func (o ColorInterpolationFiltersOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeImage
func (o ColorProfileOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeImage
func (o ColorRenderingOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CrossoriginOpt applies to FeImage
func (o CrossoriginOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Crossorigin = true
}

// CursorOpt applies to FeImage
func (o CursorOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeImage
func (o DirectionOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeImage
func (o DisplayOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeImage
func (o DominantBaselineOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to FeImage
func (o EnableBackgroundOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to FeImage
func (o ExternalResourcesRequiredOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to FeImage
func (o FillOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeImage
func (o FillOpacityOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeImage
func (o FillRuleOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeImage
func (o FilterOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeImage
func (o FloodColorOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeImage
func (o FloodOpacityOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeImage
func (o FontFamilyOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeImage
func (o FontSizeOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeImage
func (o FontSizeAdjustOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeImage
func (o FontStretchOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeImage
func (o FontStyleOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeImage
func (o FontVariantOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeImage
func (o FontWeightOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeImage
func (o GlyphOrientationHorizontalOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeImage
func (o GlyphOrientationVerticalOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeImage
func (o HeightOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// HrefOpt applies to FeImage
func (o HrefOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Href = o.v
}

// ImageRenderingOpt applies to FeImage
func (o ImageRenderingOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to FeImage
func (o KerningOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeImage
func (o LetterSpacingOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeImage
func (o LightingColorOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeImage
func (o MarkerEndOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeImage
func (o MarkerMidOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeImage
func (o MarkerStartOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeImage
func (o MaskOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeImage
func (o OpacityOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to FeImage
func (o OverflowOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeImage
func (o PointerEventsOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// PreserveAspectRatioOpt applies to FeImage
func (o PreserveAspectRatioOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.PreserveAspectRatio = o.v
}

// ResultOpt applies to FeImage
func (o ResultOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeImage
func (o ShapeRenderingOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeImage
func (o StopColorOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeImage
func (o StopOpacityOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeImage
func (o StrokeOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeImage
func (o StrokeDasharrayOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeImage
func (o StrokeDashoffsetOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeImage
func (o StrokeLinecapOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeImage
func (o StrokeLinejoinOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeImage
func (o StrokeMiterlimitOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeImage
func (o StrokeOpacityOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeImage
func (o StrokeWidthOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeImage
func (o TextAnchorOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeImage
func (o TextDecorationOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeImage
func (o TextRenderingOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeImage
func (o UnicodeBidiOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeImage
func (o VisibilityOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeImage
func (o WidthOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeImage
func (o WordSpacingOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeImage
func (o WritingModeOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeImage
func (o XOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to FeImage
func (o YOpt) applyFeImage(a *FeImageAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FeImageAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Crossorigin {
		SvgBoolAttr(sb, "crossorigin")
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.Href != "" {
		SvgAttr(sb, "href", a.Href)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.PreserveAspectRatio != "" {
		SvgAttr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.Result != "" {
		SvgAttr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
