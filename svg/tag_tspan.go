// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// TspanAttrs holds the attributes for the tspan SVG element
type TspanAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Dx        string
	Dy        string
	Rotate    string
	X         string
	Y         string
}

// TspanArg interface for tspan element arguments
type TspanArg interface {
	applyTspan(*TspanAttrs, *[]html.Component)
}

// defaultTspanAttrs creates default attributes for tspan
func defaultTspanAttrs() *TspanAttrs {
	return &TspanAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Tspan creates an SVG tspan element
func Tspan(args ...TspanArg) html.Node {
	a := defaultTspanAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyTspan(a, &kids)
	}
	return html.Node{
		Tag:   "tspan",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to tspan
func (g Global) applyTspan(a *TspanAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// DxOpt applies to Tspan
func (o DxOpt) applyTspan(a *TspanAttrs, _ *[]html.Component) {
	a.Dx = o.v
}

// DyOpt applies to Tspan
func (o DyOpt) applyTspan(a *TspanAttrs, _ *[]html.Component) {
	a.Dy = o.v
}

// RotateOpt applies to Tspan
func (o RotateOpt) applyTspan(a *TspanAttrs, _ *[]html.Component) {
	a.Rotate = o.v
}

// XOpt applies to Tspan
func (o XOpt) applyTspan(a *TspanAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Tspan
func (o YOpt) applyTspan(a *TspanAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *TspanAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Dx != "" {
		SvgAttr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		SvgAttr(sb, "dy", a.Dy)
	}
	if a.Rotate != "" {
		SvgAttr(sb, "rotate", a.Rotate)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
