// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FontFaceAttrs holds the attributes for the font-face SVG element
type FontFaceAttrs struct {
	SvgGlobal                 SvgGlobalAttrs
	AccentHeight              string
	Alphabetic                string
	Ascent                    string
	Bbox                      string
	CapHeight                 string
	Descent                   string
	ExternalResourcesRequired string
	FontFamily                string
	FontSize                  string
	FontStretch               string
	FontStyle                 string
	FontVariant               string
	FontWeight                string
	Hanging                   string
	Ideographic               string
	Mathematical              string
	OverlinePosition          string
	OverlineThickness         string
	Panose1                   string
	Slope                     string
	Stemh                     string
	Stemv                     string
	StrikethroughPosition     string
	StrikethroughThickness    string
	UnderlinePosition         string
	UnderlineThickness        string
	UnicodeRange              string
	UnitsPerEm                string
	VAlphabetic               string
	VHanging                  string
	VIdeographic              string
	VMathematical             string
	Widths                    string
	XHeight                   string
}

// FontFaceArg interface for font-face element arguments
type FontFaceArg interface {
	applyFontFace(*FontFaceAttrs, *[]html.Component)
}

// defaultFontFaceAttrs creates default attributes for font-face
func defaultFontFaceAttrs() *FontFaceAttrs {
	return &FontFaceAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FontFace creates an SVG font-face element
func FontFace(args ...FontFaceArg) html.Node {
	a := defaultFontFaceAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFontFace(a, &kids)
	}
	return html.Node{
		Tag:   "font-face",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font-face
func (g Global) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AccentHeightOpt applies to FontFace
func (o AccentHeightOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.AccentHeight = o.v
}

// AlphabeticOpt applies to FontFace
func (o AlphabeticOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Alphabetic = o.v
}

// AscentOpt applies to FontFace
func (o AscentOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Ascent = o.v
}

// BboxOpt applies to FontFace
func (o BboxOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Bbox = o.v
}

// CapHeightOpt applies to FontFace
func (o CapHeightOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.CapHeight = o.v
}

// DescentOpt applies to FontFace
func (o DescentOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Descent = o.v
}

// ExternalResourcesRequiredOpt applies to FontFace
func (o ExternalResourcesRequiredOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FontFamilyOpt applies to FontFace
func (o FontFamilyOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FontFace
func (o FontSizeOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontStretchOpt applies to FontFace
func (o FontStretchOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FontFace
func (o FontStyleOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FontFace
func (o FontVariantOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FontFace
func (o FontWeightOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// HangingOpt applies to FontFace
func (o HangingOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Hanging = o.v
}

// IdeographicOpt applies to FontFace
func (o IdeographicOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Ideographic = o.v
}

// MathematicalOpt applies to FontFace
func (o MathematicalOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Mathematical = o.v
}

// OverlinePositionOpt applies to FontFace
func (o OverlinePositionOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.OverlinePosition = o.v
}

// OverlineThicknessOpt applies to FontFace
func (o OverlineThicknessOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.OverlineThickness = o.v
}

// Panose1Opt applies to FontFace
func (o Panose1Opt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Panose1 = o.v
}

// SlopeOpt applies to FontFace
func (o SlopeOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Slope = o.v
}

// StemhOpt applies to FontFace
func (o StemhOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Stemh = o.v
}

// StemvOpt applies to FontFace
func (o StemvOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Stemv = o.v
}

// StrikethroughPositionOpt applies to FontFace
func (o StrikethroughPositionOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.StrikethroughPosition = o.v
}

// StrikethroughThicknessOpt applies to FontFace
func (o StrikethroughThicknessOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.StrikethroughThickness = o.v
}

// UnderlinePositionOpt applies to FontFace
func (o UnderlinePositionOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.UnderlinePosition = o.v
}

// UnderlineThicknessOpt applies to FontFace
func (o UnderlineThicknessOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.UnderlineThickness = o.v
}

// UnicodeRangeOpt applies to FontFace
func (o UnicodeRangeOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.UnicodeRange = o.v
}

// UnitsPerEmOpt applies to FontFace
func (o UnitsPerEmOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.UnitsPerEm = o.v
}

// VAlphabeticOpt applies to FontFace
func (o VAlphabeticOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.VAlphabetic = o.v
}

// VHangingOpt applies to FontFace
func (o VHangingOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.VHanging = o.v
}

// VIdeographicOpt applies to FontFace
func (o VIdeographicOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.VIdeographic = o.v
}

// VMathematicalOpt applies to FontFace
func (o VMathematicalOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.VMathematical = o.v
}

// WidthsOpt applies to FontFace
func (o WidthsOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.Widths = o.v
}

// XHeightOpt applies to FontFace
func (o XHeightOpt) applyFontFace(a *FontFaceAttrs, _ *[]html.Component) {
	a.XHeight = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FontFaceAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AccentHeight != "" {
		SvgAttr(sb, "accent-height", a.AccentHeight)
	}
	if a.Alphabetic != "" {
		SvgAttr(sb, "alphabetic", a.Alphabetic)
	}
	if a.Ascent != "" {
		SvgAttr(sb, "ascent", a.Ascent)
	}
	if a.Bbox != "" {
		SvgAttr(sb, "bbox", a.Bbox)
	}
	if a.CapHeight != "" {
		SvgAttr(sb, "cap-height", a.CapHeight)
	}
	if a.Descent != "" {
		SvgAttr(sb, "descent", a.Descent)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.Hanging != "" {
		SvgAttr(sb, "hanging", a.Hanging)
	}
	if a.Ideographic != "" {
		SvgAttr(sb, "ideographic", a.Ideographic)
	}
	if a.Mathematical != "" {
		SvgAttr(sb, "mathematical", a.Mathematical)
	}
	if a.OverlinePosition != "" {
		SvgAttr(sb, "overline-position", a.OverlinePosition)
	}
	if a.OverlineThickness != "" {
		SvgAttr(sb, "overline-thickness", a.OverlineThickness)
	}
	if a.Panose1 != "" {
		SvgAttr(sb, "panose-1", a.Panose1)
	}
	if a.Slope != "" {
		SvgAttr(sb, "slope", a.Slope)
	}
	if a.Stemh != "" {
		SvgAttr(sb, "stemh", a.Stemh)
	}
	if a.Stemv != "" {
		SvgAttr(sb, "stemv", a.Stemv)
	}
	if a.StrikethroughPosition != "" {
		SvgAttr(sb, "strikethrough-position", a.StrikethroughPosition)
	}
	if a.StrikethroughThickness != "" {
		SvgAttr(sb, "strikethrough-thickness", a.StrikethroughThickness)
	}
	if a.UnderlinePosition != "" {
		SvgAttr(sb, "underline-position", a.UnderlinePosition)
	}
	if a.UnderlineThickness != "" {
		SvgAttr(sb, "underline-thickness", a.UnderlineThickness)
	}
	if a.UnicodeRange != "" {
		SvgAttr(sb, "unicode-range", a.UnicodeRange)
	}
	if a.UnitsPerEm != "" {
		SvgAttr(sb, "units-per-em", a.UnitsPerEm)
	}
	if a.VAlphabetic != "" {
		SvgAttr(sb, "v-alphabetic", a.VAlphabetic)
	}
	if a.VHanging != "" {
		SvgAttr(sb, "v-hanging", a.VHanging)
	}
	if a.VIdeographic != "" {
		SvgAttr(sb, "v-ideographic", a.VIdeographic)
	}
	if a.VMathematical != "" {
		SvgAttr(sb, "v-mathematical", a.VMathematical)
	}
	if a.Widths != "" {
		SvgAttr(sb, "widths", a.Widths)
	}
	if a.XHeight != "" {
		SvgAttr(sb, "x-height", a.XHeight)
	}
}
