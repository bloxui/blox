// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FontFaceAttrs holds the attributes for the font-face SVG element
type FontFaceAttrs struct {
	html.GlobalAttrs
	AccentHeight              string
	Alphabetic                string
	Ascent                    string
	Bbox                      string
	CapHeight                 string
	Descent                   string
	ExternalResourcesRequired string
	FontFamily                string
	FontSize                  string
	FontStretch               string
	FontStyle                 string
	FontVariant               string
	FontWeight                string
	Hanging                   string
	Ideographic               string
	Mathematical              string
	OverlinePosition          string
	OverlineThickness         string
	Panose1                   string
	Slope                     string
	Stemh                     string
	Stemv                     string
	StrikethroughPosition     string
	StrikethroughThickness    string
	UnderlinePosition         string
	UnderlineThickness        string
	UnicodeRange              string
	UnitsPerEm                string
	VAlphabetic               string
	VHanging                  string
	VIdeographic              string
	VMathematical             string
	Widths                    string
	XHeight                   string
}

// FontFace creates an SVG font-face element
func FontFace(attrs FontFaceAttrs, children ...html.Component) html.Node {
	return html.Node{
		Tag:   "font-face",
		Attrs: &attrs,
		Kids:  children,
	}
}

// writeAttrs writes the HTML attributes to the string builder
func (a *FontFaceAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.AccentHeight != "" {
		html.Attr(sb, "accent-height", a.AccentHeight)
	}
	if a.Alphabetic != "" {
		html.Attr(sb, "alphabetic", a.Alphabetic)
	}
	if a.Ascent != "" {
		html.Attr(sb, "ascent", a.Ascent)
	}
	if a.Bbox != "" {
		html.Attr(sb, "bbox", a.Bbox)
	}
	if a.CapHeight != "" {
		html.Attr(sb, "cap-height", a.CapHeight)
	}
	if a.Descent != "" {
		html.Attr(sb, "descent", a.Descent)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.FontFamily != "" {
		html.Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		html.Attr(sb, "font-size", a.FontSize)
	}
	if a.FontStretch != "" {
		html.Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		html.Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		html.Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		html.Attr(sb, "font-weight", a.FontWeight)
	}
	if a.Hanging != "" {
		html.Attr(sb, "hanging", a.Hanging)
	}
	if a.Ideographic != "" {
		html.Attr(sb, "ideographic", a.Ideographic)
	}
	if a.Mathematical != "" {
		html.Attr(sb, "mathematical", a.Mathematical)
	}
	if a.OverlinePosition != "" {
		html.Attr(sb, "overline-position", a.OverlinePosition)
	}
	if a.OverlineThickness != "" {
		html.Attr(sb, "overline-thickness", a.OverlineThickness)
	}
	if a.Panose1 != "" {
		html.Attr(sb, "panose-1", a.Panose1)
	}
	if a.Slope != "" {
		html.Attr(sb, "slope", a.Slope)
	}
	if a.Stemh != "" {
		html.Attr(sb, "stemh", a.Stemh)
	}
	if a.Stemv != "" {
		html.Attr(sb, "stemv", a.Stemv)
	}
	if a.StrikethroughPosition != "" {
		html.Attr(sb, "strikethrough-position", a.StrikethroughPosition)
	}
	if a.StrikethroughThickness != "" {
		html.Attr(sb, "strikethrough-thickness", a.StrikethroughThickness)
	}
	if a.UnderlinePosition != "" {
		html.Attr(sb, "underline-position", a.UnderlinePosition)
	}
	if a.UnderlineThickness != "" {
		html.Attr(sb, "underline-thickness", a.UnderlineThickness)
	}
	if a.UnicodeRange != "" {
		html.Attr(sb, "unicode-range", a.UnicodeRange)
	}
	if a.UnitsPerEm != "" {
		html.Attr(sb, "units-per-em", a.UnitsPerEm)
	}
	if a.VAlphabetic != "" {
		html.Attr(sb, "v-alphabetic", a.VAlphabetic)
	}
	if a.VHanging != "" {
		html.Attr(sb, "v-hanging", a.VHanging)
	}
	if a.VIdeographic != "" {
		html.Attr(sb, "v-ideographic", a.VIdeographic)
	}
	if a.VMathematical != "" {
		html.Attr(sb, "v-mathematical", a.VMathematical)
	}
	if a.Widths != "" {
		html.Attr(sb, "widths", a.Widths)
	}
	if a.XHeight != "" {
		html.Attr(sb, "x-height", a.XHeight)
	}
}
