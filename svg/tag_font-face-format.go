// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FontFaceFormatAttrs holds the attributes for the font-face-format SVG element
type FontFaceFormatAttrs struct {
	SvgGlobal SvgGlobalAttrs
	String    string
}

// FontFaceFormatArg interface for font-face-format element arguments
type FontFaceFormatArg interface {
	applyFontFaceFormat(*FontFaceFormatAttrs, *[]html.Component)
}

// defaultFontFaceFormatAttrs creates default attributes for font-face-format
func defaultFontFaceFormatAttrs() *FontFaceFormatAttrs {
	return &FontFaceFormatAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FontFaceFormat creates an SVG font-face-format element
func FontFaceFormat(args ...FontFaceFormatArg) html.Node {
	a := defaultFontFaceFormatAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFontFaceFormat(a, &kids)
	}
	return html.Node{
		Tag:   "font-face-format",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font-face-format
func (g Global) applyFontFaceFormat(a *FontFaceFormatAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// StringOpt applies to FontFaceFormat
func (o StringOpt) applyFontFaceFormat(a *FontFaceFormatAttrs, _ *[]html.Component) {
	a.String = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FontFaceFormatAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.String != "" {
		SvgAttr(sb, "string", a.String)
	}
}
