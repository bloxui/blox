// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// SetAttrs holds the attributes for the set SVG element
type SetAttrs struct {
	html.GlobalAttrs
	AttributeName             string
	AttributeType             string
	Begin                     string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	Href                      string
	Max                       string
	Min                       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SystemLanguage            string
	To                        string
}

// Set creates an SVG set element
func Set(attrs SetAttrs, children ...html.Component) html.Node {
	return html.Node{
		Tag:   "set",
		Attrs: &attrs,
		Kids:  children,
	}
}

// writeAttrs writes the HTML attributes to the string builder
func (a *SetAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.AttributeName != "" {
		html.Attr(sb, "attributeName", a.AttributeName)
	}
	if a.AttributeType != "" {
		html.Attr(sb, "attributeType", a.AttributeType)
	}
	if a.Begin != "" {
		html.Attr(sb, "begin", a.Begin)
	}
	if a.Dur != "" {
		html.Attr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		html.Attr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		html.Attr(sb, "fill", a.Fill)
	}
	if a.Href != "" {
		html.Attr(sb, "href", a.Href)
	}
	if a.Max != "" {
		html.Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		html.Attr(sb, "min", a.Min)
	}
	if a.RepeatCount != "" {
		html.Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		html.Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		html.Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		html.Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		html.Attr(sb, "restart", a.Restart)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.To != "" {
		html.Attr(sb, "to", a.To)
	}
}
