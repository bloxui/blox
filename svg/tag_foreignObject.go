// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// ForeignObjectAttrs holds the attributes for the foreignObject SVG element
type ForeignObjectAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  bool
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// ForeignObjectArg interface for foreignObject element arguments
type ForeignObjectArg interface {
	applyForeignObject(*ForeignObjectAttrs, *[]html.Component)
}

// defaultForeignObjectAttrs creates default attributes for foreignObject
func defaultForeignObjectAttrs() *ForeignObjectAttrs {
	return &ForeignObjectAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// ForeignObject creates an SVG foreignObject element
func ForeignObject(args ...ForeignObjectArg) html.Node {
	a := defaultForeignObjectAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyForeignObject(a, &kids)
	}
	return html.Node{
		Tag:   "foreignObject",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to foreignObject
func (g Global) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to ForeignObject
func (o AlignmentBaselineOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to ForeignObject
func (o BaselineShiftOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to ForeignObject
func (o ClipOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to ForeignObject
func (o ClipPathOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to ForeignObject
func (o ClipRuleOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to ForeignObject
func (o ColorOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to ForeignObject
func (o ColorInterpolationOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to ForeignObject
func (o ColorInterpolationFiltersOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to ForeignObject
func (o ColorProfileOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to ForeignObject
func (o ColorRenderingOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to ForeignObject
func (o CursorOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to ForeignObject
func (o DirectionOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to ForeignObject
func (o DisplayOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to ForeignObject
func (o DominantBaselineOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to ForeignObject
func (o EnableBackgroundOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to ForeignObject
func (o ExternalResourcesRequiredOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to ForeignObject
func (o FillOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to ForeignObject
func (o FillOpacityOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to ForeignObject
func (o FillRuleOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to ForeignObject
func (o FilterOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to ForeignObject
func (o FloodColorOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to ForeignObject
func (o FloodOpacityOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to ForeignObject
func (o FocusHighlightOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to ForeignObject
func (o FocusableOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// FontFamilyOpt applies to ForeignObject
func (o FontFamilyOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to ForeignObject
func (o FontSizeOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to ForeignObject
func (o FontSizeAdjustOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to ForeignObject
func (o FontStretchOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to ForeignObject
func (o FontStyleOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to ForeignObject
func (o FontVariantOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to ForeignObject
func (o FontWeightOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to ForeignObject
func (o GlyphOrientationHorizontalOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to ForeignObject
func (o GlyphOrientationVerticalOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to ForeignObject
func (o HeightOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to ForeignObject
func (o ImageRenderingOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to ForeignObject
func (o KerningOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to ForeignObject
func (o LetterSpacingOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to ForeignObject
func (o LightingColorOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to ForeignObject
func (o MarkerEndOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to ForeignObject
func (o MarkerMidOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to ForeignObject
func (o MarkerStartOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to ForeignObject
func (o MaskOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// NavDownOpt applies to ForeignObject
func (o NavDownOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to ForeignObject
func (o NavDownLeftOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to ForeignObject
func (o NavDownRightOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to ForeignObject
func (o NavLeftOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to ForeignObject
func (o NavNextOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to ForeignObject
func (o NavPrevOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to ForeignObject
func (o NavRightOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to ForeignObject
func (o NavUpOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to ForeignObject
func (o NavUpLeftOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to ForeignObject
func (o NavUpRightOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to ForeignObject
func (o OpacityOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to ForeignObject
func (o OverflowOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to ForeignObject
func (o PointerEventsOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to ForeignObject
func (o RequiredExtensionsOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to ForeignObject
func (o RequiredFeaturesOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to ForeignObject
func (o RequiredFontsOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to ForeignObject
func (o RequiredFormatsOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to ForeignObject
func (o ShapeRenderingOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to ForeignObject
func (o StopColorOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to ForeignObject
func (o StopOpacityOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to ForeignObject
func (o StrokeOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to ForeignObject
func (o StrokeDasharrayOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to ForeignObject
func (o StrokeDashoffsetOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to ForeignObject
func (o StrokeLinecapOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to ForeignObject
func (o StrokeLinejoinOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to ForeignObject
func (o StrokeMiterlimitOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to ForeignObject
func (o StrokeOpacityOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to ForeignObject
func (o StrokeWidthOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to ForeignObject
func (o SystemLanguageOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to ForeignObject
func (o TextAnchorOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to ForeignObject
func (o TextDecorationOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to ForeignObject
func (o TextRenderingOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to ForeignObject
func (o TransformOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to ForeignObject
func (o UnicodeBidiOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to ForeignObject
func (o VisibilityOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to ForeignObject
func (o WidthOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to ForeignObject
func (o WordSpacingOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to ForeignObject
func (o WritingModeOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to ForeignObject
func (o XOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to ForeignObject
func (o YOpt) applyForeignObject(a *ForeignObjectAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *ForeignObjectAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
