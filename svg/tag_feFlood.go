// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeFloodAttrs holds the attributes for the feFlood SVG element
type FeFloodAttrs struct {
	SvgGlobal    SvgGlobalAttrs
	FloodColor   string
	FloodOpacity string
}

// FeFloodArg interface for feFlood element arguments
type FeFloodArg interface {
	applyFeFlood(*FeFloodAttrs, *[]html.Component)
}

// defaultFeFloodAttrs creates default attributes for feFlood
func defaultFeFloodAttrs() *FeFloodAttrs {
	return &FeFloodAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeFlood creates an SVG feFlood element
func FeFlood(args ...FeFloodArg) html.Node {
	a := defaultFeFloodAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeFlood(a, &kids)
	}
	return html.Node{
		Tag:   "feFlood",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feFlood
func (g Global) applyFeFlood(a *FeFloodAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// FloodColorOpt applies to FeFlood
func (o FloodColorOpt) applyFeFlood(a *FeFloodAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeFlood
func (o FloodOpacityOpt) applyFeFlood(a *FeFloodAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeFloodAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
}
