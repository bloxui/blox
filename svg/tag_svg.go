// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

type SvgAttrs struct {
	html.GlobalAttrs
	AlignmentBaseline          string
	BaseProfile                string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	ContentScriptType          string
	ContentStyleType           string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  bool
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PlaybackOrder              string
	Playbackorder              string
	PointerEvents              string
	PreserveAspectRatio        string
	RequiredExtensions         string
	RequiredFeatures           string
	ShapeRendering             string
	SnapshotTime               string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SyncBehaviorDefault        string
	SyncToleranceDefault       string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	TimelineBegin              string
	Timelinebegin              string
	Transform                  string
	UnicodeBidi                string
	Version                    string
	ViewBox                    string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
	ZoomAndPan                 string
}

func Svg(attrs SvgAttrs, children ...html.Component) html.Node {
	return html.Node{Tag: "svg", Attrs: &attrs, Kids: children}
}

func (a *SvgAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		html.Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaseProfile != "" {
		html.Attr(sb, "baseProfile", a.BaseProfile)
	}
	if a.BaselineShift != "" {
		html.Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		html.Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		html.Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		html.Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		html.Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		html.Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		html.Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		html.Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		html.Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.ContentScriptType != "" {
		html.Attr(sb, "contentScriptType", a.ContentScriptType)
	}
	if a.ContentStyleType != "" {
		html.Attr(sb, "contentStyleType", a.ContentStyleType)
	}
	if a.Cursor != "" {
		html.Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		html.Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		html.Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		html.Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		html.Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		html.Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		html.Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		html.Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		html.Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		html.Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		html.Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		html.Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		html.BoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		html.Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		html.Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		html.Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		html.Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		html.Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		html.Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		html.Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		html.Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		html.Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		html.Attr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		html.Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		html.Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		html.Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		html.Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		html.Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		html.Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		html.Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		html.Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		html.Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		html.Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		html.Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		html.Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		html.Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		html.Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		html.Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		html.Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		html.Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		html.Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		html.Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		html.Attr(sb, "overflow", a.Overflow)
	}
	if a.PlaybackOrder != "" {
		html.Attr(sb, "playbackOrder", a.PlaybackOrder)
	}
	if a.Playbackorder != "" {
		html.Attr(sb, "playbackorder", a.Playbackorder)
	}
	if a.PointerEvents != "" {
		html.Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.PreserveAspectRatio != "" {
		html.Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.ShapeRendering != "" {
		html.Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.SnapshotTime != "" {
		html.Attr(sb, "snapshotTime", a.SnapshotTime)
	}
	if a.StopColor != "" {
		html.Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		html.Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		html.Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		html.Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		html.Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		html.Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		html.Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		html.Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		html.Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		html.Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SyncBehaviorDefault != "" {
		html.Attr(sb, "syncBehaviorDefault", a.SyncBehaviorDefault)
	}
	if a.SyncToleranceDefault != "" {
		html.Attr(sb, "syncToleranceDefault", a.SyncToleranceDefault)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		html.Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		html.Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		html.Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.TimelineBegin != "" {
		html.Attr(sb, "timelineBegin", a.TimelineBegin)
	}
	if a.Timelinebegin != "" {
		html.Attr(sb, "timelinebegin", a.Timelinebegin)
	}
	if a.Transform != "" {
		html.Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		html.Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Version != "" {
		html.Attr(sb, "version", a.Version)
	}
	if a.ViewBox != "" {
		html.Attr(sb, "viewBox", a.ViewBox)
	}
	if a.Visibility != "" {
		html.Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		html.Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		html.Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		html.Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		html.Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		html.Attr(sb, "y", a.Y)
	}
	if a.ZoomAndPan != "" {
		html.Attr(sb, "zoomAndPan", a.ZoomAndPan)
	}
}
