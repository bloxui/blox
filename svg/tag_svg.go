// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// SvgAttrs holds the attributes for the svg SVG element
type SvgAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaseProfile                string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	ContentScriptType          string
	ContentStyleType           string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  bool
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PlaybackOrder              string
	PointerEvents              string
	PreserveAspectRatio        string
	RequiredExtensions         string
	RequiredFeatures           string
	ShapeRendering             string
	SnapshotTime               string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SyncBehaviorDefault        string
	SyncToleranceDefault       string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	TimelineBegin              string
	Transform                  string
	UnicodeBidi                string
	Version                    string
	ViewBox                    string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
	ZoomAndPan                 string
}

// SvgArg interface for svg element arguments
type SvgArg interface {
	applySvg(*SvgAttrs, *[]html.Component)
}

// defaultSvgAttrs creates default attributes for svg
func defaultSvgAttrs() *SvgAttrs {
	return &SvgAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Svg creates an SVG svg element
func Svg(args ...SvgArg) html.Node {
	a := defaultSvgAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applySvg(a, &kids)
	}
	return html.Node{
		Tag:   "svg",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to svg
func (g Global) applySvg(a *SvgAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to Svg
func (o AlignmentBaselineOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaseProfileOpt applies to Svg
func (o BaseProfileOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.BaseProfile = o.v
}

// BaselineShiftOpt applies to Svg
func (o BaselineShiftOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Svg
func (o ClipOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Svg
func (o ClipPathOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Svg
func (o ClipRuleOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Svg
func (o ColorOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Svg
func (o ColorInterpolationOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Svg
func (o ColorInterpolationFiltersOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Svg
func (o ColorProfileOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Svg
func (o ColorRenderingOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// ContentScriptTypeOpt applies to Svg
func (o ContentScriptTypeOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ContentScriptType = o.v
}

// ContentStyleTypeOpt applies to Svg
func (o ContentStyleTypeOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ContentStyleType = o.v
}

// CursorOpt applies to Svg
func (o CursorOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Svg
func (o DirectionOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Svg
func (o DisplayOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Svg
func (o DominantBaselineOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Svg
func (o EnableBackgroundOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Svg
func (o ExternalResourcesRequiredOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Svg
func (o FillOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Svg
func (o FillOpacityOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Svg
func (o FillRuleOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Svg
func (o FilterOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Svg
func (o FloodColorOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Svg
func (o FloodOpacityOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Svg
func (o FocusHighlightOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Svg
func (o FocusableOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// FontFamilyOpt applies to Svg
func (o FontFamilyOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Svg
func (o FontSizeOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Svg
func (o FontSizeAdjustOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Svg
func (o FontStretchOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Svg
func (o FontStyleOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Svg
func (o FontVariantOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Svg
func (o FontWeightOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Svg
func (o GlyphOrientationHorizontalOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Svg
func (o GlyphOrientationVerticalOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to Svg
func (o HeightOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to Svg
func (o ImageRenderingOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Svg
func (o KerningOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Svg
func (o LetterSpacingOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Svg
func (o LightingColorOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Svg
func (o MarkerEndOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Svg
func (o MarkerMidOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Svg
func (o MarkerStartOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Svg
func (o MaskOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Svg
func (o NavDownOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Svg
func (o NavDownLeftOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Svg
func (o NavDownRightOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Svg
func (o NavLeftOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Svg
func (o NavNextOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Svg
func (o NavPrevOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Svg
func (o NavRightOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Svg
func (o NavUpOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Svg
func (o NavUpLeftOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Svg
func (o NavUpRightOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Svg
func (o OpacityOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Svg
func (o OverflowOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PlaybackOrderOpt applies to Svg
func (o PlaybackOrderOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.PlaybackOrder = o.v
}

// PointerEventsOpt applies to Svg
func (o PointerEventsOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// PreserveAspectRatioOpt applies to Svg
func (o PreserveAspectRatioOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.PreserveAspectRatio = o.v
}

// RequiredExtensionsOpt applies to Svg
func (o RequiredExtensionsOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Svg
func (o RequiredFeaturesOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// ShapeRenderingOpt applies to Svg
func (o ShapeRenderingOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// SnapshotTimeOpt applies to Svg
func (o SnapshotTimeOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.SnapshotTime = o.v
}

// StopColorOpt applies to Svg
func (o StopColorOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Svg
func (o StopOpacityOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Svg
func (o StrokeOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Svg
func (o StrokeDasharrayOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Svg
func (o StrokeDashoffsetOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Svg
func (o StrokeLinecapOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Svg
func (o StrokeLinejoinOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Svg
func (o StrokeMiterlimitOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Svg
func (o StrokeOpacityOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Svg
func (o StrokeWidthOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SyncBehaviorDefaultOpt applies to Svg
func (o SyncBehaviorDefaultOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.SyncBehaviorDefault = o.v
}

// SyncToleranceDefaultOpt applies to Svg
func (o SyncToleranceDefaultOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.SyncToleranceDefault = o.v
}

// SystemLanguageOpt applies to Svg
func (o SystemLanguageOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Svg
func (o TextAnchorOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Svg
func (o TextDecorationOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Svg
func (o TextRenderingOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// TimelineBeginOpt applies to Svg
func (o TimelineBeginOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.TimelineBegin = o.v
}

// TransformOpt applies to Svg
func (o TransformOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Svg
func (o UnicodeBidiOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VersionOpt applies to Svg
func (o VersionOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Version = o.v
}

// ViewBoxOpt applies to Svg
func (o ViewBoxOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ViewBox = o.v
}

// VisibilityOpt applies to Svg
func (o VisibilityOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to Svg
func (o WidthOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to Svg
func (o WordSpacingOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Svg
func (o WritingModeOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to Svg
func (o XOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Svg
func (o YOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// ZoomAndPanOpt applies to Svg
func (o ZoomAndPanOpt) applySvg(a *SvgAttrs, _ *[]html.Component) {
	a.ZoomAndPan = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *SvgAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaseProfile != "" {
		SvgAttr(sb, "baseProfile", a.BaseProfile)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.ContentScriptType != "" {
		SvgAttr(sb, "contentScriptType", a.ContentScriptType)
	}
	if a.ContentStyleType != "" {
		SvgAttr(sb, "contentStyleType", a.ContentStyleType)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PlaybackOrder != "" {
		SvgAttr(sb, "playbackOrder", a.PlaybackOrder)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.PreserveAspectRatio != "" {
		SvgAttr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.SnapshotTime != "" {
		SvgAttr(sb, "snapshotTime", a.SnapshotTime)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SyncBehaviorDefault != "" {
		SvgAttr(sb, "syncBehaviorDefault", a.SyncBehaviorDefault)
	}
	if a.SyncToleranceDefault != "" {
		SvgAttr(sb, "syncToleranceDefault", a.SyncToleranceDefault)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.TimelineBegin != "" {
		SvgAttr(sb, "timelineBegin", a.TimelineBegin)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Version != "" {
		SvgAttr(sb, "version", a.Version)
	}
	if a.ViewBox != "" {
		SvgAttr(sb, "viewBox", a.ViewBox)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
	if a.ZoomAndPan != "" {
		SvgAttr(sb, "zoomAndPan", a.ZoomAndPan)
	}
}
