// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// AnimateColorAttrs holds the attributes for the animateColor SVG element
type AnimateColorAttrs struct {
	html.GlobalAttrs
	Accumulate                 string
	Additive                   string
	AlignmentBaseline          string
	AttributeName              string
	AttributeType              string
	BaselineShift              string
	Begin                      string
	By                         string
	CalcMode                   string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	Dur                        string
	EnableBackground           string
	End                        string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	From                       string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	KeySplines                 string
	KeyTimes                   string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Max                        string
	Min                        string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RepeatCount                string
	RepeatDur                  string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	Restart                    string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	To                         string
	UnicodeBidi                string
	Values                     string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// AnimateColor creates an SVG animateColor element
func AnimateColor(attrs AnimateColorAttrs, children ...html.Component) html.Node {
	return html.Node{
		Tag:   "animateColor",
		Attrs: &attrs,
		Kids:  children,
	}
}

// writeAttrs writes the HTML attributes to the string builder
func (a *AnimateColorAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.Accumulate != "" {
		html.Attr(sb, "accumulate", a.Accumulate)
	}
	if a.Additive != "" {
		html.Attr(sb, "additive", a.Additive)
	}
	if a.AlignmentBaseline != "" {
		html.Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.AttributeName != "" {
		html.Attr(sb, "attributeName", a.AttributeName)
	}
	if a.AttributeType != "" {
		html.Attr(sb, "attributeType", a.AttributeType)
	}
	if a.BaselineShift != "" {
		html.Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Begin != "" {
		html.Attr(sb, "begin", a.Begin)
	}
	if a.By != "" {
		html.Attr(sb, "by", a.By)
	}
	if a.CalcMode != "" {
		html.Attr(sb, "calcMode", a.CalcMode)
	}
	if a.Clip != "" {
		html.Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		html.Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		html.Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		html.Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		html.Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		html.Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		html.Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		html.Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		html.Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		html.Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		html.Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		html.Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.Dur != "" {
		html.Attr(sb, "dur", a.Dur)
	}
	if a.EnableBackground != "" {
		html.Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.End != "" {
		html.Attr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		html.Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		html.Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		html.Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		html.Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		html.Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		html.Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		html.Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		html.Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		html.Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		html.Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		html.Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		html.Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		html.Attr(sb, "font-weight", a.FontWeight)
	}
	if a.From != "" {
		html.Attr(sb, "from", a.From)
	}
	if a.GlyphOrientationHorizontal != "" {
		html.Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		html.Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		html.Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		html.Attr(sb, "kerning", a.Kerning)
	}
	if a.KeySplines != "" {
		html.Attr(sb, "keySplines", a.KeySplines)
	}
	if a.KeyTimes != "" {
		html.Attr(sb, "keyTimes", a.KeyTimes)
	}
	if a.LetterSpacing != "" {
		html.Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		html.Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		html.Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		html.Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		html.Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		html.Attr(sb, "mask", a.Mask)
	}
	if a.Max != "" {
		html.Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		html.Attr(sb, "min", a.Min)
	}
	if a.Opacity != "" {
		html.Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		html.Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		html.Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RepeatCount != "" {
		html.Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		html.Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		html.Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		html.Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		html.Attr(sb, "restart", a.Restart)
	}
	if a.ShapeRendering != "" {
		html.Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		html.Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		html.Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		html.Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		html.Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		html.Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		html.Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		html.Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		html.Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		html.Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		html.Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		html.Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		html.Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		html.Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.To != "" {
		html.Attr(sb, "to", a.To)
	}
	if a.UnicodeBidi != "" {
		html.Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Values != "" {
		html.Attr(sb, "values", a.Values)
	}
	if a.Visibility != "" {
		html.Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		html.Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		html.Attr(sb, "writing-mode", a.WritingMode)
	}
}
