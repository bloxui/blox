// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// AnimateColorAttrs holds the attributes for the animateColor SVG element
type AnimateColorAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	Accumulate                 string
	Additive                   string
	AlignmentBaseline          string
	AttributeName              string
	AttributeType              string
	BaselineShift              string
	Begin                      string
	By                         string
	CalcMode                   string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	Dur                        string
	EnableBackground           string
	End                        string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	From                       string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	KeySplines                 string
	KeyTimes                   string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Max                        string
	Min                        string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RepeatCount                string
	RepeatDur                  string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	Restart                    string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	To                         string
	UnicodeBidi                string
	Values                     string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// AnimateColorArg interface for animateColor element arguments
type AnimateColorArg interface {
	applyAnimateColor(*AnimateColorAttrs, *[]html.Component)
}

// defaultAnimateColorAttrs creates default attributes for animateColor
func defaultAnimateColorAttrs() *AnimateColorAttrs {
	return &AnimateColorAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// AnimateColor creates an SVG animateColor element
func AnimateColor(args ...AnimateColorArg) html.Node {
	a := defaultAnimateColorAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyAnimateColor(a, &kids)
	}
	return html.Node{
		Tag:   "animateColor",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to animateColor
func (g Global) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AccumulateOpt applies to AnimateColor
func (o AccumulateOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Accumulate = o.v
}

// AdditiveOpt applies to AnimateColor
func (o AdditiveOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Additive = o.v
}

// AlignmentBaselineOpt applies to AnimateColor
func (o AlignmentBaselineOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// AttributeNameOpt applies to AnimateColor
func (o AttributeNameOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.AttributeName = o.v
}

// AttributeTypeOpt applies to AnimateColor
func (o AttributeTypeOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.AttributeType = o.v
}

// BaselineShiftOpt applies to AnimateColor
func (o BaselineShiftOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// BeginOpt applies to AnimateColor
func (o BeginOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Begin = o.v
}

// ByOpt applies to AnimateColor
func (o ByOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.By = o.v
}

// CalcModeOpt applies to AnimateColor
func (o CalcModeOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.CalcMode = o.v
}

// ClipOpt applies to AnimateColor
func (o ClipOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to AnimateColor
func (o ClipPathOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to AnimateColor
func (o ClipRuleOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to AnimateColor
func (o ColorOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to AnimateColor
func (o ColorInterpolationOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to AnimateColor
func (o ColorInterpolationFiltersOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to AnimateColor
func (o ColorProfileOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to AnimateColor
func (o ColorRenderingOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to AnimateColor
func (o CursorOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to AnimateColor
func (o DirectionOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to AnimateColor
func (o DisplayOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to AnimateColor
func (o DominantBaselineOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// DurOpt applies to AnimateColor
func (o DurOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Dur = o.v
}

// EnableBackgroundOpt applies to AnimateColor
func (o EnableBackgroundOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// EndOpt applies to AnimateColor
func (o EndOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.End = o.v
}

// ExternalResourcesRequiredOpt applies to AnimateColor
func (o ExternalResourcesRequiredOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to AnimateColor
func (o FillOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to AnimateColor
func (o FillOpacityOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to AnimateColor
func (o FillRuleOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to AnimateColor
func (o FilterOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to AnimateColor
func (o FloodColorOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to AnimateColor
func (o FloodOpacityOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to AnimateColor
func (o FontFamilyOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to AnimateColor
func (o FontSizeOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to AnimateColor
func (o FontSizeAdjustOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to AnimateColor
func (o FontStretchOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to AnimateColor
func (o FontStyleOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to AnimateColor
func (o FontVariantOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to AnimateColor
func (o FontWeightOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// FromOpt applies to AnimateColor
func (o FromOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.From = o.v
}

// GlyphOrientationHorizontalOpt applies to AnimateColor
func (o GlyphOrientationHorizontalOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to AnimateColor
func (o GlyphOrientationVerticalOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to AnimateColor
func (o ImageRenderingOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to AnimateColor
func (o KerningOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// KeySplinesOpt applies to AnimateColor
func (o KeySplinesOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.KeySplines = o.v
}

// KeyTimesOpt applies to AnimateColor
func (o KeyTimesOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.KeyTimes = o.v
}

// LetterSpacingOpt applies to AnimateColor
func (o LetterSpacingOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to AnimateColor
func (o LightingColorOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to AnimateColor
func (o MarkerEndOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to AnimateColor
func (o MarkerMidOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to AnimateColor
func (o MarkerStartOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to AnimateColor
func (o MaskOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// MaxOpt applies to AnimateColor
func (o MaxOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Max = o.v
}

// MinOpt applies to AnimateColor
func (o MinOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Min = o.v
}

// OpacityOpt applies to AnimateColor
func (o OpacityOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to AnimateColor
func (o OverflowOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to AnimateColor
func (o PointerEventsOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// RepeatCountOpt applies to AnimateColor
func (o RepeatCountOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.RepeatCount = o.v
}

// RepeatDurOpt applies to AnimateColor
func (o RepeatDurOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.RepeatDur = o.v
}

// RequiredExtensionsOpt applies to AnimateColor
func (o RequiredExtensionsOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to AnimateColor
func (o RequiredFeaturesOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to AnimateColor
func (o RequiredFontsOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to AnimateColor
func (o RequiredFormatsOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// RestartOpt applies to AnimateColor
func (o RestartOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Restart = o.v
}

// ShapeRenderingOpt applies to AnimateColor
func (o ShapeRenderingOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to AnimateColor
func (o StopColorOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to AnimateColor
func (o StopOpacityOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to AnimateColor
func (o StrokeOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to AnimateColor
func (o StrokeDasharrayOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to AnimateColor
func (o StrokeDashoffsetOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to AnimateColor
func (o StrokeLinecapOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to AnimateColor
func (o StrokeLinejoinOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to AnimateColor
func (o StrokeMiterlimitOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to AnimateColor
func (o StrokeOpacityOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to AnimateColor
func (o StrokeWidthOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to AnimateColor
func (o SystemLanguageOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to AnimateColor
func (o TextAnchorOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to AnimateColor
func (o TextDecorationOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to AnimateColor
func (o TextRenderingOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// ToOpt applies to AnimateColor
func (o ToOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.To = o.v
}

// UnicodeBidiOpt applies to AnimateColor
func (o UnicodeBidiOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// ValuesOpt applies to AnimateColor
func (o ValuesOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Values = o.v
}

// VisibilityOpt applies to AnimateColor
func (o VisibilityOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to AnimateColor
func (o WordSpacingOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to AnimateColor
func (o WritingModeOpt) applyAnimateColor(a *AnimateColorAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *AnimateColorAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Accumulate != "" {
		SvgAttr(sb, "accumulate", a.Accumulate)
	}
	if a.Additive != "" {
		SvgAttr(sb, "additive", a.Additive)
	}
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.AttributeName != "" {
		SvgAttr(sb, "attributeName", a.AttributeName)
	}
	if a.AttributeType != "" {
		SvgAttr(sb, "attributeType", a.AttributeType)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Begin != "" {
		SvgAttr(sb, "begin", a.Begin)
	}
	if a.By != "" {
		SvgAttr(sb, "by", a.By)
	}
	if a.CalcMode != "" {
		SvgAttr(sb, "calcMode", a.CalcMode)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.Dur != "" {
		SvgAttr(sb, "dur", a.Dur)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.End != "" {
		SvgAttr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.From != "" {
		SvgAttr(sb, "from", a.From)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.KeySplines != "" {
		SvgAttr(sb, "keySplines", a.KeySplines)
	}
	if a.KeyTimes != "" {
		SvgAttr(sb, "keyTimes", a.KeyTimes)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.Max != "" {
		SvgAttr(sb, "max", a.Max)
	}
	if a.Min != "" {
		SvgAttr(sb, "min", a.Min)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RepeatCount != "" {
		SvgAttr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		SvgAttr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		SvgAttr(sb, "restart", a.Restart)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.To != "" {
		SvgAttr(sb, "to", a.To)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Values != "" {
		SvgAttr(sb, "values", a.Values)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
}
