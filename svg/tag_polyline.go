// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// PolylineAttrs holds the attributes for the polyline SVG element
type PolylineAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  bool
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PathLength                 string
	PointerEvents              string
	Points                     string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// PolylineArg interface for polyline element arguments
type PolylineArg interface {
	applyPolyline(*PolylineAttrs, *[]html.Component)
}

// defaultPolylineAttrs creates default attributes for polyline
func defaultPolylineAttrs() *PolylineAttrs {
	return &PolylineAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Polyline creates an SVG polyline element (self-closing)
func Polyline(args ...PolylineArg) html.Node {
	a := defaultPolylineAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyPolyline(a, &kids)
	}
	return html.Node{
		Tag:   "polyline",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to polyline
func (g Global) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to Polyline
func (o AlignmentBaselineOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Polyline
func (o BaselineShiftOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Polyline
func (o ClipOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Polyline
func (o ClipPathOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Polyline
func (o ClipRuleOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Polyline
func (o ColorOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Polyline
func (o ColorInterpolationOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Polyline
func (o ColorInterpolationFiltersOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Polyline
func (o ColorProfileOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Polyline
func (o ColorRenderingOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Polyline
func (o CursorOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Polyline
func (o DirectionOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Polyline
func (o DisplayOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Polyline
func (o DominantBaselineOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Polyline
func (o EnableBackgroundOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Polyline
func (o ExternalResourcesRequiredOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Polyline
func (o FillOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Polyline
func (o FillOpacityOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Polyline
func (o FillRuleOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Polyline
func (o FilterOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Polyline
func (o FloodColorOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Polyline
func (o FloodOpacityOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Polyline
func (o FocusHighlightOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Polyline
func (o FocusableOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// FontFamilyOpt applies to Polyline
func (o FontFamilyOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Polyline
func (o FontSizeOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Polyline
func (o FontSizeAdjustOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Polyline
func (o FontStretchOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Polyline
func (o FontStyleOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Polyline
func (o FontVariantOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Polyline
func (o FontWeightOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Polyline
func (o GlyphOrientationHorizontalOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Polyline
func (o GlyphOrientationVerticalOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Polyline
func (o ImageRenderingOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Polyline
func (o KerningOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Polyline
func (o LetterSpacingOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Polyline
func (o LightingColorOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Polyline
func (o MarkerEndOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Polyline
func (o MarkerMidOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Polyline
func (o MarkerStartOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Polyline
func (o MaskOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Polyline
func (o NavDownOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Polyline
func (o NavDownLeftOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Polyline
func (o NavDownRightOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Polyline
func (o NavLeftOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Polyline
func (o NavNextOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Polyline
func (o NavPrevOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Polyline
func (o NavRightOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Polyline
func (o NavUpOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Polyline
func (o NavUpLeftOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Polyline
func (o NavUpRightOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Polyline
func (o OpacityOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Polyline
func (o OverflowOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PathLengthOpt applies to Polyline
func (o PathLengthOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.PathLength = o.v
}

// PointerEventsOpt applies to Polyline
func (o PointerEventsOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// PointsOpt applies to Polyline
func (o PointsOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Points = o.v
}

// RequiredExtensionsOpt applies to Polyline
func (o RequiredExtensionsOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Polyline
func (o RequiredFeaturesOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Polyline
func (o RequiredFontsOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Polyline
func (o RequiredFormatsOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to Polyline
func (o ShapeRenderingOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Polyline
func (o StopColorOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Polyline
func (o StopOpacityOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Polyline
func (o StrokeOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Polyline
func (o StrokeDasharrayOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Polyline
func (o StrokeDashoffsetOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Polyline
func (o StrokeLinecapOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Polyline
func (o StrokeLinejoinOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Polyline
func (o StrokeMiterlimitOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Polyline
func (o StrokeOpacityOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Polyline
func (o StrokeWidthOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Polyline
func (o SystemLanguageOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Polyline
func (o TextAnchorOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Polyline
func (o TextDecorationOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Polyline
func (o TextRenderingOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Polyline
func (o TransformOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Polyline
func (o UnicodeBidiOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Polyline
func (o VisibilityOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Polyline
func (o WordSpacingOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Polyline
func (o WritingModeOpt) applyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *PolylineAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PathLength != "" {
		SvgAttr(sb, "pathLength", a.PathLength)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Points != "" {
		SvgAttr(sb, "points", a.Points)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
}
