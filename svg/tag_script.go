// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// ScriptAttrs holds the attributes for the script SVG element
type ScriptAttrs struct {
	SvgGlobal                 SvgGlobalAttrs
	Crossorigin               bool
	ExternalResourcesRequired string
	Href                      string
	Type                      string
}

// ScriptArg interface for script element arguments
type ScriptArg interface {
	applyScript(*ScriptAttrs, *[]html.Component)
}

// defaultScriptAttrs creates default attributes for script
func defaultScriptAttrs() *ScriptAttrs {
	return &ScriptAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Script creates an SVG script element
func Script(args ...ScriptArg) html.Node {
	a := defaultScriptAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyScript(a, &kids)
	}
	return html.Node{
		Tag:   "script",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to script
func (g Global) applyScript(a *ScriptAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// CrossoriginOpt applies to Script
func (o CrossoriginOpt) applyScript(a *ScriptAttrs, _ *[]html.Component) {
	a.Crossorigin = true
}

// ExternalResourcesRequiredOpt applies to Script
func (o ExternalResourcesRequiredOpt) applyScript(a *ScriptAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// HrefOpt applies to Script
func (o HrefOpt) applyScript(a *ScriptAttrs, _ *[]html.Component) {
	a.Href = o.v
}

// TypeOpt applies to Script
func (o TypeOpt) applyScript(a *ScriptAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *ScriptAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Crossorigin {
		SvgBoolAttr(sb, "crossorigin")
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Href != "" {
		SvgAttr(sb, "href", a.Href)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
}
