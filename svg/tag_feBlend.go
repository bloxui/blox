// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeBlendAttrs holds the attributes for the feBlend SVG element
type FeBlendAttrs struct {
	SvgGlobal SvgGlobalAttrs
	In        string
	In2       string
	Mode      string
}

// FeBlendArg interface for feBlend element arguments
type FeBlendArg interface {
	applyFeBlend(*FeBlendAttrs, *[]html.Component)
}

// defaultFeBlendAttrs creates default attributes for feBlend
func defaultFeBlendAttrs() *FeBlendAttrs {
	return &FeBlendAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeBlend creates an SVG feBlend element
func FeBlend(args ...FeBlendArg) html.Node {
	a := defaultFeBlendAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeBlend(a, &kids)
	}
	return html.Node{
		Tag:   "feBlend",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feBlend
func (g Global) applyFeBlend(a *FeBlendAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeBlend
func (o InOpt) applyFeBlend(a *FeBlendAttrs, _ *[]html.Component) {
	a.In = o.v
}

// In2Opt applies to FeBlend
func (o In2Opt) applyFeBlend(a *FeBlendAttrs, _ *[]html.Component) {
	a.In2 = o.v
}

// ModeOpt applies to FeBlend
func (o ModeOpt) applyFeBlend(a *FeBlendAttrs, _ *[]html.Component) {
	a.Mode = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FeBlendAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.In2 != "" {
		SvgAttr(sb, "in2", a.In2)
	}
	if a.Mode != "" {
		SvgAttr(sb, "mode", a.Mode)
	}
}
