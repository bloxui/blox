// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// UnknownAttrs holds the attributes for the unknown SVG element
type UnknownAttrs struct {
	SvgGlobal          SvgGlobalAttrs
	RequiredExtensions string
	SystemLanguage     string
}

// UnknownArg interface for unknown element arguments
type UnknownArg interface {
	applyUnknown(*UnknownAttrs, *[]html.Component)
}

// defaultUnknownAttrs creates default attributes for unknown
func defaultUnknownAttrs() *UnknownAttrs {
	return &UnknownAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Unknown creates an SVG unknown element
func Unknown(args ...UnknownArg) html.Node {
	a := defaultUnknownAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyUnknown(a, &kids)
	}
	return html.Node{
		Tag:   "unknown",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to unknown
func (g Global) applyUnknown(a *UnknownAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// RequiredExtensionsOpt applies to Unknown
func (o RequiredExtensionsOpt) applyUnknown(a *UnknownAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// SystemLanguageOpt applies to Unknown
func (o SystemLanguageOpt) applyUnknown(a *UnknownAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *UnknownAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
}
