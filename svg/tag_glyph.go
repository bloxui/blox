// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// GlyphAttrs holds the attributes for the glyph SVG element
type GlyphAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	ArabicForm                 string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	D                          string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphName                  string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	HorizAdvX                  string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Orientation                string
	Overflow                   string
	PointerEvents              string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Unicode                    string
	UnicodeBidi                string
	VertAdvY                   string
	VertOriginX                string
	VertOriginY                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// GlyphArg interface for glyph element arguments
type GlyphArg interface {
	applyGlyph(*GlyphAttrs, *[]html.Component)
}

// defaultGlyphAttrs creates default attributes for glyph
func defaultGlyphAttrs() *GlyphAttrs {
	return &GlyphAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Glyph creates an SVG glyph element
func Glyph(args ...GlyphArg) html.Node {
	a := defaultGlyphAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyGlyph(a, &kids)
	}
	return html.Node{
		Tag:   "glyph",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to glyph
func (g Global) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to Glyph
func (o AlignmentBaselineOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// ArabicFormOpt applies to Glyph
func (o ArabicFormOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ArabicForm = o.v
}

// BaselineShiftOpt applies to Glyph
func (o BaselineShiftOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Glyph
func (o ClipOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Glyph
func (o ClipPathOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Glyph
func (o ClipRuleOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Glyph
func (o ColorOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Glyph
func (o ColorInterpolationOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Glyph
func (o ColorInterpolationFiltersOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Glyph
func (o ColorProfileOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Glyph
func (o ColorRenderingOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Glyph
func (o CursorOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DOpt applies to Glyph
func (o DOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.D = o.v
}

// DirectionOpt applies to Glyph
func (o DirectionOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Glyph
func (o DisplayOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Glyph
func (o DominantBaselineOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Glyph
func (o EnableBackgroundOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to Glyph
func (o FillOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Glyph
func (o FillOpacityOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Glyph
func (o FillRuleOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Glyph
func (o FilterOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Glyph
func (o FloodColorOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Glyph
func (o FloodOpacityOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Glyph
func (o FontFamilyOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Glyph
func (o FontSizeOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Glyph
func (o FontSizeAdjustOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Glyph
func (o FontStretchOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Glyph
func (o FontStyleOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Glyph
func (o FontVariantOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Glyph
func (o FontWeightOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphNameOpt applies to Glyph
func (o GlyphNameOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.GlyphName = o.v
}

// GlyphOrientationHorizontalOpt applies to Glyph
func (o GlyphOrientationHorizontalOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Glyph
func (o GlyphOrientationVerticalOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HorizAdvXOpt applies to Glyph
func (o HorizAdvXOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.HorizAdvX = o.v
}

// ImageRenderingOpt applies to Glyph
func (o ImageRenderingOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Glyph
func (o KerningOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Glyph
func (o LetterSpacingOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Glyph
func (o LightingColorOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Glyph
func (o MarkerEndOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Glyph
func (o MarkerMidOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Glyph
func (o MarkerStartOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Glyph
func (o MaskOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// OpacityOpt applies to Glyph
func (o OpacityOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OrientationOpt applies to Glyph
func (o OrientationOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Orientation = o.v
}

// OverflowOpt applies to Glyph
func (o OverflowOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Glyph
func (o PointerEventsOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// ShapeRenderingOpt applies to Glyph
func (o ShapeRenderingOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Glyph
func (o StopColorOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Glyph
func (o StopOpacityOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Glyph
func (o StrokeOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Glyph
func (o StrokeDasharrayOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Glyph
func (o StrokeDashoffsetOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Glyph
func (o StrokeLinecapOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Glyph
func (o StrokeLinejoinOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Glyph
func (o StrokeMiterlimitOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Glyph
func (o StrokeOpacityOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Glyph
func (o StrokeWidthOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to Glyph
func (o TextAnchorOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Glyph
func (o TextDecorationOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Glyph
func (o TextRenderingOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// UnicodeOpt applies to Glyph
func (o UnicodeOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Unicode = o.v
}

// UnicodeBidiOpt applies to Glyph
func (o UnicodeBidiOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VertAdvYOpt applies to Glyph
func (o VertAdvYOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.VertAdvY = o.v
}

// VertOriginXOpt applies to Glyph
func (o VertOriginXOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.VertOriginX = o.v
}

// VertOriginYOpt applies to Glyph
func (o VertOriginYOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.VertOriginY = o.v
}

// VisibilityOpt applies to Glyph
func (o VisibilityOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Glyph
func (o WordSpacingOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Glyph
func (o WritingModeOpt) applyGlyph(a *GlyphAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *GlyphAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.ArabicForm != "" {
		SvgAttr(sb, "arabic-form", a.ArabicForm)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.D != "" {
		SvgAttr(sb, "d", a.D)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphName != "" {
		SvgAttr(sb, "glyph-name", a.GlyphName)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.HorizAdvX != "" {
		SvgAttr(sb, "horiz-adv-x", a.HorizAdvX)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Orientation != "" {
		SvgAttr(sb, "orientation", a.Orientation)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.Unicode != "" {
		SvgAttr(sb, "unicode", a.Unicode)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.VertAdvY != "" {
		SvgAttr(sb, "vert-adv-y", a.VertAdvY)
	}
	if a.VertOriginX != "" {
		SvgAttr(sb, "vert-origin-x", a.VertOriginX)
	}
	if a.VertOriginY != "" {
		SvgAttr(sb, "vert-origin-y", a.VertOriginY)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
}
