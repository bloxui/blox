// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeMergeAttrs holds the attributes for the feMerge SVG element
type FeMergeAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// FeMergeArg interface for feMerge element arguments
type FeMergeArg interface {
	applyFeMerge(*FeMergeAttrs, *[]html.Component)
}

// defaultFeMergeAttrs creates default attributes for feMerge
func defaultFeMergeAttrs() *FeMergeAttrs {
	return &FeMergeAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeMerge creates an SVG feMerge element
func FeMerge(args ...FeMergeArg) html.Node {
	a := defaultFeMergeAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeMerge(a, &kids)
	}
	return html.Node{
		Tag:   "feMerge",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feMerge
func (g Global) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to FeMerge
func (o AlignmentBaselineOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeMerge
func (o BaselineShiftOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeMerge
func (o ClipOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeMerge
func (o ClipPathOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeMerge
func (o ClipRuleOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeMerge
func (o ColorOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeMerge
func (o ColorInterpolationOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeMerge
func (o ColorInterpolationFiltersOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeMerge
func (o ColorProfileOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeMerge
func (o ColorRenderingOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeMerge
func (o CursorOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeMerge
func (o DirectionOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeMerge
func (o DisplayOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeMerge
func (o DominantBaselineOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to FeMerge
func (o EnableBackgroundOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeMerge
func (o FillOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeMerge
func (o FillOpacityOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeMerge
func (o FillRuleOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeMerge
func (o FilterOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeMerge
func (o FloodColorOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeMerge
func (o FloodOpacityOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeMerge
func (o FontFamilyOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeMerge
func (o FontSizeOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeMerge
func (o FontSizeAdjustOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeMerge
func (o FontStretchOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeMerge
func (o FontStyleOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeMerge
func (o FontVariantOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeMerge
func (o FontWeightOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeMerge
func (o GlyphOrientationHorizontalOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeMerge
func (o GlyphOrientationVerticalOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeMerge
func (o HeightOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeMerge
func (o ImageRenderingOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to FeMerge
func (o KerningOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeMerge
func (o LetterSpacingOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeMerge
func (o LightingColorOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeMerge
func (o MarkerEndOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeMerge
func (o MarkerMidOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeMerge
func (o MarkerStartOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeMerge
func (o MaskOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeMerge
func (o OpacityOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to FeMerge
func (o OverflowOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeMerge
func (o PointerEventsOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// ResultOpt applies to FeMerge
func (o ResultOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeMerge
func (o ShapeRenderingOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeMerge
func (o StopColorOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeMerge
func (o StopOpacityOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeMerge
func (o StrokeOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeMerge
func (o StrokeDasharrayOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeMerge
func (o StrokeDashoffsetOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeMerge
func (o StrokeLinecapOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeMerge
func (o StrokeLinejoinOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeMerge
func (o StrokeMiterlimitOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeMerge
func (o StrokeOpacityOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeMerge
func (o StrokeWidthOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeMerge
func (o TextAnchorOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeMerge
func (o TextDecorationOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeMerge
func (o TextRenderingOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeMerge
func (o UnicodeBidiOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeMerge
func (o VisibilityOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeMerge
func (o WidthOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeMerge
func (o WordSpacingOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeMerge
func (o WritingModeOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeMerge
func (o XOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to FeMerge
func (o YOpt) applyFeMerge(a *FeMergeAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FeMergeAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Result != "" {
		SvgAttr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
