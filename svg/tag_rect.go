// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// RectAttrs holds the attributes for the rect SVG element
type RectAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  bool
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PathLength                 string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	Rx                         string
	Ry                         string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// RectArg interface for rect element arguments
type RectArg interface {
	applyRect(*RectAttrs, *[]html.Component)
}

// defaultRectAttrs creates default attributes for rect
func defaultRectAttrs() *RectAttrs {
	return &RectAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Rect creates an SVG rect element (self-closing)
func Rect(args ...RectArg) html.Node {
	a := defaultRectAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyRect(a, &kids)
	}
	return html.Node{
		Tag:   "rect",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to rect
func (g Global) applyRect(a *RectAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to Rect
func (o AlignmentBaselineOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Rect
func (o BaselineShiftOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Rect
func (o ClipOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Rect
func (o ClipPathOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Rect
func (o ClipRuleOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Rect
func (o ColorOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Rect
func (o ColorInterpolationOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Rect
func (o ColorInterpolationFiltersOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Rect
func (o ColorProfileOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Rect
func (o ColorRenderingOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Rect
func (o CursorOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Rect
func (o DirectionOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Rect
func (o DisplayOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Rect
func (o DominantBaselineOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Rect
func (o EnableBackgroundOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Rect
func (o ExternalResourcesRequiredOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Rect
func (o FillOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Rect
func (o FillOpacityOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Rect
func (o FillRuleOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Rect
func (o FilterOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Rect
func (o FloodColorOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Rect
func (o FloodOpacityOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Rect
func (o FocusHighlightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Rect
func (o FocusableOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// FontFamilyOpt applies to Rect
func (o FontFamilyOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Rect
func (o FontSizeOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Rect
func (o FontSizeAdjustOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Rect
func (o FontStretchOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Rect
func (o FontStyleOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Rect
func (o FontVariantOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Rect
func (o FontWeightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Rect
func (o GlyphOrientationHorizontalOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Rect
func (o GlyphOrientationVerticalOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to Rect
func (o HeightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to Rect
func (o ImageRenderingOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Rect
func (o KerningOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Rect
func (o LetterSpacingOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Rect
func (o LightingColorOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Rect
func (o MarkerEndOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Rect
func (o MarkerMidOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Rect
func (o MarkerStartOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Rect
func (o MaskOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Rect
func (o NavDownOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Rect
func (o NavDownLeftOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Rect
func (o NavDownRightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Rect
func (o NavLeftOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Rect
func (o NavNextOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Rect
func (o NavPrevOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Rect
func (o NavRightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Rect
func (o NavUpOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Rect
func (o NavUpLeftOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Rect
func (o NavUpRightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Rect
func (o OpacityOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Rect
func (o OverflowOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PathLengthOpt applies to Rect
func (o PathLengthOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.PathLength = o.v
}

// PointerEventsOpt applies to Rect
func (o PointerEventsOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Rect
func (o RequiredExtensionsOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Rect
func (o RequiredFeaturesOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Rect
func (o RequiredFontsOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Rect
func (o RequiredFormatsOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// RxOpt applies to Rect
func (o RxOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Rx = o.v
}

// RyOpt applies to Rect
func (o RyOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Ry = o.v
}

// ShapeRenderingOpt applies to Rect
func (o ShapeRenderingOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Rect
func (o StopColorOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Rect
func (o StopOpacityOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Rect
func (o StrokeOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Rect
func (o StrokeDasharrayOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Rect
func (o StrokeDashoffsetOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Rect
func (o StrokeLinecapOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Rect
func (o StrokeLinejoinOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Rect
func (o StrokeMiterlimitOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Rect
func (o StrokeOpacityOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Rect
func (o StrokeWidthOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Rect
func (o SystemLanguageOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Rect
func (o TextAnchorOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Rect
func (o TextDecorationOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Rect
func (o TextRenderingOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Rect
func (o TransformOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Rect
func (o UnicodeBidiOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Rect
func (o VisibilityOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to Rect
func (o WidthOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to Rect
func (o WordSpacingOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Rect
func (o WritingModeOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to Rect
func (o XOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Rect
func (o YOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *RectAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PathLength != "" {
		SvgAttr(sb, "pathLength", a.PathLength)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Rx != "" {
		SvgAttr(sb, "rx", a.Rx)
	}
	if a.Ry != "" {
		SvgAttr(sb, "ry", a.Ry)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
