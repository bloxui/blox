// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// SwitchAttrs holds the attributes for the switch SVG element
type SwitchAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  bool
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SwitchArg interface for switch element arguments
type SwitchArg interface {
	applySwitch(*SwitchAttrs, *[]html.Component)
}

// defaultSwitchAttrs creates default attributes for switch
func defaultSwitchAttrs() *SwitchAttrs {
	return &SwitchAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Switch creates an SVG switch element
func Switch(args ...SwitchArg) html.Node {
	a := defaultSwitchAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applySwitch(a, &kids)
	}
	return html.Node{
		Tag:   "switch",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to switch
func (g Global) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to Switch
func (o AlignmentBaselineOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Switch
func (o BaselineShiftOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Switch
func (o ClipOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Switch
func (o ClipPathOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Switch
func (o ClipRuleOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Switch
func (o ColorOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Switch
func (o ColorInterpolationOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Switch
func (o ColorInterpolationFiltersOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Switch
func (o ColorProfileOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Switch
func (o ColorRenderingOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Switch
func (o CursorOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Switch
func (o DirectionOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Switch
func (o DisplayOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Switch
func (o DominantBaselineOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Switch
func (o EnableBackgroundOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Switch
func (o ExternalResourcesRequiredOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Switch
func (o FillOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Switch
func (o FillOpacityOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Switch
func (o FillRuleOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Switch
func (o FilterOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Switch
func (o FloodColorOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Switch
func (o FloodOpacityOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Switch
func (o FocusHighlightOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Switch
func (o FocusableOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// FontFamilyOpt applies to Switch
func (o FontFamilyOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Switch
func (o FontSizeOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Switch
func (o FontSizeAdjustOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Switch
func (o FontStretchOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Switch
func (o FontStyleOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Switch
func (o FontVariantOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Switch
func (o FontWeightOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Switch
func (o GlyphOrientationHorizontalOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Switch
func (o GlyphOrientationVerticalOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Switch
func (o ImageRenderingOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Switch
func (o KerningOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Switch
func (o LetterSpacingOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Switch
func (o LightingColorOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Switch
func (o MarkerEndOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Switch
func (o MarkerMidOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Switch
func (o MarkerStartOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Switch
func (o MaskOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Switch
func (o NavDownOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Switch
func (o NavDownLeftOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Switch
func (o NavDownRightOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Switch
func (o NavLeftOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Switch
func (o NavNextOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Switch
func (o NavPrevOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Switch
func (o NavRightOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Switch
func (o NavUpOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Switch
func (o NavUpLeftOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Switch
func (o NavUpRightOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Switch
func (o OpacityOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Switch
func (o OverflowOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Switch
func (o PointerEventsOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Switch
func (o RequiredExtensionsOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Switch
func (o RequiredFeaturesOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Switch
func (o RequiredFontsOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Switch
func (o RequiredFormatsOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to Switch
func (o ShapeRenderingOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Switch
func (o StopColorOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Switch
func (o StopOpacityOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Switch
func (o StrokeOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Switch
func (o StrokeDasharrayOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Switch
func (o StrokeDashoffsetOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Switch
func (o StrokeLinecapOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Switch
func (o StrokeLinejoinOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Switch
func (o StrokeMiterlimitOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Switch
func (o StrokeOpacityOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Switch
func (o StrokeWidthOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Switch
func (o SystemLanguageOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Switch
func (o TextAnchorOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Switch
func (o TextDecorationOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Switch
func (o TextRenderingOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Switch
func (o TransformOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Switch
func (o UnicodeBidiOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Switch
func (o VisibilityOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Switch
func (o WordSpacingOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Switch
func (o WritingModeOpt) applySwitch(a *SwitchAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *SwitchAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
}
