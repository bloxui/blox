// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FePointLightAttrs holds the attributes for the fePointLight SVG element
type FePointLightAttrs struct {
	SvgGlobal SvgGlobalAttrs
	X         string
	Y         string
	Z         string
}

// FePointLightArg interface for fePointLight element arguments
type FePointLightArg interface {
	applyFePointLight(*FePointLightAttrs, *[]html.Component)
}

// defaultFePointLightAttrs creates default attributes for fePointLight
func defaultFePointLightAttrs() *FePointLightAttrs {
	return &FePointLightAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FePointLight creates an SVG fePointLight element
func FePointLight(args ...FePointLightArg) html.Node {
	a := defaultFePointLightAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFePointLight(a, &kids)
	}
	return html.Node{
		Tag:   "fePointLight",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to fePointLight
func (g Global) applyFePointLight(a *FePointLightAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// XOpt applies to FePointLight
func (o XOpt) applyFePointLight(a *FePointLightAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to FePointLight
func (o YOpt) applyFePointLight(a *FePointLightAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// ZOpt applies to FePointLight
func (o ZOpt) applyFePointLight(a *FePointLightAttrs, _ *[]html.Component) {
	a.Z = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FePointLightAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
	if a.Z != "" {
		SvgAttr(sb, "z", a.Z)
	}
}
