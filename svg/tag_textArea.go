// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// TextAreaAttrs holds the attributes for the textArea SVG element
type TextAreaAttrs struct {
	html.GlobalAttrs
	Editable           string
	FocusHighlight     string
	Focusable          bool
	Height             string
	NavDown            string
	NavDownLeft        string
	NavDownRight       string
	NavLeft            string
	NavNext            string
	NavPrev            string
	NavRight           string
	NavUp              string
	NavUpLeft          string
	NavUpRight         string
	RequiredExtensions string
	RequiredFeatures   string
	RequiredFonts      string
	RequiredFormats    string
	SystemLanguage     string
	Transform          string
	Width              string
	X                  string
	Y                  string
}

// TextArea creates an SVG textArea element
func TextArea(attrs TextAreaAttrs, children ...html.Component) html.Node {
	return html.Node{
		Tag:   "textArea",
		Attrs: &attrs,
		Kids:  children,
	}
}

// writeAttrs writes the HTML attributes to the string builder
func (a *TextAreaAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.Editable != "" {
		html.Attr(sb, "editable", a.Editable)
	}
	if a.FocusHighlight != "" {
		html.Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		html.BoolAttr(sb, "focusable")
	}
	if a.Height != "" {
		html.Attr(sb, "height", a.Height)
	}
	if a.NavDown != "" {
		html.Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		html.Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		html.Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		html.Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		html.Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		html.Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		html.Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		html.Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		html.Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		html.Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		html.Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		html.Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.Transform != "" {
		html.Attr(sb, "transform", a.Transform)
	}
	if a.Width != "" {
		html.Attr(sb, "width", a.Width)
	}
	if a.X != "" {
		html.Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		html.Attr(sb, "y", a.Y)
	}
}
