// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// TextAreaAttrs holds the attributes for the textArea SVG element
type TextAreaAttrs struct {
	SvgGlobal          SvgGlobalAttrs
	Editable           string
	FocusHighlight     string
	Focusable          bool
	Height             string
	NavDown            string
	NavDownLeft        string
	NavDownRight       string
	NavLeft            string
	NavNext            string
	NavPrev            string
	NavRight           string
	NavUp              string
	NavUpLeft          string
	NavUpRight         string
	RequiredExtensions string
	RequiredFeatures   string
	RequiredFonts      string
	RequiredFormats    string
	SystemLanguage     string
	Transform          string
	Width              string
	X                  string
	Y                  string
}

// TextAreaArg interface for textArea element arguments
type TextAreaArg interface {
	applyTextArea(*TextAreaAttrs, *[]html.Component)
}

// defaultTextAreaAttrs creates default attributes for textArea
func defaultTextAreaAttrs() *TextAreaAttrs {
	return &TextAreaAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// TextArea creates an SVG textArea element
func TextArea(args ...TextAreaArg) html.Node {
	a := defaultTextAreaAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyTextArea(a, &kids)
	}
	return html.Node{
		Tag:   "textArea",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to textArea
func (g Global) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// EditableOpt applies to TextArea
func (o EditableOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.Editable = o.v
}

// FocusHighlightOpt applies to TextArea
func (o FocusHighlightOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to TextArea
func (o FocusableOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// HeightOpt applies to TextArea
func (o HeightOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// NavDownOpt applies to TextArea
func (o NavDownOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to TextArea
func (o NavDownLeftOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to TextArea
func (o NavDownRightOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to TextArea
func (o NavLeftOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to TextArea
func (o NavNextOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to TextArea
func (o NavPrevOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to TextArea
func (o NavRightOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to TextArea
func (o NavUpOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to TextArea
func (o NavUpLeftOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to TextArea
func (o NavUpRightOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// RequiredExtensionsOpt applies to TextArea
func (o RequiredExtensionsOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to TextArea
func (o RequiredFeaturesOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to TextArea
func (o RequiredFontsOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to TextArea
func (o RequiredFormatsOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// SystemLanguageOpt applies to TextArea
func (o SystemLanguageOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TransformOpt applies to TextArea
func (o TransformOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// WidthOpt applies to TextArea
func (o WidthOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// XOpt applies to TextArea
func (o XOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to TextArea
func (o YOpt) applyTextArea(a *TextAreaAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *TextAreaAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Editable != "" {
		SvgAttr(sb, "editable", a.Editable)
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
