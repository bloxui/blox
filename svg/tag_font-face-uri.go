// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FontFaceUriAttrs holds the attributes for the font-face-uri SVG element
type FontFaceUriAttrs struct {
	SvgGlobal                 SvgGlobalAttrs
	ExternalResourcesRequired string
}

// FontFaceUriArg interface for font-face-uri element arguments
type FontFaceUriArg interface {
	applyFontFaceUri(*FontFaceUriAttrs, *[]html.Component)
}

// defaultFontFaceUriAttrs creates default attributes for font-face-uri
func defaultFontFaceUriAttrs() *FontFaceUriAttrs {
	return &FontFaceUriAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FontFaceUri creates an SVG font-face-uri element
func FontFaceUri(args ...FontFaceUriArg) html.Node {
	a := defaultFontFaceUriAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFontFaceUri(a, &kids)
	}
	return html.Node{
		Tag:   "font-face-uri",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font-face-uri
func (g Global) applyFontFaceUri(a *FontFaceUriAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// ExternalResourcesRequiredOpt applies to FontFaceUri
func (o ExternalResourcesRequiredOpt) applyFontFaceUri(a *FontFaceUriAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FontFaceUriAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
}
