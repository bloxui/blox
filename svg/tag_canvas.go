// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// CanvasAttrs holds the attributes for the canvas SVG element
type CanvasAttrs struct {
	SvgGlobal           SvgGlobalAttrs
	PreserveAspectRatio string
	RequiredExtensions  string
	SystemLanguage      string
}

// CanvasArg interface for canvas element arguments
type CanvasArg interface {
	applyCanvas(*CanvasAttrs, *[]html.Component)
}

// defaultCanvasAttrs creates default attributes for canvas
func defaultCanvasAttrs() *CanvasAttrs {
	return &CanvasAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Canvas creates an SVG canvas element
func Canvas(args ...CanvasArg) html.Node {
	a := defaultCanvasAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyCanvas(a, &kids)
	}
	return html.Node{
		Tag:   "canvas",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to canvas
func (g Global) applyCanvas(a *CanvasAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// PreserveAspectRatioOpt applies to Canvas
func (o PreserveAspectRatioOpt) applyCanvas(a *CanvasAttrs, _ *[]html.Component) {
	a.PreserveAspectRatio = o.v
}

// RequiredExtensionsOpt applies to Canvas
func (o RequiredExtensionsOpt) applyCanvas(a *CanvasAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// SystemLanguageOpt applies to Canvas
func (o SystemLanguageOpt) applyCanvas(a *CanvasAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *CanvasAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.PreserveAspectRatio != "" {
		SvgAttr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
}
