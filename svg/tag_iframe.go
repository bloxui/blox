// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// IframeAttrs holds the attributes for the iframe SVG element
type IframeAttrs struct {
	SvgGlobal          SvgGlobalAttrs
	RequiredExtensions string
	SystemLanguage     string
}

// IframeArg interface for iframe element arguments
type IframeArg interface {
	applyIframe(*IframeAttrs, *[]html.Component)
}

// defaultIframeAttrs creates default attributes for iframe
func defaultIframeAttrs() *IframeAttrs {
	return &IframeAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Iframe creates an SVG iframe element
func Iframe(args ...IframeArg) html.Node {
	a := defaultIframeAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyIframe(a, &kids)
	}
	return html.Node{
		Tag:   "iframe",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to iframe
func (g Global) applyIframe(a *IframeAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// RequiredExtensionsOpt applies to Iframe
func (o RequiredExtensionsOpt) applyIframe(a *IframeAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// SystemLanguageOpt applies to Iframe
func (o SystemLanguageOpt) applyIframe(a *IframeAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *IframeAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
}
