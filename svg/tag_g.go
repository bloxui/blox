// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// GAttrs holds the attributes for the g SVG element
type GAttrs struct {
	SvgGlobal          SvgGlobalAttrs
	RequiredExtensions string
	RequiredFeatures   string
	SystemLanguage     string
}

// GArg interface for g element arguments
type GArg interface {
	applyG(*GAttrs, *[]html.Component)
}

// defaultGAttrs creates default attributes for g
func defaultGAttrs() *GAttrs {
	return &GAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// G creates an SVG g element
func G(args ...GArg) html.Node {
	a := defaultGAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyG(a, &kids)
	}
	return html.Node{
		Tag:   "g",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to g
func (g Global) applyG(a *GAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// RequiredExtensionsOpt applies to G
func (o RequiredExtensionsOpt) applyG(a *GAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to G
func (o RequiredFeaturesOpt) applyG(a *GAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// SystemLanguageOpt applies to G
func (o SystemLanguageOpt) applyG(a *GAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *GAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
}
