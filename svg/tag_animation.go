// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

type AnimationAttrs struct {
	html.GlobalAttrs
	Begin                     string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	FocusHighlight            string
	Focusable                 bool
	Height                    string
	InitialVisibility         string
	Max                       string
	Min                       string
	NavDown                   string
	NavDownLeft               string
	NavDownRight              string
	NavLeft                   string
	NavNext                   string
	NavPrev                   string
	NavRight                  string
	NavUp                     string
	NavUpLeft                 string
	NavUpRight                string
	PreserveAspectRatio       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SyncBehavior              string
	SyncMaster                string
	SyncTolerance             string
	SystemLanguage            string
	Transform                 string
	Width                     string
	X                         string
	Y                         string
}

func Animation(attrs AnimationAttrs, children ...html.Component) html.Node {
	return html.Node{Tag: "animation", Attrs: &attrs, Kids: children}
}

func (a *AnimationAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.Begin != "" {
		html.Attr(sb, "begin", a.Begin)
	}
	if a.Dur != "" {
		html.Attr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		html.Attr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		html.Attr(sb, "fill", a.Fill)
	}
	if a.FocusHighlight != "" {
		html.Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable {
		html.BoolAttr(sb, "focusable")
	}
	if a.Height != "" {
		html.Attr(sb, "height", a.Height)
	}
	if a.InitialVisibility != "" {
		html.Attr(sb, "initialVisibility", a.InitialVisibility)
	}
	if a.Max != "" {
		html.Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		html.Attr(sb, "min", a.Min)
	}
	if a.NavDown != "" {
		html.Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		html.Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		html.Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		html.Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		html.Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		html.Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		html.Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		html.Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		html.Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		html.Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.PreserveAspectRatio != "" {
		html.Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RepeatCount != "" {
		html.Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		html.Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		html.Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		html.Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		html.Attr(sb, "restart", a.Restart)
	}
	if a.SyncBehavior != "" {
		html.Attr(sb, "syncBehavior", a.SyncBehavior)
	}
	if a.SyncMaster != "" {
		html.Attr(sb, "syncMaster", a.SyncMaster)
	}
	if a.SyncTolerance != "" {
		html.Attr(sb, "syncTolerance", a.SyncTolerance)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.Transform != "" {
		html.Attr(sb, "transform", a.Transform)
	}
	if a.Width != "" {
		html.Attr(sb, "width", a.Width)
	}
	if a.X != "" {
		html.Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		html.Attr(sb, "y", a.Y)
	}
}
