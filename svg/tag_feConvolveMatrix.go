// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeConvolveMatrixAttrs holds the attributes for the feConvolveMatrix SVG element
type FeConvolveMatrixAttrs struct {
	SvgGlobal        SvgGlobalAttrs
	Bias             string
	Divisor          string
	EdgeMode         string
	In               string
	KernelMatrix     string
	KernelUnitLength string
	Order            string
	PreserveAlpha    bool
	TargetX          string
	TargetY          string
}

// FeConvolveMatrixArg interface for feConvolveMatrix element arguments
type FeConvolveMatrixArg interface {
	applyFeConvolveMatrix(*FeConvolveMatrixAttrs, *[]html.Component)
}

// defaultFeConvolveMatrixAttrs creates default attributes for feConvolveMatrix
func defaultFeConvolveMatrixAttrs() *FeConvolveMatrixAttrs {
	return &FeConvolveMatrixAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeConvolveMatrix creates an SVG feConvolveMatrix element
func FeConvolveMatrix(args ...FeConvolveMatrixArg) html.Node {
	a := defaultFeConvolveMatrixAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeConvolveMatrix(a, &kids)
	}
	return html.Node{
		Tag:   "feConvolveMatrix",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feConvolveMatrix
func (g Global) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// BiasOpt applies to FeConvolveMatrix
func (o BiasOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Bias = o.v
}

// DivisorOpt applies to FeConvolveMatrix
func (o DivisorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Divisor = o.v
}

// EdgeModeOpt applies to FeConvolveMatrix
func (o EdgeModeOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.EdgeMode = o.v
}

// InOpt applies to FeConvolveMatrix
func (o InOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.In = o.v
}

// KernelMatrixOpt applies to FeConvolveMatrix
func (o KernelMatrixOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.KernelMatrix = o.v
}

// KernelUnitLengthOpt applies to FeConvolveMatrix
func (o KernelUnitLengthOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.KernelUnitLength = o.v
}

// OrderOpt applies to FeConvolveMatrix
func (o OrderOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Order = o.v
}

// PreserveAlphaOpt applies to FeConvolveMatrix
func (o PreserveAlphaOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.PreserveAlpha = true
}

// TargetXOpt applies to FeConvolveMatrix
func (o TargetXOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TargetX = o.v
}

// TargetYOpt applies to FeConvolveMatrix
func (o TargetYOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TargetY = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeConvolveMatrixAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Bias != "" {
		SvgAttr(sb, "bias", a.Bias)
	}
	if a.Divisor != "" {
		SvgAttr(sb, "divisor", a.Divisor)
	}
	if a.EdgeMode != "" {
		SvgAttr(sb, "edgeMode", a.EdgeMode)
	}
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.KernelMatrix != "" {
		SvgAttr(sb, "kernelMatrix", a.KernelMatrix)
	}
	if a.KernelUnitLength != "" {
		SvgAttr(sb, "kernelUnitLength", a.KernelUnitLength)
	}
	if a.Order != "" {
		SvgAttr(sb, "order", a.Order)
	}
	if a.PreserveAlpha {
		SvgBoolAttr(sb, "preserveAlpha")
	}
	if a.TargetX != "" {
		SvgAttr(sb, "targetX", a.TargetX)
	}
	if a.TargetY != "" {
		SvgAttr(sb, "targetY", a.TargetY)
	}
}
