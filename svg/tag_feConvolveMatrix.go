// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeConvolveMatrixAttrs holds the attributes for the feConvolveMatrix SVG element
type FeConvolveMatrixAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Bias                       string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	Divisor                    string
	DominantBaseline           string
	EdgeMode                   string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	In                         string
	KernelMatrix               string
	KernelUnitLength           string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Order                      string
	Overflow                   string
	PointerEvents              string
	PreserveAlpha              string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TargetX                    string
	TargetY                    string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// FeConvolveMatrixArg interface for feConvolveMatrix element arguments
type FeConvolveMatrixArg interface {
	applyFeConvolveMatrix(*FeConvolveMatrixAttrs, *[]html.Component)
}

// defaultFeConvolveMatrixAttrs creates default attributes for feConvolveMatrix
func defaultFeConvolveMatrixAttrs() *FeConvolveMatrixAttrs {
	return &FeConvolveMatrixAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeConvolveMatrix creates an SVG feConvolveMatrix element
func FeConvolveMatrix(args ...FeConvolveMatrixArg) html.Node {
	a := defaultFeConvolveMatrixAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeConvolveMatrix(a, &kids)
	}
	return html.Node{
		Tag:   "feConvolveMatrix",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feConvolveMatrix
func (g Global) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to FeConvolveMatrix
func (o AlignmentBaselineOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeConvolveMatrix
func (o BaselineShiftOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// BiasOpt applies to FeConvolveMatrix
func (o BiasOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Bias = o.v
}

// ClipOpt applies to FeConvolveMatrix
func (o ClipOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeConvolveMatrix
func (o ClipPathOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeConvolveMatrix
func (o ClipRuleOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeConvolveMatrix
func (o ColorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeConvolveMatrix
func (o ColorInterpolationOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeConvolveMatrix
func (o ColorInterpolationFiltersOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeConvolveMatrix
func (o ColorProfileOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeConvolveMatrix
func (o ColorRenderingOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeConvolveMatrix
func (o CursorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeConvolveMatrix
func (o DirectionOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeConvolveMatrix
func (o DisplayOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DivisorOpt applies to FeConvolveMatrix
func (o DivisorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Divisor = o.v
}

// DominantBaselineOpt applies to FeConvolveMatrix
func (o DominantBaselineOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EdgeModeOpt applies to FeConvolveMatrix
func (o EdgeModeOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.EdgeMode = o.v
}

// EnableBackgroundOpt applies to FeConvolveMatrix
func (o EnableBackgroundOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeConvolveMatrix
func (o FillOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeConvolveMatrix
func (o FillOpacityOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeConvolveMatrix
func (o FillRuleOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeConvolveMatrix
func (o FilterOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeConvolveMatrix
func (o FloodColorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeConvolveMatrix
func (o FloodOpacityOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeConvolveMatrix
func (o FontFamilyOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeConvolveMatrix
func (o FontSizeOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeConvolveMatrix
func (o FontSizeAdjustOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeConvolveMatrix
func (o FontStretchOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeConvolveMatrix
func (o FontStyleOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeConvolveMatrix
func (o FontVariantOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeConvolveMatrix
func (o FontWeightOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeConvolveMatrix
func (o GlyphOrientationHorizontalOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeConvolveMatrix
func (o GlyphOrientationVerticalOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeConvolveMatrix
func (o HeightOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeConvolveMatrix
func (o ImageRenderingOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// InOpt applies to FeConvolveMatrix
func (o InOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.In = o.v
}

// KernelMatrixOpt applies to FeConvolveMatrix
func (o KernelMatrixOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.KernelMatrix = o.v
}

// KernelUnitLengthOpt applies to FeConvolveMatrix
func (o KernelUnitLengthOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.KernelUnitLength = o.v
}

// KerningOpt applies to FeConvolveMatrix
func (o KerningOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeConvolveMatrix
func (o LetterSpacingOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeConvolveMatrix
func (o LightingColorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeConvolveMatrix
func (o MarkerEndOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeConvolveMatrix
func (o MarkerMidOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeConvolveMatrix
func (o MarkerStartOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeConvolveMatrix
func (o MaskOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeConvolveMatrix
func (o OpacityOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OrderOpt applies to FeConvolveMatrix
func (o OrderOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Order = o.v
}

// OverflowOpt applies to FeConvolveMatrix
func (o OverflowOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeConvolveMatrix
func (o PointerEventsOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// PreserveAlphaOpt applies to FeConvolveMatrix
func (o PreserveAlphaOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.PreserveAlpha = o.v
}

// ResultOpt applies to FeConvolveMatrix
func (o ResultOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeConvolveMatrix
func (o ShapeRenderingOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeConvolveMatrix
func (o StopColorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeConvolveMatrix
func (o StopOpacityOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeConvolveMatrix
func (o StrokeOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeConvolveMatrix
func (o StrokeDasharrayOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeConvolveMatrix
func (o StrokeDashoffsetOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeConvolveMatrix
func (o StrokeLinecapOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeConvolveMatrix
func (o StrokeLinejoinOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeConvolveMatrix
func (o StrokeMiterlimitOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeConvolveMatrix
func (o StrokeOpacityOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeConvolveMatrix
func (o StrokeWidthOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// TargetXOpt applies to FeConvolveMatrix
func (o TargetXOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TargetX = o.v
}

// TargetYOpt applies to FeConvolveMatrix
func (o TargetYOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TargetY = o.v
}

// TextAnchorOpt applies to FeConvolveMatrix
func (o TextAnchorOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeConvolveMatrix
func (o TextDecorationOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeConvolveMatrix
func (o TextRenderingOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeConvolveMatrix
func (o UnicodeBidiOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeConvolveMatrix
func (o VisibilityOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeConvolveMatrix
func (o WidthOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeConvolveMatrix
func (o WordSpacingOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeConvolveMatrix
func (o WritingModeOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeConvolveMatrix
func (o XOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to FeConvolveMatrix
func (o YOpt) applyFeConvolveMatrix(a *FeConvolveMatrixAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FeConvolveMatrixAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Bias != "" {
		SvgAttr(sb, "bias", a.Bias)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.Divisor != "" {
		SvgAttr(sb, "divisor", a.Divisor)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EdgeMode != "" {
		SvgAttr(sb, "edgeMode", a.EdgeMode)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.KernelMatrix != "" {
		SvgAttr(sb, "kernelMatrix", a.KernelMatrix)
	}
	if a.KernelUnitLength != "" {
		SvgAttr(sb, "kernelUnitLength", a.KernelUnitLength)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Order != "" {
		SvgAttr(sb, "order", a.Order)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.PreserveAlpha != "" {
		SvgAttr(sb, "preserveAlpha", a.PreserveAlpha)
	}
	if a.Result != "" {
		SvgAttr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TargetX != "" {
		SvgAttr(sb, "targetX", a.TargetX)
	}
	if a.TargetY != "" {
		SvgAttr(sb, "targetY", a.TargetY)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
