// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// PatternAttrs holds the attributes for the pattern SVG element
type PatternAttrs struct {
	SvgGlobal           SvgGlobalAttrs
	Height              string
	Href                string
	PatternContentUnits string
	PatternTransform    string
	PatternUnits        string
	Width               string
	X                   string
	Y                   string
}

// PatternArg interface for pattern element arguments
type PatternArg interface {
	applyPattern(*PatternAttrs, *[]html.Component)
}

// defaultPatternAttrs creates default attributes for pattern
func defaultPatternAttrs() *PatternAttrs {
	return &PatternAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Pattern creates an SVG pattern element
func Pattern(args ...PatternArg) html.Node {
	a := defaultPatternAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyPattern(a, &kids)
	}
	return html.Node{
		Tag:   "pattern",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to pattern
func (g Global) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// HeightOpt applies to Pattern
func (o HeightOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// HrefOpt applies to Pattern
func (o HrefOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.Href = o.v
}

// PatternContentUnitsOpt applies to Pattern
func (o PatternContentUnitsOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.PatternContentUnits = o.v
}

// PatternTransformOpt applies to Pattern
func (o PatternTransformOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.PatternTransform = o.v
}

// PatternUnitsOpt applies to Pattern
func (o PatternUnitsOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.PatternUnits = o.v
}

// WidthOpt applies to Pattern
func (o WidthOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// XOpt applies to Pattern
func (o XOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Pattern
func (o YOpt) applyPattern(a *PatternAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *PatternAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.Href != "" {
		SvgAttr(sb, "href", a.Href)
	}
	if a.PatternContentUnits != "" {
		SvgAttr(sb, "patternContentUnits", a.PatternContentUnits)
	}
	if a.PatternTransform != "" {
		SvgAttr(sb, "patternTransform", a.PatternTransform)
	}
	if a.PatternUnits != "" {
		SvgAttr(sb, "patternUnits", a.PatternUnits)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
