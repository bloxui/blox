// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// MaskAttrs holds the attributes for the mask SVG element
type MaskAttrs struct {
	SvgGlobal                  SvgGlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	MaskContentUnits           string
	MaskUnits                  string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// MaskArg interface for mask element arguments
type MaskArg interface {
	applyMask(*MaskAttrs, *[]html.Component)
}

// defaultMaskAttrs creates default attributes for mask
func defaultMaskAttrs() *MaskAttrs {
	return &MaskAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Mask creates an SVG mask element
func Mask(args ...MaskArg) html.Node {
	a := defaultMaskAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyMask(a, &kids)
	}
	return html.Node{
		Tag:   "mask",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to mask
func (g Global) applyMask(a *MaskAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to Mask
func (o AlignmentBaselineOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Mask
func (o BaselineShiftOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Mask
func (o ClipOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Mask
func (o ClipPathOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Mask
func (o ClipRuleOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Mask
func (o ColorOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Mask
func (o ColorInterpolationOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Mask
func (o ColorInterpolationFiltersOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Mask
func (o ColorProfileOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Mask
func (o ColorRenderingOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Mask
func (o CursorOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Mask
func (o DirectionOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Mask
func (o DisplayOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Mask
func (o DominantBaselineOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Mask
func (o EnableBackgroundOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Mask
func (o ExternalResourcesRequiredOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Mask
func (o FillOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Mask
func (o FillOpacityOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Mask
func (o FillRuleOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Mask
func (o FilterOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Mask
func (o FloodColorOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Mask
func (o FloodOpacityOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Mask
func (o FontFamilyOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Mask
func (o FontSizeOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Mask
func (o FontSizeAdjustOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Mask
func (o FontStretchOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Mask
func (o FontStyleOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Mask
func (o FontVariantOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Mask
func (o FontWeightOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Mask
func (o GlyphOrientationHorizontalOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Mask
func (o GlyphOrientationVerticalOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to Mask
func (o HeightOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to Mask
func (o ImageRenderingOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Mask
func (o KerningOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Mask
func (o LetterSpacingOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Mask
func (o LightingColorOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Mask
func (o MarkerEndOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Mask
func (o MarkerMidOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Mask
func (o MarkerStartOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Mask
func (o MaskOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// MaskContentUnitsOpt applies to Mask
func (o MaskContentUnitsOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.MaskContentUnits = o.v
}

// MaskUnitsOpt applies to Mask
func (o MaskUnitsOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.MaskUnits = o.v
}

// OpacityOpt applies to Mask
func (o OpacityOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Mask
func (o OverflowOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Mask
func (o PointerEventsOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Mask
func (o RequiredExtensionsOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Mask
func (o RequiredFeaturesOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// ShapeRenderingOpt applies to Mask
func (o ShapeRenderingOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Mask
func (o StopColorOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Mask
func (o StopOpacityOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Mask
func (o StrokeOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Mask
func (o StrokeDasharrayOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Mask
func (o StrokeDashoffsetOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Mask
func (o StrokeLinecapOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Mask
func (o StrokeLinejoinOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Mask
func (o StrokeMiterlimitOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Mask
func (o StrokeOpacityOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Mask
func (o StrokeWidthOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Mask
func (o SystemLanguageOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Mask
func (o TextAnchorOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Mask
func (o TextDecorationOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Mask
func (o TextRenderingOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to Mask
func (o UnicodeBidiOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Mask
func (o VisibilityOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WidthOpt applies to Mask
func (o WidthOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to Mask
func (o WordSpacingOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Mask
func (o WritingModeOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// XOpt applies to Mask
func (o XOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Mask
func (o YOpt) applyMask(a *MaskAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *MaskAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask)
	}
	if a.MaskContentUnits != "" {
		SvgAttr(sb, "maskContentUnits", a.MaskContentUnits)
	}
	if a.MaskUnits != "" {
		SvgAttr(sb, "maskUnits", a.MaskUnits)
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
