// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FontFaceNameAttrs holds the attributes for the font-face-name SVG element
type FontFaceNameAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Name      string
}

// FontFaceNameArg interface for font-face-name element arguments
type FontFaceNameArg interface {
	applyFontFaceName(*FontFaceNameAttrs, *[]html.Component)
}

// defaultFontFaceNameAttrs creates default attributes for font-face-name
func defaultFontFaceNameAttrs() *FontFaceNameAttrs {
	return &FontFaceNameAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FontFaceName creates an SVG font-face-name element
func FontFaceName(args ...FontFaceNameArg) html.Node {
	a := defaultFontFaceNameAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFontFaceName(a, &kids)
	}
	return html.Node{
		Tag:   "font-face-name",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font-face-name
func (g Global) applyFontFaceName(a *FontFaceNameAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// NameOpt applies to FontFaceName
func (o NameOpt) applyFontFaceName(a *FontFaceNameAttrs, _ *[]html.Component) {
	a.Name = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FontFaceNameAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Name != "" {
		SvgAttr(sb, "name", a.Name)
	}
}
