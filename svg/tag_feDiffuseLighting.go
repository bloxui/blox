// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeDiffuseLightingAttrs holds the attributes for the feDiffuseLighting SVG element
type FeDiffuseLightingAttrs struct {
	SvgGlobal        SvgGlobalAttrs
	DiffuseConstant  string
	In               string
	KernelUnitLength string
	SurfaceScale     string
}

// FeDiffuseLightingArg interface for feDiffuseLighting element arguments
type FeDiffuseLightingArg interface {
	applyFeDiffuseLighting(*FeDiffuseLightingAttrs, *[]html.Component)
}

// defaultFeDiffuseLightingAttrs creates default attributes for feDiffuseLighting
func defaultFeDiffuseLightingAttrs() *FeDiffuseLightingAttrs {
	return &FeDiffuseLightingAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeDiffuseLighting creates an SVG feDiffuseLighting element
func FeDiffuseLighting(args ...FeDiffuseLightingArg) html.Node {
	a := defaultFeDiffuseLightingAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeDiffuseLighting(a, &kids)
	}
	return html.Node{
		Tag:   "feDiffuseLighting",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feDiffuseLighting
func (g Global) applyFeDiffuseLighting(a *FeDiffuseLightingAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// DiffuseConstantOpt applies to FeDiffuseLighting
func (o DiffuseConstantOpt) applyFeDiffuseLighting(a *FeDiffuseLightingAttrs, _ *[]html.Component) {
	a.DiffuseConstant = o.v
}

// InOpt applies to FeDiffuseLighting
func (o InOpt) applyFeDiffuseLighting(a *FeDiffuseLightingAttrs, _ *[]html.Component) {
	a.In = o.v
}

// KernelUnitLengthOpt applies to FeDiffuseLighting
func (o KernelUnitLengthOpt) applyFeDiffuseLighting(a *FeDiffuseLightingAttrs, _ *[]html.Component) {
	a.KernelUnitLength = o.v
}

// SurfaceScaleOpt applies to FeDiffuseLighting
func (o SurfaceScaleOpt) applyFeDiffuseLighting(a *FeDiffuseLightingAttrs, _ *[]html.Component) {
	a.SurfaceScale = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeDiffuseLightingAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.DiffuseConstant != "" {
		SvgAttr(sb, "diffuseConstant", a.DiffuseConstant)
	}
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.KernelUnitLength != "" {
		SvgAttr(sb, "kernelUnitLength", a.KernelUnitLength)
	}
	if a.SurfaceScale != "" {
		SvgAttr(sb, "surfaceScale", a.SurfaceScale)
	}
}
