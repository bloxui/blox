// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// AnimateTransformAttrs holds the attributes for the animateTransform SVG element
type AnimateTransformAttrs struct {
	html.GlobalAttrs
	Accumulate                string
	Additive                  string
	AttributeName             string
	AttributeType             string
	Begin                     string
	By                        string
	CalcMode                  string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	From                      string
	Href                      string
	KeySplines                string
	KeyTimes                  string
	Max                       string
	Min                       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SystemLanguage            string
	To                        string
	Type                      string
	Values                    string
}

// AnimateTransform creates an SVG animateTransform element (self-closing)
func AnimateTransform(attrs AnimateTransformAttrs) html.Node {
	return html.Node{
		Tag:   "animateTransform",
		Attrs: &attrs,
		Void:  true,
	}
}

// writeAttrs writes the HTML attributes to the string builder
func (a *AnimateTransformAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.Accumulate != "" {
		html.Attr(sb, "accumulate", a.Accumulate)
	}
	if a.Additive != "" {
		html.Attr(sb, "additive", a.Additive)
	}
	if a.AttributeName != "" {
		html.Attr(sb, "attributeName", a.AttributeName)
	}
	if a.AttributeType != "" {
		html.Attr(sb, "attributeType", a.AttributeType)
	}
	if a.Begin != "" {
		html.Attr(sb, "begin", a.Begin)
	}
	if a.By != "" {
		html.Attr(sb, "by", a.By)
	}
	if a.CalcMode != "" {
		html.Attr(sb, "calcMode", a.CalcMode)
	}
	if a.Dur != "" {
		html.Attr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		html.Attr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		html.Attr(sb, "fill", a.Fill)
	}
	if a.From != "" {
		html.Attr(sb, "from", a.From)
	}
	if a.Href != "" {
		html.Attr(sb, "href", a.Href)
	}
	if a.KeySplines != "" {
		html.Attr(sb, "keySplines", a.KeySplines)
	}
	if a.KeyTimes != "" {
		html.Attr(sb, "keyTimes", a.KeyTimes)
	}
	if a.Max != "" {
		html.Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		html.Attr(sb, "min", a.Min)
	}
	if a.RepeatCount != "" {
		html.Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		html.Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		html.Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		html.Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		html.Attr(sb, "restart", a.Restart)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.To != "" {
		html.Attr(sb, "to", a.To)
	}
	if a.Type != "" {
		html.Attr(sb, "type", a.Type)
	}
	if a.Values != "" {
		html.Attr(sb, "values", a.Values)
	}
}
