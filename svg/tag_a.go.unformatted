// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// AAttrs holds the attributes for the a SVG element
type AAttrs struct {
	SvgGlobal SvgGlobalAttrs
	AlignmentBaseline string
	BaselineShift string
	Clip string
	ClipPath string
	ClipRule string
	Color string
	ColorInterpolation string
	ColorInterpolationFilters string
	ColorProfile string
	ColorRendering string
	Cursor string
	Direction string
	Display string
	DominantBaseline string
	Download string
	EnableBackground string
	ExternalResourcesRequired string
	Fill string
	FillOpacity string
	FillRule string
	Filter string
	FloodColor string
	FloodOpacity string
	FocusHighlight string
	Focusable bool
	FontFamily string
	FontSize string
	FontSizeAdjust string
	FontStretch string
	FontStyle string
	FontVariant string
	FontWeight string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical string
	Href string
	Hreflang string
	ImageRendering string
	Kerning string
	LetterSpacing string
	LightingColor string
	MarkerEnd string
	MarkerMid string
	MarkerStart string
	Mask string
	NavDown string
	NavDownLeft string
	NavDownRight string
	NavLeft string
	NavNext string
	NavPrev string
	NavRight string
	NavUp string
	NavUpLeft string
	NavUpRight string
	Opacity string
	Overflow string
	Ping string
	PointerEvents string
	Referrerpolicy string
	RequiredExtensions string
	RequiredFeatures string
	RequiredFonts string
	RequiredFormats string
	ShapeRendering string
	StopColor string
	StopOpacity string
	Stroke string
	StrokeDasharray string
	StrokeDashoffset string
	StrokeLinecap string
	StrokeLinejoin string
	StrokeMiterlimit string
	StrokeOpacity string
	StrokeWidth string
	SystemLanguage string
	Target string
	TextAnchor string
	TextDecoration string
	TextRendering string
	Transform string
	Type string
	UnicodeBidi string
	Visibility string
	WordSpacing string
	WritingMode string
}

// AArg interface for a element arguments
type AArg interface {
	applyA(*AAttrs, *[]html.Component)
}

// defaultAAttrs creates default attributes for a
func defaultAAttrs() *AAttrs {
	return &AAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}


// A creates an SVG a element
func A(args ...AArg) html.Node {
	a := defaultAAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyA(a, &kids)
	}
	return html.Node{
		Tag:   "a",
		Attrs: a,
		Kids:  kids,
	}
}


// Global applies global SVG attributes to a
func (g Global) applyA(a *AAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AlignmentBaselineOpt applies to A
func (o AlignmentBaselineOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to A
func (o BaselineShiftOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to A
func (o ClipOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to A
func (o ClipPathOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to A
func (o ClipRuleOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to A
func (o ColorOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to A
func (o ColorInterpolationOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to A
func (o ColorInterpolationFiltersOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to A
func (o ColorProfileOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to A
func (o ColorRenderingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to A
func (o CursorOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to A
func (o DirectionOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Direction = o.v
}

// DisplayOpt applies to A
func (o DisplayOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to A
func (o DominantBaselineOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.DominantBaseline = o.v
}

// DownloadOpt applies to A
func (o DownloadOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Download = o.v
}

// EnableBackgroundOpt applies to A
func (o EnableBackgroundOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to A
func (o ExternalResourcesRequiredOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to A
func (o FillOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to A
func (o FillOpacityOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to A
func (o FillRuleOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FillRule = o.v
}

// FilterOpt applies to A
func (o FilterOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to A
func (o FloodColorOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to A
func (o FloodOpacityOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to A
func (o FocusHighlightOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to A
func (o FocusableOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Focusable = true
}

// FontFamilyOpt applies to A
func (o FontFamilyOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to A
func (o FontSizeOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to A
func (o FontSizeAdjustOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to A
func (o FontStretchOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to A
func (o FontStyleOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to A
func (o FontVariantOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to A
func (o FontWeightOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to A
func (o GlyphOrientationHorizontalOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to A
func (o GlyphOrientationVerticalOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.GlyphOrientationVertical = o.v
}

// HrefOpt applies to A
func (o HrefOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Href = o.v
}

// HreflangOpt applies to A
func (o HreflangOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Hreflang = o.v
}

// ImageRenderingOpt applies to A
func (o ImageRenderingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to A
func (o KerningOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to A
func (o LetterSpacingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to A
func (o LightingColorOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to A
func (o MarkerEndOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to A
func (o MarkerMidOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to A
func (o MarkerStartOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to A
func (o MaskOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Mask = o.v
}

// NavDownOpt applies to A
func (o NavDownOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to A
func (o NavDownLeftOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to A
func (o NavDownRightOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to A
func (o NavLeftOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to A
func (o NavNextOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to A
func (o NavPrevOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to A
func (o NavRightOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to A
func (o NavUpOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to A
func (o NavUpLeftOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to A
func (o NavUpRightOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to A
func (o OpacityOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to A
func (o OverflowOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Overflow = o.v
}

// PingOpt applies to A
func (o PingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Ping = o.v
}

// PointerEventsOpt applies to A
func (o PointerEventsOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.PointerEvents = o.v
}

// ReferrerpolicyOpt applies to A
func (o ReferrerpolicyOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Referrerpolicy = o.v
}

// RequiredExtensionsOpt applies to A
func (o RequiredExtensionsOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to A
func (o RequiredFeaturesOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to A
func (o RequiredFontsOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to A
func (o RequiredFormatsOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to A
func (o ShapeRenderingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to A
func (o StopColorOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to A
func (o StopOpacityOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to A
func (o StrokeOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to A
func (o StrokeDasharrayOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to A
func (o StrokeDashoffsetOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to A
func (o StrokeLinecapOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to A
func (o StrokeLinejoinOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to A
func (o StrokeMiterlimitOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to A
func (o StrokeOpacityOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to A
func (o StrokeWidthOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to A
func (o SystemLanguageOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TargetOpt applies to A
func (o TargetOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Target = o.v
}

// TextAnchorOpt applies to A
func (o TextAnchorOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to A
func (o TextDecorationOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to A
func (o TextRenderingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to A
func (o TransformOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Transform = o.v
}

// TypeOpt applies to A
func (o TypeOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// UnicodeBidiOpt applies to A
func (o UnicodeBidiOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to A
func (o VisibilityOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to A
func (o WordSpacingOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to A
func (o WritingModeOpt) applyA(a *AAttrs, _ *[]html.Component) {
	a.WritingMode = o.v
}

// Text content support for A
func (o html.TxtOpt) applyA(a *AAttrs, kids *[]html.Component) {
	*kids = append(*kids, html.TextNode(o.s))
}

func (o html.UnsafeTxtOpt) applyA(a *AAttrs, kids *[]html.Component) {
	*kids = append(*kids, html.UnsafeTextNode(o.s))
}

func (o html.ChildOpt) applyA(a *AAttrs, kids *[]html.Component) {
	*kids = append(*kids, o.c)
}
// writeAttrs writes the SVG attributes to the string builder
func (a *AAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.AlignmentBaseline != "" {
		SvgAttr(sb, "alignment-baseline", a.AlignmentBaseline")
	}
	if a.BaselineShift != "" {
		SvgAttr(sb, "baseline-shift", a.BaselineShift")
	}
	if a.Clip != "" {
		SvgAttr(sb, "clip", a.Clip")
	}
	if a.ClipPath != "" {
		SvgAttr(sb, "clip-path", a.ClipPath")
	}
	if a.ClipRule != "" {
		SvgAttr(sb, "clip-rule", a.ClipRule")
	}
	if a.Color != "" {
		SvgAttr(sb, "color", a.Color")
	}
	if a.ColorInterpolation != "" {
		SvgAttr(sb, "color-interpolation", a.ColorInterpolation")
	}
	if a.ColorInterpolationFilters != "" {
		SvgAttr(sb, "color-interpolation-filters", a.ColorInterpolationFilters")
	}
	if a.ColorProfile != "" {
		SvgAttr(sb, "color-profile", a.ColorProfile")
	}
	if a.ColorRendering != "" {
		SvgAttr(sb, "color-rendering", a.ColorRendering")
	}
	if a.Cursor != "" {
		SvgAttr(sb, "cursor", a.Cursor")
	}
	if a.Direction != "" {
		SvgAttr(sb, "direction", a.Direction")
	}
	if a.Display != "" {
		SvgAttr(sb, "display", a.Display")
	}
	if a.DominantBaseline != "" {
		SvgAttr(sb, "dominant-baseline", a.DominantBaseline")
	}
	if a.Download != "" {
		SvgAttr(sb, "download", a.Download")
	}
	if a.EnableBackground != "" {
		SvgAttr(sb, "enable-background", a.EnableBackground")
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired")
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill")
	}
	if a.FillOpacity != "" {
		SvgAttr(sb, "fill-opacity", a.FillOpacity")
	}
	if a.FillRule != "" {
		SvgAttr(sb, "fill-rule", a.FillRule")
	}
	if a.Filter != "" {
		SvgAttr(sb, "filter", a.Filter")
	}
	if a.FloodColor != "" {
		SvgAttr(sb, "flood-color", a.FloodColor")
	}
	if a.FloodOpacity != "" {
		SvgAttr(sb, "flood-opacity", a.FloodOpacity")
	}
	if a.FocusHighlight != "" {
		SvgAttr(sb, "focusHighlight", a.FocusHighlight")
	}
	if a.Focusable {
		SvgBoolAttr(sb, "focusable")
	}
	if a.FontFamily != "" {
		SvgAttr(sb, "font-family", a.FontFamily")
	}
	if a.FontSize != "" {
		SvgAttr(sb, "font-size", a.FontSize")
	}
	if a.FontSizeAdjust != "" {
		SvgAttr(sb, "font-size-adjust", a.FontSizeAdjust")
	}
	if a.FontStretch != "" {
		SvgAttr(sb, "font-stretch", a.FontStretch")
	}
	if a.FontStyle != "" {
		SvgAttr(sb, "font-style", a.FontStyle")
	}
	if a.FontVariant != "" {
		SvgAttr(sb, "font-variant", a.FontVariant")
	}
	if a.FontWeight != "" {
		SvgAttr(sb, "font-weight", a.FontWeight")
	}
	if a.GlyphOrientationHorizontal != "" {
		SvgAttr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal")
	}
	if a.GlyphOrientationVertical != "" {
		SvgAttr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical")
	}
	if a.Href != "" {
		SvgAttr(sb, "href", a.Href")
	}
	if a.Hreflang != "" {
		SvgAttr(sb, "hreflang", a.Hreflang")
	}
	if a.ImageRendering != "" {
		SvgAttr(sb, "image-rendering", a.ImageRendering")
	}
	if a.Kerning != "" {
		SvgAttr(sb, "kerning", a.Kerning")
	}
	if a.LetterSpacing != "" {
		SvgAttr(sb, "letter-spacing", a.LetterSpacing")
	}
	if a.LightingColor != "" {
		SvgAttr(sb, "lighting-color", a.LightingColor")
	}
	if a.MarkerEnd != "" {
		SvgAttr(sb, "marker-end", a.MarkerEnd")
	}
	if a.MarkerMid != "" {
		SvgAttr(sb, "marker-mid", a.MarkerMid")
	}
	if a.MarkerStart != "" {
		SvgAttr(sb, "marker-start", a.MarkerStart")
	}
	if a.Mask != "" {
		SvgAttr(sb, "mask", a.Mask")
	}
	if a.NavDown != "" {
		SvgAttr(sb, "nav-down", a.NavDown")
	}
	if a.NavDownLeft != "" {
		SvgAttr(sb, "nav-down-left", a.NavDownLeft")
	}
	if a.NavDownRight != "" {
		SvgAttr(sb, "nav-down-right", a.NavDownRight")
	}
	if a.NavLeft != "" {
		SvgAttr(sb, "nav-left", a.NavLeft")
	}
	if a.NavNext != "" {
		SvgAttr(sb, "nav-next", a.NavNext")
	}
	if a.NavPrev != "" {
		SvgAttr(sb, "nav-prev", a.NavPrev")
	}
	if a.NavRight != "" {
		SvgAttr(sb, "nav-right", a.NavRight")
	}
	if a.NavUp != "" {
		SvgAttr(sb, "nav-up", a.NavUp")
	}
	if a.NavUpLeft != "" {
		SvgAttr(sb, "nav-up-left", a.NavUpLeft")
	}
	if a.NavUpRight != "" {
		SvgAttr(sb, "nav-up-right", a.NavUpRight")
	}
	if a.Opacity != "" {
		SvgAttr(sb, "opacity", a.Opacity")
	}
	if a.Overflow != "" {
		SvgAttr(sb, "overflow", a.Overflow")
	}
	if a.Ping != "" {
		SvgAttr(sb, "ping", a.Ping")
	}
	if a.PointerEvents != "" {
		SvgAttr(sb, "pointer-events", a.PointerEvents")
	}
	if a.Referrerpolicy != "" {
		SvgAttr(sb, "referrerpolicy", a.Referrerpolicy")
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions")
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures")
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts")
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats")
	}
	if a.ShapeRendering != "" {
		SvgAttr(sb, "shape-rendering", a.ShapeRendering")
	}
	if a.StopColor != "" {
		SvgAttr(sb, "stop-color", a.StopColor")
	}
	if a.StopOpacity != "" {
		SvgAttr(sb, "stop-opacity", a.StopOpacity")
	}
	if a.Stroke != "" {
		SvgAttr(sb, "stroke", a.Stroke")
	}
	if a.StrokeDasharray != "" {
		SvgAttr(sb, "stroke-dasharray", a.StrokeDasharray")
	}
	if a.StrokeDashoffset != "" {
		SvgAttr(sb, "stroke-dashoffset", a.StrokeDashoffset")
	}
	if a.StrokeLinecap != "" {
		SvgAttr(sb, "stroke-linecap", a.StrokeLinecap")
	}
	if a.StrokeLinejoin != "" {
		SvgAttr(sb, "stroke-linejoin", a.StrokeLinejoin")
	}
	if a.StrokeMiterlimit != "" {
		SvgAttr(sb, "stroke-miterlimit", a.StrokeMiterlimit")
	}
	if a.StrokeOpacity != "" {
		SvgAttr(sb, "stroke-opacity", a.StrokeOpacity")
	}
	if a.StrokeWidth != "" {
		SvgAttr(sb, "stroke-width", a.StrokeWidth")
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage")
	}
	if a.Target != "" {
		SvgAttr(sb, "target", a.Target")
	}
	if a.TextAnchor != "" {
		SvgAttr(sb, "text-anchor", a.TextAnchor")
	}
	if a.TextDecoration != "" {
		SvgAttr(sb, "text-decoration", a.TextDecoration")
	}
	if a.TextRendering != "" {
		SvgAttr(sb, "text-rendering", a.TextRendering")
	}
	if a.Transform != "" {
		SvgAttr(sb, "transform", a.Transform")
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type")
	}
	if a.UnicodeBidi != "" {
		SvgAttr(sb, "unicode-bidi", a.UnicodeBidi")
	}
	if a.Visibility != "" {
		SvgAttr(sb, "visibility", a.Visibility")
	}
	if a.WordSpacing != "" {
		SvgAttr(sb, "word-spacing", a.WordSpacing")
	}
	if a.WritingMode != "" {
		SvgAttr(sb, "writing-mode", a.WritingMode")
	}
}
