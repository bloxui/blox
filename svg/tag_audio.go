// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// AudioAttrs holds the attributes for the audio SVG element
type AudioAttrs struct {
	SvgGlobal                 SvgGlobalAttrs
	Begin                     string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	Max                       string
	Min                       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SyncBehavior              string
	SyncMaster                string
	SyncTolerance             string
	SystemLanguage            string
	Type                      string
}

// AudioArg interface for audio element arguments
type AudioArg interface {
	applyAudio(*AudioAttrs, *[]html.Component)
}

// defaultAudioAttrs creates default attributes for audio
func defaultAudioAttrs() *AudioAttrs {
	return &AudioAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Audio creates an SVG audio element
func Audio(args ...AudioArg) html.Node {
	a := defaultAudioAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyAudio(a, &kids)
	}
	return html.Node{
		Tag:   "audio",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to audio
func (g Global) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// BeginOpt applies to Audio
func (o BeginOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Begin = o.v
}

// DurOpt applies to Audio
func (o DurOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Dur = o.v
}

// EndOpt applies to Audio
func (o EndOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.End = o.v
}

// ExternalResourcesRequiredOpt applies to Audio
func (o ExternalResourcesRequiredOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Audio
func (o FillOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Fill = o.v
}

// MaxOpt applies to Audio
func (o MaxOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Max = o.v
}

// MinOpt applies to Audio
func (o MinOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Min = o.v
}

// RepeatCountOpt applies to Audio
func (o RepeatCountOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.RepeatCount = o.v
}

// RepeatDurOpt applies to Audio
func (o RepeatDurOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.RepeatDur = o.v
}

// RequiredExtensionsOpt applies to Audio
func (o RequiredExtensionsOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Audio
func (o RequiredFeaturesOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Audio
func (o RequiredFontsOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Audio
func (o RequiredFormatsOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.RequiredFormats = o.v
}

// RestartOpt applies to Audio
func (o RestartOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Restart = o.v
}

// SyncBehaviorOpt applies to Audio
func (o SyncBehaviorOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.SyncBehavior = o.v
}

// SyncMasterOpt applies to Audio
func (o SyncMasterOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.SyncMaster = o.v
}

// SyncToleranceOpt applies to Audio
func (o SyncToleranceOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.SyncTolerance = o.v
}

// SystemLanguageOpt applies to Audio
func (o SystemLanguageOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.SystemLanguage = o.v
}

// TypeOpt applies to Audio
func (o TypeOpt) applyAudio(a *AudioAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *AudioAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Begin != "" {
		SvgAttr(sb, "begin", a.Begin)
	}
	if a.Dur != "" {
		SvgAttr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		SvgAttr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		SvgAttr(sb, "fill", a.Fill)
	}
	if a.Max != "" {
		SvgAttr(sb, "max", a.Max)
	}
	if a.Min != "" {
		SvgAttr(sb, "min", a.Min)
	}
	if a.RepeatCount != "" {
		SvgAttr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		SvgAttr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		SvgAttr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		SvgAttr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		SvgAttr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		SvgAttr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		SvgAttr(sb, "restart", a.Restart)
	}
	if a.SyncBehavior != "" {
		SvgAttr(sb, "syncBehavior", a.SyncBehavior)
	}
	if a.SyncMaster != "" {
		SvgAttr(sb, "syncMaster", a.SyncMaster)
	}
	if a.SyncTolerance != "" {
		SvgAttr(sb, "syncTolerance", a.SyncTolerance)
	}
	if a.SystemLanguage != "" {
		SvgAttr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
}
