// Code generated by gen-svg; DO NOT EDIT.
package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// AudioAttrs holds the attributes for the audio SVG element
type AudioAttrs struct {
	html.GlobalAttrs
	Begin                     string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	Max                       string
	Min                       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SyncBehavior              string
	SyncMaster                string
	SyncTolerance             string
	SystemLanguage            string
	Type                      string
}

// Audio creates an SVG audio element
func Audio(attrs AudioAttrs, children ...html.Component) html.Node {
	return html.Node{
		Tag:   "audio",
		Attrs: &attrs,
		Kids:  children,
	}
}

// writeAttrs writes the HTML attributes to the string builder
func (a *AudioAttrs) writeAttrs(sb *strings.Builder) {
	html.WriteGlobal(sb, &a.GlobalAttrs)
	if a.Begin != "" {
		html.Attr(sb, "begin", a.Begin)
	}
	if a.Dur != "" {
		html.Attr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		html.Attr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		html.Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		html.Attr(sb, "fill", a.Fill)
	}
	if a.Max != "" {
		html.Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		html.Attr(sb, "min", a.Min)
	}
	if a.RepeatCount != "" {
		html.Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		html.Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		html.Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		html.Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		html.Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		html.Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		html.Attr(sb, "restart", a.Restart)
	}
	if a.SyncBehavior != "" {
		html.Attr(sb, "syncBehavior", a.SyncBehavior)
	}
	if a.SyncMaster != "" {
		html.Attr(sb, "syncMaster", a.SyncMaster)
	}
	if a.SyncTolerance != "" {
		html.Attr(sb, "syncTolerance", a.SyncTolerance)
	}
	if a.SystemLanguage != "" {
		html.Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.Type != "" {
		html.Attr(sb, "type", a.Type)
	}
}
