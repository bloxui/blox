// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeOffsetAttrs holds the attributes for the feOffset SVG element
type FeOffsetAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Dx        string
	Dy        string
}

// FeOffsetArg interface for feOffset element arguments
type FeOffsetArg interface {
	applyFeOffset(*FeOffsetAttrs, *[]html.Component)
}

// defaultFeOffsetAttrs creates default attributes for feOffset
func defaultFeOffsetAttrs() *FeOffsetAttrs {
	return &FeOffsetAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeOffset creates an SVG feOffset element
func FeOffset(args ...FeOffsetArg) html.Node {
	a := defaultFeOffsetAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeOffset(a, &kids)
	}
	return html.Node{
		Tag:   "feOffset",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feOffset
func (g Global) applyFeOffset(a *FeOffsetAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// DxOpt applies to FeOffset
func (o DxOpt) applyFeOffset(a *FeOffsetAttrs, _ *[]html.Component) {
	a.Dx = o.v
}

// DyOpt applies to FeOffset
func (o DyOpt) applyFeOffset(a *FeOffsetAttrs, _ *[]html.Component) {
	a.Dy = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *FeOffsetAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Dx != "" {
		SvgAttr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		SvgAttr(sb, "dy", a.Dy)
	}
}
