// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// HandlerAttrs holds the attributes for the handler SVG element
type HandlerAttrs struct {
	SvgGlobal                 SvgGlobalAttrs
	ExternalResourcesRequired string
	Type                      string
}

// HandlerArg interface for handler element arguments
type HandlerArg interface {
	applyHandler(*HandlerAttrs, *[]html.Component)
}

// defaultHandlerAttrs creates default attributes for handler
func defaultHandlerAttrs() *HandlerAttrs {
	return &HandlerAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Handler creates an SVG handler element
func Handler(args ...HandlerArg) html.Node {
	a := defaultHandlerAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyHandler(a, &kids)
	}
	return html.Node{
		Tag:   "handler",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to handler
func (g Global) applyHandler(a *HandlerAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// ExternalResourcesRequiredOpt applies to Handler
func (o ExternalResourcesRequiredOpt) applyHandler(a *HandlerAttrs, _ *[]html.Component) {
	a.ExternalResourcesRequired = o.v
}

// TypeOpt applies to Handler
func (o TypeOpt) applyHandler(a *HandlerAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *HandlerAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.ExternalResourcesRequired != "" {
		SvgAttr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
}
