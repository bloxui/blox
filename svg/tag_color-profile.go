// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// ColorProfileAttrs holds the attributes for the color-profile SVG element
type ColorProfileAttrs struct {
	SvgGlobal       SvgGlobalAttrs
	Local           string
	Name            string
	RenderingIntent string
}

// ColorProfileArg interface for color-profile element arguments
type ColorProfileArg interface {
	applyColorProfile(*ColorProfileAttrs, *[]html.Component)
}

// defaultColorProfileAttrs creates default attributes for color-profile
func defaultColorProfileAttrs() *ColorProfileAttrs {
	return &ColorProfileAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// ColorProfile creates an SVG color-profile element
func ColorProfile(args ...ColorProfileArg) html.Node {
	a := defaultColorProfileAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyColorProfile(a, &kids)
	}
	return html.Node{
		Tag:   "color-profile",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to color-profile
func (g Global) applyColorProfile(a *ColorProfileAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// LocalOpt applies to ColorProfile
func (o LocalOpt) applyColorProfile(a *ColorProfileAttrs, _ *[]html.Component) {
	a.Local = o.v
}

// NameOpt applies to ColorProfile
func (o NameOpt) applyColorProfile(a *ColorProfileAttrs, _ *[]html.Component) {
	a.Name = o.v
}

// RenderingIntentOpt applies to ColorProfile
func (o RenderingIntentOpt) applyColorProfile(a *ColorProfileAttrs, _ *[]html.Component) {
	a.RenderingIntent = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *ColorProfileAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Local != "" {
		SvgAttr(sb, "local", a.Local)
	}
	if a.Name != "" {
		SvgAttr(sb, "name", a.Name)
	}
	if a.RenderingIntent != "" {
		SvgAttr(sb, "rendering-intent", a.RenderingIntent)
	}
}
