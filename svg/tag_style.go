// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// StyleAttrs holds the attributes for the style SVG element
type StyleAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Media     string
	Title     string
	Type      string
}

// StyleArg interface for style element arguments
type StyleArg interface {
	applyStyle(*StyleAttrs, *[]html.Component)
}

// defaultStyleAttrs creates default attributes for style
func defaultStyleAttrs() *StyleAttrs {
	return &StyleAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Style creates an SVG style element
func Style(args ...StyleArg) html.Node {
	a := defaultStyleAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyStyle(a, &kids)
	}
	return html.Node{
		Tag:   "style",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to style
func (g Global) applyStyle(a *StyleAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// MediaOpt applies to Style
func (o MediaOpt) applyStyle(a *StyleAttrs, _ *[]html.Component) {
	a.Media = o.v
}

// TitleOpt applies to Style
func (o TitleOpt) applyStyle(a *StyleAttrs, _ *[]html.Component) {
	a.Title = o.v
}

// TypeOpt applies to Style
func (o TypeOpt) applyStyle(a *StyleAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// writeAttrs writes the SVG attributes to the string builder
func (a *StyleAttrs) writeAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Media != "" {
		SvgAttr(sb, "media", a.Media)
	}
	if a.Title != "" {
		SvgAttr(sb, "title", a.Title)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
}
