package generator

const tagTemplate = `// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// {{.StructName}} holds the attributes for the {{.Name}} SVG element
type {{.StructName}} struct {
	SvgGlobal SvgGlobalAttrs{{range .Attributes}}
	{{.Field}} {{.GoType}}{{end}}
}

// {{.ArgInterface}} interface for {{.Name}} element arguments
type {{.ArgInterface}} interface {
	Apply{{.Title}}(*{{.StructName}}, *[]html.Component)
}

// default{{.StructName}} creates default attributes for {{.Name}}
func default{{.StructName}}() *{{.StructName}} {
	return &{{.StructName}}{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

{{if .Void}}
// {{.Title}} creates an SVG {{.Name}} element (self-closing)
func {{.Title}}(args ...{{.ArgInterface}}) html.Node {
	a := default{{.StructName}}()
	var kids []html.Component
	for _, ar := range args {
		ar.Apply{{.Title}}(a, &kids)
	}
	return html.Node{
		Tag:   "{{.Name}}",
		Attrs: a,
		Void:  true,
	}
}
{{else}}
// {{.Title}} creates an SVG {{.Name}} element
func {{.Title}}(args ...{{.ArgInterface}}) html.Node {
	a := default{{.StructName}}()
	var kids []html.Component
	for _, ar := range args {
		ar.Apply{{.Title}}(a, &kids)
	}
	return html.Node{
		Tag:   "{{.Name}}",
		Attrs: a,
		Kids:  kids,
	}
}
{{end}}

// Global applies global SVG attributes to {{.Name}}
func (g Global) Apply{{.Title}}(a *{{.StructName}}, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

{{range .Attributes}}// {{.Field}}Opt applies to {{$.Title}}
func (o {{.Field}}Opt) Apply{{$.Title}}(a *{{$.StructName}}, _ *[]html.Component) {
	{{if eq .Type "bool"}}a.{{.Field}} = true{{else}}a.{{.Field}} = o.v{{end}}
}

{{end}}
// WriteAttrs writes the SVG attributes to the string builder
func (a *{{.StructName}}) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal){{range .Attributes}}
	{{if eq .Type "bool"}}if a.{{.Field}} {
		SvgBoolAttr(sb, "{{.Attr}}")
	}{{else}}if a.{{.Field}} != "" {
		SvgAttr(sb, "{{.Attr}}", a.{{.Field}})
	}{{end}}{{end}}
}
`
