// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// MarkerAttrs holds the attributes for the marker SVG element
type MarkerAttrs struct {
	SvgGlobal    SvgGlobalAttrs
	MarkerHeight string
	MarkerUnits  string
	MarkerWidth  string
	Orient       string
	RefX         string
	RefY         string
	ViewBox      string
}

// MarkerArg interface for marker element arguments
type MarkerArg interface {
	applyMarker(*MarkerAttrs, *[]html.Component)
}

// defaultMarkerAttrs creates default attributes for marker
func defaultMarkerAttrs() *MarkerAttrs {
	return &MarkerAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Marker creates an SVG marker element
func Marker(args ...MarkerArg) html.Node {
	a := defaultMarkerAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyMarker(a, &kids)
	}
	return html.Node{
		Tag:   "marker",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to marker
func (g Global) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// MarkerHeightOpt applies to Marker
func (o MarkerHeightOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.MarkerHeight = o.v
}

// MarkerUnitsOpt applies to Marker
func (o MarkerUnitsOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.MarkerUnits = o.v
}

// MarkerWidthOpt applies to Marker
func (o MarkerWidthOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.MarkerWidth = o.v
}

// OrientOpt applies to Marker
func (o OrientOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.Orient = o.v
}

// RefXOpt applies to Marker
func (o RefXOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.RefX = o.v
}

// RefYOpt applies to Marker
func (o RefYOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.RefY = o.v
}

// ViewBoxOpt applies to Marker
func (o ViewBoxOpt) applyMarker(a *MarkerAttrs, _ *[]html.Component) {
	a.ViewBox = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *MarkerAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.MarkerHeight != "" {
		SvgAttr(sb, "markerHeight", a.MarkerHeight)
	}
	if a.MarkerUnits != "" {
		SvgAttr(sb, "markerUnits", a.MarkerUnits)
	}
	if a.MarkerWidth != "" {
		SvgAttr(sb, "markerWidth", a.MarkerWidth)
	}
	if a.Orient != "" {
		SvgAttr(sb, "orient", a.Orient)
	}
	if a.RefX != "" {
		SvgAttr(sb, "refX", a.RefX)
	}
	if a.RefY != "" {
		SvgAttr(sb, "refY", a.RefY)
	}
	if a.ViewBox != "" {
		SvgAttr(sb, "viewBox", a.ViewBox)
	}
}
