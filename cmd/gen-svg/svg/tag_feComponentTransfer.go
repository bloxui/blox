// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeComponentTransferAttrs holds the attributes for the feComponentTransfer SVG element
type FeComponentTransferAttrs struct {
	SvgGlobal SvgGlobalAttrs
	In        string
}

// FeComponentTransferArg interface for feComponentTransfer element arguments
type FeComponentTransferArg interface {
	applyFeComponentTransfer(*FeComponentTransferAttrs, *[]html.Component)
}

// defaultFeComponentTransferAttrs creates default attributes for feComponentTransfer
func defaultFeComponentTransferAttrs() *FeComponentTransferAttrs {
	return &FeComponentTransferAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeComponentTransfer creates an SVG feComponentTransfer element
func FeComponentTransfer(args ...FeComponentTransferArg) html.Node {
	a := defaultFeComponentTransferAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeComponentTransfer(a, &kids)
	}
	return html.Node{
		Tag:   "feComponentTransfer",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feComponentTransfer
func (g Global) applyFeComponentTransfer(a *FeComponentTransferAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeComponentTransfer
func (o InOpt) applyFeComponentTransfer(a *FeComponentTransferAttrs, _ *[]html.Component) {
	a.In = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeComponentTransferAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
}
