// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// TextPathAttrs holds the attributes for the textPath SVG element
type TextPathAttrs struct {
	SvgGlobal   SvgGlobalAttrs
	Href        string
	Method      string
	Spacing     string
	StartOffset string
}

// TextPathArg interface for textPath element arguments
type TextPathArg interface {
	applyTextPath(*TextPathAttrs, *[]html.Component)
}

// defaultTextPathAttrs creates default attributes for textPath
func defaultTextPathAttrs() *TextPathAttrs {
	return &TextPathAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// TextPath creates an SVG textPath element
func TextPath(args ...TextPathArg) html.Node {
	a := defaultTextPathAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyTextPath(a, &kids)
	}
	return html.Node{
		Tag:   "textPath",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to textPath
func (g Global) applyTextPath(a *TextPathAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// HrefOpt applies to TextPath
func (o HrefOpt) applyTextPath(a *TextPathAttrs, _ *[]html.Component) {
	a.Href = o.v
}

// MethodOpt applies to TextPath
func (o MethodOpt) applyTextPath(a *TextPathAttrs, _ *[]html.Component) {
	a.Method = o.v
}

// SpacingOpt applies to TextPath
func (o SpacingOpt) applyTextPath(a *TextPathAttrs, _ *[]html.Component) {
	a.Spacing = o.v
}

// StartOffsetOpt applies to TextPath
func (o StartOffsetOpt) applyTextPath(a *TextPathAttrs, _ *[]html.Component) {
	a.StartOffset = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *TextPathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Href != "" {
		SvgAttr(sb, "href", a.Href)
	}
	if a.Method != "" {
		SvgAttr(sb, "method", a.Method)
	}
	if a.Spacing != "" {
		SvgAttr(sb, "spacing", a.Spacing)
	}
	if a.StartOffset != "" {
		SvgAttr(sb, "startOffset", a.StartOffset)
	}
}
