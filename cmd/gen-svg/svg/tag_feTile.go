// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// FeTileAttrs holds the attributes for the feTile SVG element
type FeTileAttrs struct {
	SvgGlobal SvgGlobalAttrs
	In        string
}

// FeTileArg interface for feTile element arguments
type FeTileArg interface {
	applyFeTile(*FeTileAttrs, *[]html.Component)
}

// defaultFeTileAttrs creates default attributes for feTile
func defaultFeTileAttrs() *FeTileAttrs {
	return &FeTileAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeTile creates an SVG feTile element
func FeTile(args ...FeTileArg) html.Node {
	a := defaultFeTileAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyFeTile(a, &kids)
	}
	return html.Node{
		Tag:   "feTile",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feTile
func (g Global) applyFeTile(a *FeTileAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeTile
func (o InOpt) applyFeTile(a *FeTileAttrs, _ *[]html.Component) {
	a.In = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeTileAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
}
