// Code generated by gen-svg; DO NOT EDIT.

package svg

import (
	"strings"

	"github.com/plainkit/html"
)

// RectAttrs holds the attributes for the rect SVG element
type RectAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Height    string
	Rx        string
	Ry        string
	Width     string
	X         string
	Y         string
}

// RectArg interface for rect element arguments
type RectArg interface {
	applyRect(*RectAttrs, *[]html.Component)
}

// defaultRectAttrs creates default attributes for rect
func defaultRectAttrs() *RectAttrs {
	return &RectAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Rect creates an SVG rect element (self-closing)
func Rect(args ...RectArg) html.Node {
	a := defaultRectAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.applyRect(a, &kids)
	}
	return html.Node{
		Tag:   "rect",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to rect
func (g Global) applyRect(a *RectAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// HeightOpt applies to Rect
func (o HeightOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Height = o.v
}

// RxOpt applies to Rect
func (o RxOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Rx = o.v
}

// RyOpt applies to Rect
func (o RyOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Ry = o.v
}

// WidthOpt applies to Rect
func (o WidthOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Width = o.v
}

// XOpt applies to Rect
func (o XOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.X = o.v
}

// YOpt applies to Rect
func (o YOpt) applyRect(a *RectAttrs, _ *[]html.Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *RectAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Height != "" {
		SvgAttr(sb, "height", a.Height)
	}
	if a.Rx != "" {
		SvgAttr(sb, "rx", a.Rx)
	}
	if a.Ry != "" {
		SvgAttr(sb, "ry", a.Ry)
	}
	if a.Width != "" {
		SvgAttr(sb, "width", a.Width)
	}
	if a.X != "" {
		SvgAttr(sb, "x", a.X)
	}
	if a.Y != "" {
		SvgAttr(sb, "y", a.Y)
	}
}
