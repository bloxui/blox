package generator

const globalTemplate = `// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgGlobalAttrs represents global SVG attributes that can be applied to any SVG element
type SvgGlobalAttrs struct {
	// Embed HTML global attributes for cross-compatibility
	html.GlobalAttrs

	// SVG-specific global attributes (excluding HTML globals to prevent duplicates)
{{range .Attributes}}	{{.Field}} {{.GoType}}
{{end}}}

// Global represents a global SVG attribute option
type Global struct {
	fn func(*SvgGlobalAttrs)
}

// do applies the global attribute option
func (g Global) do(attrs *SvgGlobalAttrs) {
	g.fn(attrs)
}

{{range .Attributes}}{{if eq .Type "bool"}}// A{{.Field}} sets the {{.Attr}} attribute
func A{{.Field}}() Global {
	return Global{func(g *SvgGlobalAttrs) { g.{{.Field}} = true }}
}

{{else}}// A{{.Field}} sets the {{.Attr}} attribute
func A{{.Field}}(v {{.GoType}}) Global {
	return Global{func(g *SvgGlobalAttrs) { g.{{.Field}} = v }}
}

{{end}}{{end}}
// WriteSvgGlobal writes global SVG attributes to the string builder
func WriteSvgGlobal(sb *strings.Builder, attrs *SvgGlobalAttrs) {
	// Write embedded HTML global attributes first
	html.WriteGlobal(sb, &attrs.GlobalAttrs)

	// Write SVG-specific global attributes
{{range .Attributes}}{{if eq .Type "bool"}}	if attrs.{{.Field}} {
		SvgBoolAttr(sb, "{{.Attr}}")
	}
{{else}}	if attrs.{{.Field}} != "" {
		SvgAttr(sb, "{{.Attr}}", attrs.{{.Field}})
	}
{{end}}{{end}}}

// SvgAttr writes a standard SVG attribute
func SvgAttr(sb *strings.Builder, name, value string) {
	sb.WriteString(" ")
	sb.WriteString(name)
	sb.WriteString("=\"")
	sb.WriteString(value)
	sb.WriteString("\"")
}

// SvgBoolAttr writes a boolean SVG attribute
func SvgBoolAttr(sb *strings.Builder, name string) {
	sb.WriteString(" ")
	sb.WriteString(name)
}
`
