package generator

const tagTemplate = `// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// Svg{{.StructName}} holds the attributes for the {{.Name}} SVG element
type Svg{{.StructName}} struct {
	GlobalAttrs{{range .Attributes}}
	{{.Field}} {{.GoType}}{{end}}
}

// Svg{{.ArgInterface}} interface for {{.Name}} element arguments
type Svg{{.ArgInterface}} interface {
	apply{{.Title}}(*Svg{{.StructName}}, *[]Component)
}

// defaultSvg{{.StructName}} creates default attributes for {{.Name}}
func defaultSvg{{.StructName}}() *Svg{{.StructName}} {
	return &Svg{{.StructName}}{
		GlobalAttrs: GlobalAttrs{},
	}
}

{{if .Void}}
// Svg{{.Title}} creates an SVG {{.Name}} element (self-closing)
func Svg{{.Title}}(args ...Svg{{.ArgInterface}}) Node {
	a := defaultSvg{{.StructName}}()
	var kids []Component
	for _, ar := range args {
		ar.apply{{.Title}}(a, &kids)
	}
	return Node{
		Tag:   "{{.Name}}",
		Attrs: a,
		Void:  true,
	}
}
{{else}}
// Svg{{.Title}} creates an SVG {{.Name}} element
func Svg{{.Title}}(args ...Svg{{.ArgInterface}}) Node {
	a := defaultSvg{{.StructName}}()
	var kids []Component
	for _, ar := range args {
		ar.apply{{.Title}}(a, &kids)
	}
	return Node{
		Tag:   "{{.Name}}",
		Attrs: a,
		Kids:  kids,
	}
}
{{end}}

// Global applies global SVG attributes to {{.Name}}
func (g Global) apply{{.Title}}(a *Svg{{.StructName}}, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

{{range .Attributes}}// {{.Field}}Opt applies to {{$.Title}}
func (o {{.Field}}Opt) apply{{$.Title}}(a *Svg{{$.StructName}}, _ *[]Component) {
	{{if eq .Type "bool"}}a.{{.Field}} = true{{else}}a.{{.Field}} = o.v{{end}}
}

{{end}}
// WriteAttrs writes the SVG attributes to the string builder
func (a *Svg{{.StructName}}) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs){{range .Attributes}}
	{{if eq .Type "bool"}}if a.{{.Field}} {
		BoolAttr(sb, "{{.Attr}}")
	}{{else}}if a.{{.Field}} != "" {
		Attr(sb, "{{.Attr}}", a.{{.Field}})
	}{{end}}{{end}}
}
`
