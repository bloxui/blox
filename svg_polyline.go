// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// PolylineAttrs holds the attributes for the polyline SVG element
type PolylineAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Points    string
}

// PolylineArg interface for polyline element arguments
type PolylineArg interface {
	ApplyPolyline(*PolylineAttrs, *[]html.Component)
}

// defaultPolylineAttrs creates default attributes for polyline
func defaultPolylineAttrs() *PolylineAttrs {
	return &PolylineAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Polyline creates an SVG polyline element (self-closing)
func Polyline(args ...PolylineArg) html.Node {
	a := defaultPolylineAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyPolyline(a, &kids)
	}
	return html.Node{
		Tag:   "polyline",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to polyline
func (g Global) ApplyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// PointsOpt applies to Polyline
func (o PointsOpt) ApplyPolyline(a *PolylineAttrs, _ *[]html.Component) {
	a.Points = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *PolylineAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Points != "" {
		SvgAttr(sb, "points", a.Points)
	}
}
