// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgPolylineAttrs holds the attributes for the polyline SVG element
type SvgPolylineAttrs struct {
	GlobalAttrs
	Points string
}

// SvgPolylineArg interface for polyline element arguments
type SvgPolylineArg interface {
	applyPolyline(*SvgPolylineAttrs, *[]Component)
}

// defaultSvgPolylineAttrs creates default attributes for polyline
func defaultSvgPolylineAttrs() *SvgPolylineAttrs {
	return &SvgPolylineAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgPolyline creates an SVG polyline element (self-closing)
func SvgPolyline(args ...SvgPolylineArg) Node {
	a := defaultSvgPolylineAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyPolyline(a, &kids)
	}
	return Node{
		Tag:   "polyline",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to polyline
func (g Global) applyPolyline(a *SvgPolylineAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// PointsOpt applies to Polyline
func (o PointsOpt) applyPolyline(a *SvgPolylineAttrs, _ *[]Component) {
	a.Points = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgPolylineAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Points != "" {
		Attr(sb, "points", a.Points)
	}
}
