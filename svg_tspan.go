// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgTspanAttrs holds the attributes for the tspan SVG element
type SvgTspanAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	Dx                         string
	Dy                         string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LengthAdjust               string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	Rotate                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	TextLength                 string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgTspanArg interface for tspan element arguments
type SvgTspanArg interface {
	ApplyTspan(*SvgTspanAttrs, *[]Component)
}

// defaultSvgTspanAttrs creates default attributes for tspan
func defaultSvgTspanAttrs() *SvgTspanAttrs {
	return &SvgTspanAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgTspan creates an SVG tspan element
func SvgTspan(args ...SvgTspanArg) Node {
	a := defaultSvgTspanAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyTspan(a, &kids)
	}
	return Node{
		Tag:   "tspan",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to tspan
func (g Global) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Tspan
func (o AlignmentBaselineOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Tspan
func (o BaselineShiftOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Tspan
func (o ClipOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Tspan
func (o ClipPathOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Tspan
func (o ClipRuleOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Tspan
func (o ColorOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Tspan
func (o ColorInterpolationOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Tspan
func (o ColorInterpolationFiltersOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Tspan
func (o ColorProfileOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Tspan
func (o ColorRenderingOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Tspan
func (o CursorOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Tspan
func (o DirectionOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Tspan
func (o DisplayOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Tspan
func (o DominantBaselineOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// DxOpt applies to Tspan
func (o DxOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Dx = o.v
}

// DyOpt applies to Tspan
func (o DyOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Dy = o.v
}

// EnableBackgroundOpt applies to Tspan
func (o EnableBackgroundOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Tspan
func (o ExternalResourcesRequiredOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Tspan
func (o FillOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Tspan
func (o FillOpacityOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Tspan
func (o FillRuleOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Tspan
func (o FilterOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Tspan
func (o FloodColorOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Tspan
func (o FloodOpacityOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Tspan
func (o FocusHighlightOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Tspan
func (o FocusableOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Focusable = o.v
}

// FontFamilyOpt applies to Tspan
func (o FontFamilyOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Tspan
func (o FontSizeOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Tspan
func (o FontSizeAdjustOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Tspan
func (o FontStretchOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Tspan
func (o FontStyleOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Tspan
func (o FontVariantOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Tspan
func (o FontWeightOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Tspan
func (o GlyphOrientationHorizontalOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Tspan
func (o GlyphOrientationVerticalOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Tspan
func (o ImageRenderingOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Tspan
func (o KerningOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LengthAdjustOpt applies to Tspan
func (o LengthAdjustOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.LengthAdjust = o.v
}

// LetterSpacingOpt applies to Tspan
func (o LetterSpacingOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Tspan
func (o LightingColorOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Tspan
func (o MarkerEndOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Tspan
func (o MarkerMidOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Tspan
func (o MarkerStartOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Tspan
func (o MaskOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Tspan
func (o NavDownOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Tspan
func (o NavDownLeftOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Tspan
func (o NavDownRightOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Tspan
func (o NavLeftOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Tspan
func (o NavNextOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Tspan
func (o NavPrevOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Tspan
func (o NavRightOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Tspan
func (o NavUpOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Tspan
func (o NavUpLeftOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Tspan
func (o NavUpRightOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Tspan
func (o OpacityOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Tspan
func (o OverflowOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Tspan
func (o PointerEventsOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Tspan
func (o RequiredExtensionsOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Tspan
func (o RequiredFeaturesOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Tspan
func (o RequiredFontsOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Tspan
func (o RequiredFormatsOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// RotateOpt applies to Tspan
func (o RotateOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Rotate = o.v
}

// ShapeRenderingOpt applies to Tspan
func (o ShapeRenderingOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Tspan
func (o StopColorOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Tspan
func (o StopOpacityOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Tspan
func (o StrokeOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Tspan
func (o StrokeDasharrayOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Tspan
func (o StrokeDashoffsetOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Tspan
func (o StrokeLinecapOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Tspan
func (o StrokeLinejoinOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Tspan
func (o StrokeMiterlimitOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Tspan
func (o StrokeOpacityOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Tspan
func (o StrokeWidthOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Tspan
func (o SystemLanguageOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Tspan
func (o TextAnchorOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Tspan
func (o TextDecorationOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Tspan
func (o TextRenderingOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TextLengthOpt applies to Tspan
func (o TextLengthOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.TextLength = o.v
}

// UnicodeBidiOpt applies to Tspan
func (o UnicodeBidiOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Tspan
func (o VisibilityOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Tspan
func (o WordSpacingOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Tspan
func (o WritingModeOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to Tspan
func (o XOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Tspan
func (o YOpt) ApplyTspan(a *SvgTspanAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgTspanAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.Dx != "" {
		Attr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		Attr(sb, "dy", a.Dy)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable != "" {
		Attr(sb, "focusable", a.Focusable)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LengthAdjust != "" {
		Attr(sb, "lengthAdjust", a.LengthAdjust)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Rotate != "" {
		Attr(sb, "rotate", a.Rotate)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.TextLength != "" {
		Attr(sb, "textLength", a.TextLength)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
