// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgGlyphRefAttrs holds the attributes for the glyphRef SVG element
type SvgGlyphRefAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	Dx                         string
	Dy                         string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	Format                     string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	GlyphRef                   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgGlyphRefArg interface for glyphRef element arguments
type SvgGlyphRefArg interface {
	applyGlyphRef(*SvgGlyphRefAttrs, *[]Component)
}

// defaultSvgGlyphRefAttrs creates default attributes for glyphRef
func defaultSvgGlyphRefAttrs() *SvgGlyphRefAttrs {
	return &SvgGlyphRefAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgGlyphRef creates an SVG glyphRef element
func SvgGlyphRef(args ...SvgGlyphRefArg) Node {
	a := defaultSvgGlyphRefAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyGlyphRef(a, &kids)
	}
	return Node{
		Tag:   "glyphRef",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to glyphRef
func (g Global) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to GlyphRef
func (o AlignmentBaselineOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to GlyphRef
func (o BaselineShiftOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to GlyphRef
func (o ClipOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to GlyphRef
func (o ClipPathOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to GlyphRef
func (o ClipRuleOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to GlyphRef
func (o ColorOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to GlyphRef
func (o ColorInterpolationOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to GlyphRef
func (o ColorInterpolationFiltersOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to GlyphRef
func (o ColorProfileOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to GlyphRef
func (o ColorRenderingOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to GlyphRef
func (o CursorOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to GlyphRef
func (o DirectionOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to GlyphRef
func (o DisplayOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to GlyphRef
func (o DominantBaselineOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// DxOpt applies to GlyphRef
func (o DxOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Dx = o.v
}

// DyOpt applies to GlyphRef
func (o DyOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Dy = o.v
}

// EnableBackgroundOpt applies to GlyphRef
func (o EnableBackgroundOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to GlyphRef
func (o FillOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to GlyphRef
func (o FillOpacityOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to GlyphRef
func (o FillRuleOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to GlyphRef
func (o FilterOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to GlyphRef
func (o FloodColorOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to GlyphRef
func (o FloodOpacityOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to GlyphRef
func (o FontFamilyOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to GlyphRef
func (o FontSizeOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to GlyphRef
func (o FontSizeAdjustOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to GlyphRef
func (o FontStretchOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to GlyphRef
func (o FontStyleOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to GlyphRef
func (o FontVariantOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to GlyphRef
func (o FontWeightOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// FormatOpt applies to GlyphRef
func (o FormatOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Format = o.v
}

// GlyphOrientationHorizontalOpt applies to GlyphRef
func (o GlyphOrientationHorizontalOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to GlyphRef
func (o GlyphOrientationVerticalOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// GlyphRefOpt applies to GlyphRef
func (o GlyphRefOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.GlyphRef = o.v
}

// ImageRenderingOpt applies to GlyphRef
func (o ImageRenderingOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to GlyphRef
func (o KerningOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to GlyphRef
func (o LetterSpacingOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to GlyphRef
func (o LightingColorOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to GlyphRef
func (o MarkerEndOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to GlyphRef
func (o MarkerMidOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to GlyphRef
func (o MarkerStartOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to GlyphRef
func (o MaskOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to GlyphRef
func (o OpacityOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to GlyphRef
func (o OverflowOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to GlyphRef
func (o PointerEventsOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ShapeRenderingOpt applies to GlyphRef
func (o ShapeRenderingOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to GlyphRef
func (o StopColorOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to GlyphRef
func (o StopOpacityOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to GlyphRef
func (o StrokeOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to GlyphRef
func (o StrokeDasharrayOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to GlyphRef
func (o StrokeDashoffsetOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to GlyphRef
func (o StrokeLinecapOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to GlyphRef
func (o StrokeLinejoinOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to GlyphRef
func (o StrokeMiterlimitOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to GlyphRef
func (o StrokeOpacityOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to GlyphRef
func (o StrokeWidthOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to GlyphRef
func (o TextAnchorOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to GlyphRef
func (o TextDecorationOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to GlyphRef
func (o TextRenderingOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to GlyphRef
func (o UnicodeBidiOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to GlyphRef
func (o VisibilityOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to GlyphRef
func (o WordSpacingOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to GlyphRef
func (o WritingModeOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to GlyphRef
func (o XOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to GlyphRef
func (o YOpt) applyGlyphRef(a *SvgGlyphRefAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgGlyphRefAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.Dx != "" {
		Attr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		Attr(sb, "dy", a.Dy)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.Format != "" {
		Attr(sb, "format", a.Format)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.GlyphRef != "" {
		Attr(sb, "glyphRef", a.GlyphRef)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
