// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFilterAttrs holds the attributes for the filter SVG element
type SvgFilterAttrs struct {
	GlobalAttrs
	FilterUnits    string
	Height         string
	PrimitiveUnits string
	Width          string
	X              string
	Y              string
}

// SvgFilterArg interface for filter element arguments
type SvgFilterArg interface {
	applyFilter(*SvgFilterAttrs, *[]Component)
}

// defaultSvgFilterAttrs creates default attributes for filter
func defaultSvgFilterAttrs() *SvgFilterAttrs {
	return &SvgFilterAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFilter creates an SVG filter element
func SvgFilter(args ...SvgFilterArg) Node {
	a := defaultSvgFilterAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFilter(a, &kids)
	}
	return Node{
		Tag:   "filter",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to filter
func (g Global) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// FilterUnitsOpt applies to Filter
func (o FilterUnitsOpt) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	a.FilterUnits = o.v
}

// HeightOpt applies to Filter
func (o HeightOpt) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	a.Height = o.v
}

// PrimitiveUnitsOpt applies to Filter
func (o PrimitiveUnitsOpt) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	a.PrimitiveUnits = o.v
}

// WidthOpt applies to Filter
func (o WidthOpt) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	a.Width = o.v
}

// XOpt applies to Filter
func (o XOpt) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Filter
func (o YOpt) applyFilter(a *SvgFilterAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFilterAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.FilterUnits != "" {
		Attr(sb, "filterUnits", a.FilterUnits)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.PrimitiveUnits != "" {
		Attr(sb, "primitiveUnits", a.PrimitiveUnits)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
