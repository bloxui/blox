// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeSpotLightAttrs holds the attributes for the feSpotLight SVG element
type SvgFeSpotLightAttrs struct {
	GlobalAttrs
	LimitingConeAngle string
	PointsAtX         string
	PointsAtY         string
	PointsAtZ         string
	SpecularExponent  string
	X                 string
	Y                 string
	Z                 string
}

// SvgFeSpotLightArg interface for feSpotLight element arguments
type SvgFeSpotLightArg interface {
	ApplyFeSpotLight(*SvgFeSpotLightAttrs, *[]Component)
}

// defaultSvgFeSpotLightAttrs creates default attributes for feSpotLight
func defaultSvgFeSpotLightAttrs() *SvgFeSpotLightAttrs {
	return &SvgFeSpotLightAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeSpotLight creates an SVG feSpotLight element
func SvgFeSpotLight(args ...SvgFeSpotLightArg) Node {
	a := defaultSvgFeSpotLightAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFeSpotLight(a, &kids)
	}
	return Node{
		Tag:   "feSpotLight",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feSpotLight
func (g Global) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// LimitingConeAngleOpt applies to FeSpotLight
func (o LimitingConeAngleOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.LimitingConeAngle = o.v
}

// PointsAtXOpt applies to FeSpotLight
func (o PointsAtXOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.PointsAtX = o.v
}

// PointsAtYOpt applies to FeSpotLight
func (o PointsAtYOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.PointsAtY = o.v
}

// PointsAtZOpt applies to FeSpotLight
func (o PointsAtZOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.PointsAtZ = o.v
}

// SpecularExponentOpt applies to FeSpotLight
func (o SpecularExponentOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.SpecularExponent = o.v
}

// XOpt applies to FeSpotLight
func (o XOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FeSpotLight
func (o YOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.Y = o.v
}

// ZOpt applies to FeSpotLight
func (o ZOpt) ApplyFeSpotLight(a *SvgFeSpotLightAttrs, _ *[]Component) {
	a.Z = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeSpotLightAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.LimitingConeAngle != "" {
		Attr(sb, "limitingConeAngle", a.LimitingConeAngle)
	}
	if a.PointsAtX != "" {
		Attr(sb, "pointsAtX", a.PointsAtX)
	}
	if a.PointsAtY != "" {
		Attr(sb, "pointsAtY", a.PointsAtY)
	}
	if a.PointsAtZ != "" {
		Attr(sb, "pointsAtZ", a.PointsAtZ)
	}
	if a.SpecularExponent != "" {
		Attr(sb, "specularExponent", a.SpecularExponent)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
	if a.Z != "" {
		Attr(sb, "z", a.Z)
	}
}
