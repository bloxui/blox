// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgPolygonAttrs holds the attributes for the polygon SVG element
type SvgPolygonAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PathLength                 string
	PointerEvents              string
	Points                     string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgPolygonArg interface for polygon element arguments
type SvgPolygonArg interface {
	applyPolygon(*SvgPolygonAttrs, *[]Component)
}

// defaultSvgPolygonAttrs creates default attributes for polygon
func defaultSvgPolygonAttrs() *SvgPolygonAttrs {
	return &SvgPolygonAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgPolygon creates an SVG polygon element
func SvgPolygon(args ...SvgPolygonArg) Node {
	a := defaultSvgPolygonAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyPolygon(a, &kids)
	}
	return Node{
		Tag:   "polygon",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to polygon
func (g Global) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Polygon
func (o AlignmentBaselineOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Polygon
func (o BaselineShiftOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Polygon
func (o ClipOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Polygon
func (o ClipPathOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Polygon
func (o ClipRuleOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Polygon
func (o ColorOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Polygon
func (o ColorInterpolationOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Polygon
func (o ColorInterpolationFiltersOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Polygon
func (o ColorProfileOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Polygon
func (o ColorRenderingOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Polygon
func (o CursorOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Polygon
func (o DirectionOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Polygon
func (o DisplayOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Polygon
func (o DominantBaselineOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Polygon
func (o EnableBackgroundOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Polygon
func (o ExternalResourcesRequiredOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Polygon
func (o FillOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Polygon
func (o FillOpacityOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Polygon
func (o FillRuleOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Polygon
func (o FilterOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Polygon
func (o FloodColorOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Polygon
func (o FloodOpacityOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Polygon
func (o FocusHighlightOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Polygon
func (o FocusableOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Focusable = o.v
}

// FontFamilyOpt applies to Polygon
func (o FontFamilyOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Polygon
func (o FontSizeOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Polygon
func (o FontSizeAdjustOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Polygon
func (o FontStretchOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Polygon
func (o FontStyleOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Polygon
func (o FontVariantOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Polygon
func (o FontWeightOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Polygon
func (o GlyphOrientationHorizontalOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Polygon
func (o GlyphOrientationVerticalOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Polygon
func (o ImageRenderingOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Polygon
func (o KerningOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Polygon
func (o LetterSpacingOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Polygon
func (o LightingColorOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Polygon
func (o MarkerEndOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Polygon
func (o MarkerMidOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Polygon
func (o MarkerStartOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Polygon
func (o MaskOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Polygon
func (o NavDownOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Polygon
func (o NavDownLeftOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Polygon
func (o NavDownRightOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Polygon
func (o NavLeftOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Polygon
func (o NavNextOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Polygon
func (o NavPrevOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Polygon
func (o NavRightOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Polygon
func (o NavUpOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Polygon
func (o NavUpLeftOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Polygon
func (o NavUpRightOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Polygon
func (o OpacityOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Polygon
func (o OverflowOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PathLengthOpt applies to Polygon
func (o PathLengthOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.PathLength = o.v
}

// PointerEventsOpt applies to Polygon
func (o PointerEventsOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// PointsOpt applies to Polygon
func (o PointsOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Points = o.v
}

// RequiredExtensionsOpt applies to Polygon
func (o RequiredExtensionsOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Polygon
func (o RequiredFeaturesOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Polygon
func (o RequiredFontsOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Polygon
func (o RequiredFormatsOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to Polygon
func (o ShapeRenderingOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Polygon
func (o StopColorOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Polygon
func (o StopOpacityOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Polygon
func (o StrokeOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Polygon
func (o StrokeDasharrayOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Polygon
func (o StrokeDashoffsetOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Polygon
func (o StrokeLinecapOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Polygon
func (o StrokeLinejoinOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Polygon
func (o StrokeMiterlimitOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Polygon
func (o StrokeOpacityOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Polygon
func (o StrokeWidthOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Polygon
func (o SystemLanguageOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Polygon
func (o TextAnchorOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Polygon
func (o TextDecorationOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Polygon
func (o TextRenderingOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Polygon
func (o TransformOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Polygon
func (o UnicodeBidiOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Polygon
func (o VisibilityOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Polygon
func (o WordSpacingOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Polygon
func (o WritingModeOpt) applyPolygon(a *SvgPolygonAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgPolygonAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable != "" {
		Attr(sb, "focusable", a.Focusable)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PathLength != "" {
		Attr(sb, "pathLength", a.PathLength)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Points != "" {
		Attr(sb, "points", a.Points)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
