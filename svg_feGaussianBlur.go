// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeGaussianBlurAttrs holds the attributes for the feGaussianBlur SVG element
type SvgFeGaussianBlurAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EdgeMode                   string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	In                         string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	Result                     string
	ShapeRendering             string
	StdDeviation               string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgFeGaussianBlurArg interface for feGaussianBlur element arguments
type SvgFeGaussianBlurArg interface {
	ApplyFeGaussianBlur(*SvgFeGaussianBlurAttrs, *[]Component)
}

// defaultSvgFeGaussianBlurAttrs creates default attributes for feGaussianBlur
func defaultSvgFeGaussianBlurAttrs() *SvgFeGaussianBlurAttrs {
	return &SvgFeGaussianBlurAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeGaussianBlur creates an SVG feGaussianBlur element
func SvgFeGaussianBlur(args ...SvgFeGaussianBlurArg) Node {
	a := defaultSvgFeGaussianBlurAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFeGaussianBlur(a, &kids)
	}
	return Node{
		Tag:   "feGaussianBlur",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feGaussianBlur
func (g Global) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to FeGaussianBlur
func (o AlignmentBaselineOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeGaussianBlur
func (o BaselineShiftOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeGaussianBlur
func (o ClipOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeGaussianBlur
func (o ClipPathOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeGaussianBlur
func (o ClipRuleOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeGaussianBlur
func (o ColorOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeGaussianBlur
func (o ColorInterpolationOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeGaussianBlur
func (o ColorInterpolationFiltersOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeGaussianBlur
func (o ColorProfileOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeGaussianBlur
func (o ColorRenderingOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeGaussianBlur
func (o CursorOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeGaussianBlur
func (o DirectionOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeGaussianBlur
func (o DisplayOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeGaussianBlur
func (o DominantBaselineOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EdgeModeOpt applies to FeGaussianBlur
func (o EdgeModeOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.EdgeMode = o.v
}

// EnableBackgroundOpt applies to FeGaussianBlur
func (o EnableBackgroundOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeGaussianBlur
func (o FillOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeGaussianBlur
func (o FillOpacityOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeGaussianBlur
func (o FillRuleOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeGaussianBlur
func (o FilterOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeGaussianBlur
func (o FloodColorOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeGaussianBlur
func (o FloodOpacityOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeGaussianBlur
func (o FontFamilyOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeGaussianBlur
func (o FontSizeOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeGaussianBlur
func (o FontSizeAdjustOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeGaussianBlur
func (o FontStretchOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeGaussianBlur
func (o FontStyleOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeGaussianBlur
func (o FontVariantOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeGaussianBlur
func (o FontWeightOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeGaussianBlur
func (o GlyphOrientationHorizontalOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeGaussianBlur
func (o GlyphOrientationVerticalOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeGaussianBlur
func (o HeightOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeGaussianBlur
func (o ImageRenderingOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// InOpt applies to FeGaussianBlur
func (o InOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.In = o.v
}

// KerningOpt applies to FeGaussianBlur
func (o KerningOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeGaussianBlur
func (o LetterSpacingOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeGaussianBlur
func (o LightingColorOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeGaussianBlur
func (o MarkerEndOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeGaussianBlur
func (o MarkerMidOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeGaussianBlur
func (o MarkerStartOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeGaussianBlur
func (o MaskOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeGaussianBlur
func (o OpacityOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to FeGaussianBlur
func (o OverflowOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeGaussianBlur
func (o PointerEventsOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ResultOpt applies to FeGaussianBlur
func (o ResultOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeGaussianBlur
func (o ShapeRenderingOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StdDeviationOpt applies to FeGaussianBlur
func (o StdDeviationOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StdDeviation = o.v
}

// StopColorOpt applies to FeGaussianBlur
func (o StopColorOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeGaussianBlur
func (o StopOpacityOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeGaussianBlur
func (o StrokeOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeGaussianBlur
func (o StrokeDasharrayOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeGaussianBlur
func (o StrokeDashoffsetOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeGaussianBlur
func (o StrokeLinecapOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeGaussianBlur
func (o StrokeLinejoinOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeGaussianBlur
func (o StrokeMiterlimitOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeGaussianBlur
func (o StrokeOpacityOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeGaussianBlur
func (o StrokeWidthOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeGaussianBlur
func (o TextAnchorOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeGaussianBlur
func (o TextDecorationOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeGaussianBlur
func (o TextRenderingOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeGaussianBlur
func (o UnicodeBidiOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeGaussianBlur
func (o VisibilityOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeGaussianBlur
func (o WidthOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeGaussianBlur
func (o WordSpacingOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeGaussianBlur
func (o WritingModeOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeGaussianBlur
func (o XOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FeGaussianBlur
func (o YOpt) ApplyFeGaussianBlur(a *SvgFeGaussianBlurAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeGaussianBlurAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EdgeMode != "" {
		Attr(sb, "edgeMode", a.EdgeMode)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Result != "" {
		Attr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StdDeviation != "" {
		Attr(sb, "stdDeviation", a.StdDeviation)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
