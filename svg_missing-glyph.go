// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgMissingGlyphAttrs holds the attributes for the missing-glyph SVG element
type SvgMissingGlyphAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	D                          string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	HorizAdvX                  string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	VertAdvY                   string
	VertOriginX                string
	VertOriginY                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgMissingGlyphArg interface for missing-glyph element arguments
type SvgMissingGlyphArg interface {
	applyMissingGlyph(*SvgMissingGlyphAttrs, *[]Component)
}

// defaultSvgMissingGlyphAttrs creates default attributes for missing-glyph
func defaultSvgMissingGlyphAttrs() *SvgMissingGlyphAttrs {
	return &SvgMissingGlyphAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgMissingGlyph creates an SVG missing-glyph element
func SvgMissingGlyph(args ...SvgMissingGlyphArg) Node {
	a := defaultSvgMissingGlyphAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyMissingGlyph(a, &kids)
	}
	return Node{
		Tag:   "missing-glyph",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to missing-glyph
func (g Global) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to MissingGlyph
func (o AlignmentBaselineOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to MissingGlyph
func (o BaselineShiftOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to MissingGlyph
func (o ClipOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to MissingGlyph
func (o ClipPathOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to MissingGlyph
func (o ClipRuleOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to MissingGlyph
func (o ColorOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to MissingGlyph
func (o ColorInterpolationOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to MissingGlyph
func (o ColorInterpolationFiltersOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to MissingGlyph
func (o ColorProfileOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to MissingGlyph
func (o ColorRenderingOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to MissingGlyph
func (o CursorOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DOpt applies to MissingGlyph
func (o DOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.D = o.v
}

// DirectionOpt applies to MissingGlyph
func (o DirectionOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to MissingGlyph
func (o DisplayOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to MissingGlyph
func (o DominantBaselineOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to MissingGlyph
func (o EnableBackgroundOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to MissingGlyph
func (o FillOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to MissingGlyph
func (o FillOpacityOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to MissingGlyph
func (o FillRuleOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to MissingGlyph
func (o FilterOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to MissingGlyph
func (o FloodColorOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to MissingGlyph
func (o FloodOpacityOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to MissingGlyph
func (o FontFamilyOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to MissingGlyph
func (o FontSizeOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to MissingGlyph
func (o FontSizeAdjustOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to MissingGlyph
func (o FontStretchOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to MissingGlyph
func (o FontStyleOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to MissingGlyph
func (o FontVariantOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to MissingGlyph
func (o FontWeightOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to MissingGlyph
func (o GlyphOrientationHorizontalOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to MissingGlyph
func (o GlyphOrientationVerticalOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HorizAdvXOpt applies to MissingGlyph
func (o HorizAdvXOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.HorizAdvX = o.v
}

// ImageRenderingOpt applies to MissingGlyph
func (o ImageRenderingOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to MissingGlyph
func (o KerningOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to MissingGlyph
func (o LetterSpacingOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to MissingGlyph
func (o LightingColorOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to MissingGlyph
func (o MarkerEndOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to MissingGlyph
func (o MarkerMidOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to MissingGlyph
func (o MarkerStartOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to MissingGlyph
func (o MaskOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to MissingGlyph
func (o OpacityOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to MissingGlyph
func (o OverflowOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to MissingGlyph
func (o PointerEventsOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ShapeRenderingOpt applies to MissingGlyph
func (o ShapeRenderingOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to MissingGlyph
func (o StopColorOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to MissingGlyph
func (o StopOpacityOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to MissingGlyph
func (o StrokeOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to MissingGlyph
func (o StrokeDasharrayOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to MissingGlyph
func (o StrokeDashoffsetOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to MissingGlyph
func (o StrokeLinecapOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to MissingGlyph
func (o StrokeLinejoinOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to MissingGlyph
func (o StrokeMiterlimitOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to MissingGlyph
func (o StrokeOpacityOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to MissingGlyph
func (o StrokeWidthOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to MissingGlyph
func (o TextAnchorOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to MissingGlyph
func (o TextDecorationOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to MissingGlyph
func (o TextRenderingOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to MissingGlyph
func (o UnicodeBidiOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VertAdvYOpt applies to MissingGlyph
func (o VertAdvYOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.VertAdvY = o.v
}

// VertOriginXOpt applies to MissingGlyph
func (o VertOriginXOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.VertOriginX = o.v
}

// VertOriginYOpt applies to MissingGlyph
func (o VertOriginYOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.VertOriginY = o.v
}

// VisibilityOpt applies to MissingGlyph
func (o VisibilityOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to MissingGlyph
func (o WordSpacingOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to MissingGlyph
func (o WritingModeOpt) applyMissingGlyph(a *SvgMissingGlyphAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgMissingGlyphAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.D != "" {
		Attr(sb, "d", a.D)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.HorizAdvX != "" {
		Attr(sb, "horiz-adv-x", a.HorizAdvX)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.VertAdvY != "" {
		Attr(sb, "vert-adv-y", a.VertAdvY)
	}
	if a.VertOriginX != "" {
		Attr(sb, "vert-origin-x", a.VertOriginX)
	}
	if a.VertOriginY != "" {
		Attr(sb, "vert-origin-y", a.VertOriginY)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
