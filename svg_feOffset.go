// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeOffsetAttrs holds the attributes for the feOffset SVG element
type SvgFeOffsetAttrs struct {
	GlobalAttrs
	Dx string
	Dy string
}

// SvgFeOffsetArg interface for feOffset element arguments
type SvgFeOffsetArg interface {
	applyFeOffset(*SvgFeOffsetAttrs, *[]Component)
}

// defaultSvgFeOffsetAttrs creates default attributes for feOffset
func defaultSvgFeOffsetAttrs() *SvgFeOffsetAttrs {
	return &SvgFeOffsetAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeOffset creates an SVG feOffset element
func SvgFeOffset(args ...SvgFeOffsetArg) Node {
	a := defaultSvgFeOffsetAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeOffset(a, &kids)
	}
	return Node{
		Tag:   "feOffset",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feOffset
func (g Global) applyFeOffset(a *SvgFeOffsetAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// DxOpt applies to FeOffset
func (o DxOpt) applyFeOffset(a *SvgFeOffsetAttrs, _ *[]Component) {
	a.Dx = o.v
}

// DyOpt applies to FeOffset
func (o DyOpt) applyFeOffset(a *SvgFeOffsetAttrs, _ *[]Component) {
	a.Dy = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeOffsetAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Dx != "" {
		Attr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		Attr(sb, "dy", a.Dy)
	}
}
