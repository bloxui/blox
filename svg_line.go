// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgLineAttrs holds the attributes for the line SVG element
type SvgLineAttrs struct {
	GlobalAttrs
	X1 string
	X2 string
	Y1 string
	Y2 string
}

// SvgLineArg interface for line element arguments
type SvgLineArg interface {
	applyLine(*SvgLineAttrs, *[]Component)
}

// defaultSvgLineAttrs creates default attributes for line
func defaultSvgLineAttrs() *SvgLineAttrs {
	return &SvgLineAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgLine creates an SVG line element (self-closing)
func SvgLine(args ...SvgLineArg) Node {
	a := defaultSvgLineAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyLine(a, &kids)
	}
	return Node{
		Tag:   "line",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to line
func (g Global) applyLine(a *SvgLineAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// X1Opt applies to Line
func (o X1Opt) applyLine(a *SvgLineAttrs, _ *[]Component) {
	a.X1 = o.v
}

// X2Opt applies to Line
func (o X2Opt) applyLine(a *SvgLineAttrs, _ *[]Component) {
	a.X2 = o.v
}

// Y1Opt applies to Line
func (o Y1Opt) applyLine(a *SvgLineAttrs, _ *[]Component) {
	a.Y1 = o.v
}

// Y2Opt applies to Line
func (o Y2Opt) applyLine(a *SvgLineAttrs, _ *[]Component) {
	a.Y2 = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgLineAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.X1 != "" {
		Attr(sb, "x1", a.X1)
	}
	if a.X2 != "" {
		Attr(sb, "x2", a.X2)
	}
	if a.Y1 != "" {
		Attr(sb, "y1", a.Y1)
	}
	if a.Y2 != "" {
		Attr(sb, "y2", a.Y2)
	}
}
