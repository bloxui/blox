// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgEllipseAttrs holds the attributes for the ellipse SVG element
type SvgEllipseAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Cx                         string
	Cy                         string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PathLength                 string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	Rx                         string
	Ry                         string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgEllipseArg interface for ellipse element arguments
type SvgEllipseArg interface {
	applyEllipse(*SvgEllipseAttrs, *[]Component)
}

// defaultSvgEllipseAttrs creates default attributes for ellipse
func defaultSvgEllipseAttrs() *SvgEllipseAttrs {
	return &SvgEllipseAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgEllipse creates an SVG ellipse element
func SvgEllipse(args ...SvgEllipseArg) Node {
	a := defaultSvgEllipseAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyEllipse(a, &kids)
	}
	return Node{
		Tag:   "ellipse",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to ellipse
func (g Global) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Ellipse
func (o AlignmentBaselineOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Ellipse
func (o BaselineShiftOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Ellipse
func (o ClipOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Ellipse
func (o ClipPathOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Ellipse
func (o ClipRuleOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Ellipse
func (o ColorOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Ellipse
func (o ColorInterpolationOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Ellipse
func (o ColorInterpolationFiltersOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Ellipse
func (o ColorProfileOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Ellipse
func (o ColorRenderingOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Ellipse
func (o CursorOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// CxOpt applies to Ellipse
func (o CxOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Cx = o.v
}

// CyOpt applies to Ellipse
func (o CyOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Cy = o.v
}

// DirectionOpt applies to Ellipse
func (o DirectionOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Ellipse
func (o DisplayOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Ellipse
func (o DominantBaselineOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Ellipse
func (o EnableBackgroundOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Ellipse
func (o ExternalResourcesRequiredOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Ellipse
func (o FillOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Ellipse
func (o FillOpacityOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Ellipse
func (o FillRuleOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Ellipse
func (o FilterOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Ellipse
func (o FloodColorOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Ellipse
func (o FloodOpacityOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Ellipse
func (o FocusHighlightOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Ellipse
func (o FocusableOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Focusable = o.v
}

// FontFamilyOpt applies to Ellipse
func (o FontFamilyOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Ellipse
func (o FontSizeOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Ellipse
func (o FontSizeAdjustOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Ellipse
func (o FontStretchOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Ellipse
func (o FontStyleOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Ellipse
func (o FontVariantOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Ellipse
func (o FontWeightOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Ellipse
func (o GlyphOrientationHorizontalOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Ellipse
func (o GlyphOrientationVerticalOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Ellipse
func (o ImageRenderingOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Ellipse
func (o KerningOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Ellipse
func (o LetterSpacingOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Ellipse
func (o LightingColorOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Ellipse
func (o MarkerEndOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Ellipse
func (o MarkerMidOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Ellipse
func (o MarkerStartOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Ellipse
func (o MaskOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Ellipse
func (o NavDownOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Ellipse
func (o NavDownLeftOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Ellipse
func (o NavDownRightOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Ellipse
func (o NavLeftOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Ellipse
func (o NavNextOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Ellipse
func (o NavPrevOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Ellipse
func (o NavRightOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Ellipse
func (o NavUpOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Ellipse
func (o NavUpLeftOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Ellipse
func (o NavUpRightOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Ellipse
func (o OpacityOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Ellipse
func (o OverflowOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PathLengthOpt applies to Ellipse
func (o PathLengthOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.PathLength = o.v
}

// PointerEventsOpt applies to Ellipse
func (o PointerEventsOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Ellipse
func (o RequiredExtensionsOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Ellipse
func (o RequiredFeaturesOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Ellipse
func (o RequiredFontsOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Ellipse
func (o RequiredFormatsOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// RxOpt applies to Ellipse
func (o RxOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Rx = o.v
}

// RyOpt applies to Ellipse
func (o RyOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Ry = o.v
}

// ShapeRenderingOpt applies to Ellipse
func (o ShapeRenderingOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Ellipse
func (o StopColorOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Ellipse
func (o StopOpacityOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Ellipse
func (o StrokeOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Ellipse
func (o StrokeDasharrayOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Ellipse
func (o StrokeDashoffsetOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Ellipse
func (o StrokeLinecapOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Ellipse
func (o StrokeLinejoinOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Ellipse
func (o StrokeMiterlimitOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Ellipse
func (o StrokeOpacityOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Ellipse
func (o StrokeWidthOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Ellipse
func (o SystemLanguageOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Ellipse
func (o TextAnchorOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Ellipse
func (o TextDecorationOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Ellipse
func (o TextRenderingOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Ellipse
func (o TransformOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Ellipse
func (o UnicodeBidiOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Ellipse
func (o VisibilityOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Ellipse
func (o WordSpacingOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Ellipse
func (o WritingModeOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgEllipseAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Cx != "" {
		Attr(sb, "cx", a.Cx)
	}
	if a.Cy != "" {
		Attr(sb, "cy", a.Cy)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable != "" {
		Attr(sb, "focusable", a.Focusable)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PathLength != "" {
		Attr(sb, "pathLength", a.PathLength)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Rx != "" {
		Attr(sb, "rx", a.Rx)
	}
	if a.Ry != "" {
		Attr(sb, "ry", a.Ry)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
