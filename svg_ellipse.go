// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgEllipseAttrs holds the attributes for the ellipse SVG element
type SvgEllipseAttrs struct {
	GlobalAttrs
	Cx string
	Cy string
	Rx string
	Ry string
}

// SvgEllipseArg interface for ellipse element arguments
type SvgEllipseArg interface {
	applyEllipse(*SvgEllipseAttrs, *[]Component)
}

// defaultSvgEllipseAttrs creates default attributes for ellipse
func defaultSvgEllipseAttrs() *SvgEllipseAttrs {
	return &SvgEllipseAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgEllipse creates an SVG ellipse element (self-closing)
func SvgEllipse(args ...SvgEllipseArg) Node {
	a := defaultSvgEllipseAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyEllipse(a, &kids)
	}
	return Node{
		Tag:   "ellipse",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to ellipse
func (g Global) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// CxOpt applies to Ellipse
func (o CxOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Cx = o.v
}

// CyOpt applies to Ellipse
func (o CyOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Cy = o.v
}

// RxOpt applies to Ellipse
func (o RxOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Rx = o.v
}

// RyOpt applies to Ellipse
func (o RyOpt) applyEllipse(a *SvgEllipseAttrs, _ *[]Component) {
	a.Ry = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgEllipseAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Cx != "" {
		Attr(sb, "cx", a.Cx)
	}
	if a.Cy != "" {
		Attr(sb, "cy", a.Cy)
	}
	if a.Rx != "" {
		Attr(sb, "rx", a.Rx)
	}
	if a.Ry != "" {
		Attr(sb, "ry", a.Ry)
	}
}
