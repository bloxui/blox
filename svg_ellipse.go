// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// EllipseAttrs holds the attributes for the ellipse SVG element
type EllipseAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Cx        string
	Cy        string
	Rx        string
	Ry        string
}

// EllipseArg interface for ellipse element arguments
type EllipseArg interface {
	ApplyEllipse(*EllipseAttrs, *[]html.Component)
}

// defaultEllipseAttrs creates default attributes for ellipse
func defaultEllipseAttrs() *EllipseAttrs {
	return &EllipseAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Ellipse creates an SVG ellipse element (self-closing)
func Ellipse(args ...EllipseArg) html.Node {
	a := defaultEllipseAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyEllipse(a, &kids)
	}
	return html.Node{
		Tag:   "ellipse",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to ellipse
func (g Global) ApplyEllipse(a *EllipseAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// CxOpt applies to Ellipse
func (o CxOpt) ApplyEllipse(a *EllipseAttrs, _ *[]html.Component) {
	a.Cx = o.v
}

// CyOpt applies to Ellipse
func (o CyOpt) ApplyEllipse(a *EllipseAttrs, _ *[]html.Component) {
	a.Cy = o.v
}

// RxOpt applies to Ellipse
func (o RxOpt) ApplyEllipse(a *EllipseAttrs, _ *[]html.Component) {
	a.Rx = o.v
}

// RyOpt applies to Ellipse
func (o RyOpt) ApplyEllipse(a *EllipseAttrs, _ *[]html.Component) {
	a.Ry = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *EllipseAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Cx != "" {
		SvgAttr(sb, "cx", a.Cx)
	}
	if a.Cy != "" {
		SvgAttr(sb, "cy", a.Cy)
	}
	if a.Rx != "" {
		SvgAttr(sb, "rx", a.Rx)
	}
	if a.Ry != "" {
		SvgAttr(sb, "ry", a.Ry)
	}
}
