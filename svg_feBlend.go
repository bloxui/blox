// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeBlendAttrs holds the attributes for the feBlend SVG element
type SvgFeBlendAttrs struct {
	GlobalAttrs
	In   string
	In2  string
	Mode string
}

// SvgFeBlendArg interface for feBlend element arguments
type SvgFeBlendArg interface {
	applyFeBlend(*SvgFeBlendAttrs, *[]Component)
}

// defaultSvgFeBlendAttrs creates default attributes for feBlend
func defaultSvgFeBlendAttrs() *SvgFeBlendAttrs {
	return &SvgFeBlendAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeBlend creates an SVG feBlend element
func SvgFeBlend(args ...SvgFeBlendArg) Node {
	a := defaultSvgFeBlendAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeBlend(a, &kids)
	}
	return Node{
		Tag:   "feBlend",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feBlend
func (g Global) applyFeBlend(a *SvgFeBlendAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeBlend
func (o InOpt) applyFeBlend(a *SvgFeBlendAttrs, _ *[]Component) {
	a.In = o.v
}

// In2Opt applies to FeBlend
func (o In2Opt) applyFeBlend(a *SvgFeBlendAttrs, _ *[]Component) {
	a.In2 = o.v
}

// ModeOpt applies to FeBlend
func (o ModeOpt) applyFeBlend(a *SvgFeBlendAttrs, _ *[]Component) {
	a.Mode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeBlendAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.In2 != "" {
		Attr(sb, "in2", a.In2)
	}
	if a.Mode != "" {
		Attr(sb, "mode", a.Mode)
	}
}
