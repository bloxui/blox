// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeCompositeAttrs holds the attributes for the feComposite SVG element
type SvgFeCompositeAttrs struct {
	GlobalAttrs
	In       string
	In2      string
	K1       string
	K2       string
	K3       string
	K4       string
	Operator string
}

// SvgFeCompositeArg interface for feComposite element arguments
type SvgFeCompositeArg interface {
	applyFeComposite(*SvgFeCompositeAttrs, *[]Component)
}

// defaultSvgFeCompositeAttrs creates default attributes for feComposite
func defaultSvgFeCompositeAttrs() *SvgFeCompositeAttrs {
	return &SvgFeCompositeAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeComposite creates an SVG feComposite element
func SvgFeComposite(args ...SvgFeCompositeArg) Node {
	a := defaultSvgFeCompositeAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeComposite(a, &kids)
	}
	return Node{
		Tag:   "feComposite",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feComposite
func (g Global) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeComposite
func (o InOpt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.In = o.v
}

// In2Opt applies to FeComposite
func (o In2Opt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.In2 = o.v
}

// K1Opt applies to FeComposite
func (o K1Opt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.K1 = o.v
}

// K2Opt applies to FeComposite
func (o K2Opt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.K2 = o.v
}

// K3Opt applies to FeComposite
func (o K3Opt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.K3 = o.v
}

// K4Opt applies to FeComposite
func (o K4Opt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.K4 = o.v
}

// OperatorOpt applies to FeComposite
func (o OperatorOpt) applyFeComposite(a *SvgFeCompositeAttrs, _ *[]Component) {
	a.Operator = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeCompositeAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.In2 != "" {
		Attr(sb, "in2", a.In2)
	}
	if a.K1 != "" {
		Attr(sb, "k1", a.K1)
	}
	if a.K2 != "" {
		Attr(sb, "k2", a.K2)
	}
	if a.K3 != "" {
		Attr(sb, "k3", a.K3)
	}
	if a.K4 != "" {
		Attr(sb, "k4", a.K4)
	}
	if a.Operator != "" {
		Attr(sb, "operator", a.Operator)
	}
}
