// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeConvolveMatrixAttrs holds the attributes for the feConvolveMatrix SVG element
type SvgFeConvolveMatrixAttrs struct {
	GlobalAttrs
	Bias             string
	Divisor          string
	EdgeMode         string
	In               string
	KernelMatrix     string
	KernelUnitLength string
	Order            string
	PreserveAlpha    bool
	TargetX          string
	TargetY          string
}

// SvgFeConvolveMatrixArg interface for feConvolveMatrix element arguments
type SvgFeConvolveMatrixArg interface {
	applyFeConvolveMatrix(*SvgFeConvolveMatrixAttrs, *[]Component)
}

// defaultSvgFeConvolveMatrixAttrs creates default attributes for feConvolveMatrix
func defaultSvgFeConvolveMatrixAttrs() *SvgFeConvolveMatrixAttrs {
	return &SvgFeConvolveMatrixAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeConvolveMatrix creates an SVG feConvolveMatrix element
func SvgFeConvolveMatrix(args ...SvgFeConvolveMatrixArg) Node {
	a := defaultSvgFeConvolveMatrixAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeConvolveMatrix(a, &kids)
	}
	return Node{
		Tag:   "feConvolveMatrix",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feConvolveMatrix
func (g Global) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// BiasOpt applies to FeConvolveMatrix
func (o BiasOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.Bias = o.v
}

// DivisorOpt applies to FeConvolveMatrix
func (o DivisorOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.Divisor = o.v
}

// EdgeModeOpt applies to FeConvolveMatrix
func (o EdgeModeOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.EdgeMode = o.v
}

// InOpt applies to FeConvolveMatrix
func (o InOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.In = o.v
}

// KernelMatrixOpt applies to FeConvolveMatrix
func (o KernelMatrixOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.KernelMatrix = o.v
}

// KernelUnitLengthOpt applies to FeConvolveMatrix
func (o KernelUnitLengthOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.KernelUnitLength = o.v
}

// OrderOpt applies to FeConvolveMatrix
func (o OrderOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.Order = o.v
}

// PreserveAlphaOpt applies to FeConvolveMatrix
func (o PreserveAlphaOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.PreserveAlpha = true
}

// TargetXOpt applies to FeConvolveMatrix
func (o TargetXOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.TargetX = o.v
}

// TargetYOpt applies to FeConvolveMatrix
func (o TargetYOpt) applyFeConvolveMatrix(a *SvgFeConvolveMatrixAttrs, _ *[]Component) {
	a.TargetY = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeConvolveMatrixAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Bias != "" {
		Attr(sb, "bias", a.Bias)
	}
	if a.Divisor != "" {
		Attr(sb, "divisor", a.Divisor)
	}
	if a.EdgeMode != "" {
		Attr(sb, "edgeMode", a.EdgeMode)
	}
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.KernelMatrix != "" {
		Attr(sb, "kernelMatrix", a.KernelMatrix)
	}
	if a.KernelUnitLength != "" {
		Attr(sb, "kernelUnitLength", a.KernelUnitLength)
	}
	if a.Order != "" {
		Attr(sb, "order", a.Order)
	}
	if a.PreserveAlpha {
		BoolAttr(sb, "preserveAlpha")
	}
	if a.TargetX != "" {
		Attr(sb, "targetX", a.TargetX)
	}
	if a.TargetY != "" {
		Attr(sb, "targetY", a.TargetY)
	}
}
