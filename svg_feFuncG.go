// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeFuncGAttrs holds the attributes for the feFuncG SVG element
type SvgFeFuncGAttrs struct {
	GlobalAttrs
	Amplitude   string
	Exponent    string
	Intercept   string
	Offset      string
	Slope       string
	TableValues string
	Type        string
}

// SvgFeFuncGArg interface for feFuncG element arguments
type SvgFeFuncGArg interface {
	applyFeFuncG(*SvgFeFuncGAttrs, *[]Component)
}

// defaultSvgFeFuncGAttrs creates default attributes for feFuncG
func defaultSvgFeFuncGAttrs() *SvgFeFuncGAttrs {
	return &SvgFeFuncGAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeFuncG creates an SVG feFuncG element
func SvgFeFuncG(args ...SvgFeFuncGArg) Node {
	a := defaultSvgFeFuncGAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeFuncG(a, &kids)
	}
	return Node{
		Tag:   "feFuncG",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feFuncG
func (g Global) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AmplitudeOpt applies to FeFuncG
func (o AmplitudeOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.Amplitude = o.v
}

// ExponentOpt applies to FeFuncG
func (o ExponentOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.Exponent = o.v
}

// InterceptOpt applies to FeFuncG
func (o InterceptOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.Intercept = o.v
}

// OffsetOpt applies to FeFuncG
func (o OffsetOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.Offset = o.v
}

// SlopeOpt applies to FeFuncG
func (o SlopeOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.Slope = o.v
}

// TableValuesOpt applies to FeFuncG
func (o TableValuesOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.TableValues = o.v
}

// TypeOpt applies to FeFuncG
func (o TypeOpt) applyFeFuncG(a *SvgFeFuncGAttrs, _ *[]Component) {
	a.Type = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeFuncGAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Amplitude != "" {
		Attr(sb, "amplitude", a.Amplitude)
	}
	if a.Exponent != "" {
		Attr(sb, "exponent", a.Exponent)
	}
	if a.Intercept != "" {
		Attr(sb, "intercept", a.Intercept)
	}
	if a.Offset != "" {
		Attr(sb, "offset", a.Offset)
	}
	if a.Slope != "" {
		Attr(sb, "slope", a.Slope)
	}
	if a.TableValues != "" {
		Attr(sb, "tableValues", a.TableValues)
	}
	if a.Type != "" {
		Attr(sb, "type", a.Type)
	}
}
