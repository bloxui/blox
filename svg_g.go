// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgGAttrs holds the attributes for the g SVG element
type SvgGAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgGArg interface for g element arguments
type SvgGArg interface {
	ApplyG(*SvgGAttrs, *[]Component)
}

// defaultSvgGAttrs creates default attributes for g
func defaultSvgGAttrs() *SvgGAttrs {
	return &SvgGAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgG creates an SVG g element
func SvgG(args ...SvgGArg) Node {
	a := defaultSvgGAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyG(a, &kids)
	}
	return Node{
		Tag:   "g",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to g
func (g Global) ApplyG(a *SvgGAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to G
func (o AlignmentBaselineOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to G
func (o BaselineShiftOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to G
func (o ClipOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to G
func (o ClipPathOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to G
func (o ClipRuleOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to G
func (o ColorOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to G
func (o ColorInterpolationOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to G
func (o ColorInterpolationFiltersOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to G
func (o ColorProfileOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to G
func (o ColorRenderingOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to G
func (o CursorOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to G
func (o DirectionOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to G
func (o DisplayOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to G
func (o DominantBaselineOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to G
func (o EnableBackgroundOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to G
func (o ExternalResourcesRequiredOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to G
func (o FillOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to G
func (o FillOpacityOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to G
func (o FillRuleOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to G
func (o FilterOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to G
func (o FloodColorOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to G
func (o FloodOpacityOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to G
func (o FocusHighlightOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to G
func (o FocusableOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Focusable = o.v
}

// FontFamilyOpt applies to G
func (o FontFamilyOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to G
func (o FontSizeOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to G
func (o FontSizeAdjustOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to G
func (o FontStretchOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to G
func (o FontStyleOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to G
func (o FontVariantOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to G
func (o FontWeightOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to G
func (o GlyphOrientationHorizontalOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to G
func (o GlyphOrientationVerticalOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to G
func (o ImageRenderingOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to G
func (o KerningOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to G
func (o LetterSpacingOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to G
func (o LightingColorOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to G
func (o MarkerEndOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to G
func (o MarkerMidOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to G
func (o MarkerStartOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to G
func (o MaskOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Mask = o.v
}

// NavDownOpt applies to G
func (o NavDownOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to G
func (o NavDownLeftOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to G
func (o NavDownRightOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to G
func (o NavLeftOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to G
func (o NavNextOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to G
func (o NavPrevOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to G
func (o NavRightOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to G
func (o NavUpOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to G
func (o NavUpLeftOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to G
func (o NavUpRightOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to G
func (o OpacityOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to G
func (o OverflowOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to G
func (o PointerEventsOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to G
func (o RequiredExtensionsOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to G
func (o RequiredFeaturesOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to G
func (o RequiredFontsOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to G
func (o RequiredFormatsOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to G
func (o ShapeRenderingOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to G
func (o StopColorOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to G
func (o StopOpacityOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to G
func (o StrokeOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to G
func (o StrokeDasharrayOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to G
func (o StrokeDashoffsetOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to G
func (o StrokeLinecapOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to G
func (o StrokeLinejoinOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to G
func (o StrokeMiterlimitOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to G
func (o StrokeOpacityOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to G
func (o StrokeWidthOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to G
func (o SystemLanguageOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to G
func (o TextAnchorOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to G
func (o TextDecorationOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to G
func (o TextRenderingOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to G
func (o TransformOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to G
func (o UnicodeBidiOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to G
func (o VisibilityOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to G
func (o WordSpacingOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to G
func (o WritingModeOpt) ApplyG(a *SvgGAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgGAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable != "" {
		Attr(sb, "focusable", a.Focusable)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
