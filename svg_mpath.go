// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgMpathAttrs holds the attributes for the mpath SVG element
type SvgMpathAttrs struct {
	GlobalAttrs
	ExternalResourcesRequired string
	Href                      string
}

// SvgMpathArg interface for mpath element arguments
type SvgMpathArg interface {
	ApplyMpath(*SvgMpathAttrs, *[]Component)
}

// defaultSvgMpathAttrs creates default attributes for mpath
func defaultSvgMpathAttrs() *SvgMpathAttrs {
	return &SvgMpathAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgMpath creates an SVG mpath element
func SvgMpath(args ...SvgMpathArg) Node {
	a := defaultSvgMpathAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyMpath(a, &kids)
	}
	return Node{
		Tag:   "mpath",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to mpath
func (g Global) ApplyMpath(a *SvgMpathAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// ExternalResourcesRequiredOpt applies to Mpath
func (o ExternalResourcesRequiredOpt) ApplyMpath(a *SvgMpathAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// HrefOpt applies to Mpath
func (o HrefOpt) ApplyMpath(a *SvgMpathAttrs, _ *[]Component) {
	a.Href = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgMpathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
}
