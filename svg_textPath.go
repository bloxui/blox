// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgTextPathAttrs holds the attributes for the textPath SVG element
type SvgTextPathAttrs struct {
	GlobalAttrs
	Href        string
	Method      string
	Spacing     string
	StartOffset string
}

// SvgTextPathArg interface for textPath element arguments
type SvgTextPathArg interface {
	applyTextPath(*SvgTextPathAttrs, *[]Component)
}

// defaultSvgTextPathAttrs creates default attributes for textPath
func defaultSvgTextPathAttrs() *SvgTextPathAttrs {
	return &SvgTextPathAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgTextPath creates an SVG textPath element
func SvgTextPath(args ...SvgTextPathArg) Node {
	a := defaultSvgTextPathAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyTextPath(a, &kids)
	}
	return Node{
		Tag:   "textPath",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to textPath
func (g Global) applyTextPath(a *SvgTextPathAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// HrefOpt applies to TextPath
func (o HrefOpt) applyTextPath(a *SvgTextPathAttrs, _ *[]Component) {
	a.Href = o.v
}

// MethodOpt applies to TextPath
func (o MethodOpt) applyTextPath(a *SvgTextPathAttrs, _ *[]Component) {
	a.Method = o.v
}

// SpacingOpt applies to TextPath
func (o SpacingOpt) applyTextPath(a *SvgTextPathAttrs, _ *[]Component) {
	a.Spacing = o.v
}

// StartOffsetOpt applies to TextPath
func (o StartOffsetOpt) applyTextPath(a *SvgTextPathAttrs, _ *[]Component) {
	a.StartOffset = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgTextPathAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
	if a.Method != "" {
		Attr(sb, "method", a.Method)
	}
	if a.Spacing != "" {
		Attr(sb, "spacing", a.Spacing)
	}
	if a.StartOffset != "" {
		Attr(sb, "startOffset", a.StartOffset)
	}
}
