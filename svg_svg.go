// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgSvgAttrs holds the attributes for the svg SVG element
type SvgSvgAttrs struct {
	GlobalAttrs
	Height              string
	PreserveAspectRatio string
	ViewBox             string
	Width               string
	X                   string
	Y                   string
}

// SvgSvgArg interface for svg element arguments
type SvgSvgArg interface {
	applySvg(*SvgSvgAttrs, *[]Component)
}

// defaultSvgSvgAttrs creates default attributes for svg
func defaultSvgSvgAttrs() *SvgSvgAttrs {
	return &SvgSvgAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgSvg creates an SVG svg element
func SvgSvg(args ...SvgSvgArg) Node {
	a := defaultSvgSvgAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applySvg(a, &kids)
	}
	return Node{
		Tag:   "svg",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to svg
func (g Global) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// HeightOpt applies to Svg
func (o HeightOpt) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	a.Height = o.v
}

// PreserveAspectRatioOpt applies to Svg
func (o PreserveAspectRatioOpt) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	a.PreserveAspectRatio = o.v
}

// ViewBoxOpt applies to Svg
func (o ViewBoxOpt) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	a.ViewBox = o.v
}

// WidthOpt applies to Svg
func (o WidthOpt) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	a.Width = o.v
}

// XOpt applies to Svg
func (o XOpt) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Svg
func (o YOpt) applySvg(a *SvgSvgAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgSvgAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.PreserveAspectRatio != "" {
		Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.ViewBox != "" {
		Attr(sb, "viewBox", a.ViewBox)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
