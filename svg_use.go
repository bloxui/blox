// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgUseAttrs holds the attributes for the use SVG element
type SvgUseAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	Href                       string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgUseArg interface for use element arguments
type SvgUseArg interface {
	ApplyUse(*SvgUseAttrs, *[]Component)
}

// defaultSvgUseAttrs creates default attributes for use
func defaultSvgUseAttrs() *SvgUseAttrs {
	return &SvgUseAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgUse creates an SVG use element
func SvgUse(args ...SvgUseArg) Node {
	a := defaultSvgUseAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyUse(a, &kids)
	}
	return Node{
		Tag:   "use",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to use
func (g Global) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Use
func (o AlignmentBaselineOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Use
func (o BaselineShiftOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Use
func (o ClipOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Use
func (o ClipPathOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Use
func (o ClipRuleOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Use
func (o ColorOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Use
func (o ColorInterpolationOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Use
func (o ColorInterpolationFiltersOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Use
func (o ColorProfileOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Use
func (o ColorRenderingOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Use
func (o CursorOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Use
func (o DirectionOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Use
func (o DisplayOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Use
func (o DominantBaselineOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Use
func (o EnableBackgroundOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Use
func (o ExternalResourcesRequiredOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Use
func (o FillOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Use
func (o FillOpacityOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Use
func (o FillRuleOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Use
func (o FilterOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Use
func (o FloodColorOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Use
func (o FloodOpacityOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Use
func (o FocusHighlightOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Use
func (o FocusableOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Focusable = o.v
}

// FontFamilyOpt applies to Use
func (o FontFamilyOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Use
func (o FontSizeOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Use
func (o FontSizeAdjustOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Use
func (o FontStretchOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Use
func (o FontStyleOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Use
func (o FontVariantOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Use
func (o FontWeightOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Use
func (o GlyphOrientationHorizontalOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Use
func (o GlyphOrientationVerticalOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to Use
func (o HeightOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Height = o.v
}

// HrefOpt applies to Use
func (o HrefOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Href = o.v
}

// ImageRenderingOpt applies to Use
func (o ImageRenderingOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Use
func (o KerningOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Use
func (o LetterSpacingOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Use
func (o LightingColorOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Use
func (o MarkerEndOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Use
func (o MarkerMidOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Use
func (o MarkerStartOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Use
func (o MaskOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Use
func (o NavDownOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Use
func (o NavDownLeftOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Use
func (o NavDownRightOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Use
func (o NavLeftOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Use
func (o NavNextOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Use
func (o NavPrevOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Use
func (o NavRightOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Use
func (o NavUpOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Use
func (o NavUpLeftOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Use
func (o NavUpRightOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Use
func (o OpacityOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Use
func (o OverflowOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Use
func (o PointerEventsOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Use
func (o RequiredExtensionsOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Use
func (o RequiredFeaturesOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Use
func (o RequiredFontsOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Use
func (o RequiredFormatsOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to Use
func (o ShapeRenderingOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Use
func (o StopColorOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Use
func (o StopOpacityOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Use
func (o StrokeOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Use
func (o StrokeDasharrayOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Use
func (o StrokeDashoffsetOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Use
func (o StrokeLinecapOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Use
func (o StrokeLinejoinOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Use
func (o StrokeMiterlimitOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Use
func (o StrokeOpacityOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Use
func (o StrokeWidthOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Use
func (o SystemLanguageOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Use
func (o TextAnchorOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Use
func (o TextDecorationOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Use
func (o TextRenderingOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Use
func (o TransformOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Transform = o.v
}

// UnicodeBidiOpt applies to Use
func (o UnicodeBidiOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Use
func (o VisibilityOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to Use
func (o WidthOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to Use
func (o WordSpacingOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Use
func (o WritingModeOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to Use
func (o XOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Use
func (o YOpt) ApplyUse(a *SvgUseAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgUseAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable != "" {
		Attr(sb, "focusable", a.Focusable)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
