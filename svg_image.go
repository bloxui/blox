// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgImageAttrs holds the attributes for the image SVG element
type SvgImageAttrs struct {
	GlobalAttrs
	Height              string
	Href                string
	PreserveAspectRatio string
	Width               string
	X                   string
	Y                   string
}

// SvgImageArg interface for image element arguments
type SvgImageArg interface {
	applyImage(*SvgImageAttrs, *[]Component)
}

// defaultSvgImageAttrs creates default attributes for image
func defaultSvgImageAttrs() *SvgImageAttrs {
	return &SvgImageAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgImage creates an SVG image element
func SvgImage(args ...SvgImageArg) Node {
	a := defaultSvgImageAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyImage(a, &kids)
	}
	return Node{
		Tag:   "image",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to image
func (g Global) applyImage(a *SvgImageAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// HeightOpt applies to Image
func (o HeightOpt) applyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Height = o.v
}

// HrefOpt applies to Image
func (o HrefOpt) applyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Href = o.v
}

// PreserveAspectRatioOpt applies to Image
func (o PreserveAspectRatioOpt) applyImage(a *SvgImageAttrs, _ *[]Component) {
	a.PreserveAspectRatio = o.v
}

// WidthOpt applies to Image
func (o WidthOpt) applyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Width = o.v
}

// XOpt applies to Image
func (o XOpt) applyImage(a *SvgImageAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Image
func (o YOpt) applyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgImageAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
	if a.PreserveAspectRatio != "" {
		Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
