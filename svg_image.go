// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgImageAttrs holds the attributes for the image SVG element
type SvgImageAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Crossorigin                string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FocusHighlight             string
	Focusable                  string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	Href                       string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	NavDown                    string
	NavDownLeft                string
	NavDownRight               string
	NavLeft                    string
	NavNext                    string
	NavPrev                    string
	NavRight                   string
	NavUp                      string
	NavUpLeft                  string
	NavUpRight                 string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	PreserveAspectRatio        string
	RequiredExtensions         string
	RequiredFeatures           string
	RequiredFonts              string
	RequiredFormats            string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	Transform                  string
	Type                       string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgImageArg interface for image element arguments
type SvgImageArg interface {
	ApplyImage(*SvgImageAttrs, *[]Component)
}

// defaultSvgImageAttrs creates default attributes for image
func defaultSvgImageAttrs() *SvgImageAttrs {
	return &SvgImageAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgImage creates an SVG image element
func SvgImage(args ...SvgImageArg) Node {
	a := defaultSvgImageAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyImage(a, &kids)
	}
	return Node{
		Tag:   "image",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to image
func (g Global) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Image
func (o AlignmentBaselineOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Image
func (o BaselineShiftOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Image
func (o ClipOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Image
func (o ClipPathOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Image
func (o ClipRuleOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Image
func (o ColorOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Image
func (o ColorInterpolationOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Image
func (o ColorInterpolationFiltersOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Image
func (o ColorProfileOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Image
func (o ColorRenderingOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CrossoriginOpt applies to Image
func (o CrossoriginOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Crossorigin = o.v
}

// CursorOpt applies to Image
func (o CursorOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Image
func (o DirectionOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Image
func (o DisplayOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Image
func (o DominantBaselineOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Image
func (o EnableBackgroundOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Image
func (o ExternalResourcesRequiredOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Image
func (o FillOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Image
func (o FillOpacityOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Image
func (o FillRuleOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Image
func (o FilterOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Image
func (o FloodColorOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Image
func (o FloodOpacityOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FocusHighlightOpt applies to Image
func (o FocusHighlightOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FocusHighlight = o.v
}

// FocusableOpt applies to Image
func (o FocusableOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Focusable = o.v
}

// FontFamilyOpt applies to Image
func (o FontFamilyOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Image
func (o FontSizeOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Image
func (o FontSizeAdjustOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Image
func (o FontStretchOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Image
func (o FontStyleOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Image
func (o FontVariantOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Image
func (o FontWeightOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Image
func (o GlyphOrientationHorizontalOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Image
func (o GlyphOrientationVerticalOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to Image
func (o HeightOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Height = o.v
}

// HrefOpt applies to Image
func (o HrefOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Href = o.v
}

// ImageRenderingOpt applies to Image
func (o ImageRenderingOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Image
func (o KerningOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Image
func (o LetterSpacingOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Image
func (o LightingColorOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Image
func (o MarkerEndOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Image
func (o MarkerMidOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Image
func (o MarkerStartOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Image
func (o MaskOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Mask = o.v
}

// NavDownOpt applies to Image
func (o NavDownOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavDown = o.v
}

// NavDownLeftOpt applies to Image
func (o NavDownLeftOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavDownLeft = o.v
}

// NavDownRightOpt applies to Image
func (o NavDownRightOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavDownRight = o.v
}

// NavLeftOpt applies to Image
func (o NavLeftOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavLeft = o.v
}

// NavNextOpt applies to Image
func (o NavNextOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavNext = o.v
}

// NavPrevOpt applies to Image
func (o NavPrevOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavPrev = o.v
}

// NavRightOpt applies to Image
func (o NavRightOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavRight = o.v
}

// NavUpOpt applies to Image
func (o NavUpOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavUp = o.v
}

// NavUpLeftOpt applies to Image
func (o NavUpLeftOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavUpLeft = o.v
}

// NavUpRightOpt applies to Image
func (o NavUpRightOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.NavUpRight = o.v
}

// OpacityOpt applies to Image
func (o OpacityOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Image
func (o OverflowOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Image
func (o PointerEventsOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// PreserveAspectRatioOpt applies to Image
func (o PreserveAspectRatioOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.PreserveAspectRatio = o.v
}

// RequiredExtensionsOpt applies to Image
func (o RequiredExtensionsOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Image
func (o RequiredFeaturesOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to Image
func (o RequiredFontsOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to Image
func (o RequiredFormatsOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// ShapeRenderingOpt applies to Image
func (o ShapeRenderingOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Image
func (o StopColorOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Image
func (o StopOpacityOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Image
func (o StrokeOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Image
func (o StrokeDasharrayOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Image
func (o StrokeDashoffsetOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Image
func (o StrokeLinecapOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Image
func (o StrokeLinejoinOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Image
func (o StrokeMiterlimitOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Image
func (o StrokeOpacityOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Image
func (o StrokeWidthOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Image
func (o SystemLanguageOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Image
func (o TextAnchorOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Image
func (o TextDecorationOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Image
func (o TextRenderingOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TransformOpt applies to Image
func (o TransformOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Transform = o.v
}

// TypeOpt applies to Image
func (o TypeOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Type = o.v
}

// UnicodeBidiOpt applies to Image
func (o UnicodeBidiOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Image
func (o VisibilityOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to Image
func (o WidthOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to Image
func (o WordSpacingOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Image
func (o WritingModeOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to Image
func (o XOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Image
func (o YOpt) ApplyImage(a *SvgImageAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgImageAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Crossorigin != "" {
		Attr(sb, "crossorigin", a.Crossorigin)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FocusHighlight != "" {
		Attr(sb, "focusHighlight", a.FocusHighlight)
	}
	if a.Focusable != "" {
		Attr(sb, "focusable", a.Focusable)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.NavDown != "" {
		Attr(sb, "nav-down", a.NavDown)
	}
	if a.NavDownLeft != "" {
		Attr(sb, "nav-down-left", a.NavDownLeft)
	}
	if a.NavDownRight != "" {
		Attr(sb, "nav-down-right", a.NavDownRight)
	}
	if a.NavLeft != "" {
		Attr(sb, "nav-left", a.NavLeft)
	}
	if a.NavNext != "" {
		Attr(sb, "nav-next", a.NavNext)
	}
	if a.NavPrev != "" {
		Attr(sb, "nav-prev", a.NavPrev)
	}
	if a.NavRight != "" {
		Attr(sb, "nav-right", a.NavRight)
	}
	if a.NavUp != "" {
		Attr(sb, "nav-up", a.NavUp)
	}
	if a.NavUpLeft != "" {
		Attr(sb, "nav-up-left", a.NavUpLeft)
	}
	if a.NavUpRight != "" {
		Attr(sb, "nav-up-right", a.NavUpRight)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.PreserveAspectRatio != "" {
		Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.Transform != "" {
		Attr(sb, "transform", a.Transform)
	}
	if a.Type != "" {
		Attr(sb, "type", a.Type)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
