// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgPrefetchAttrs holds the attributes for the prefetch SVG element
type SvgPrefetchAttrs struct {
	GlobalAttrs
	Bandwidth              string
	MediaCharacterEncoding string
	MediaContentEncodings  string
	MediaSize              string
	MediaTime              string
}

// SvgPrefetchArg interface for prefetch element arguments
type SvgPrefetchArg interface {
	ApplyPrefetch(*SvgPrefetchAttrs, *[]Component)
}

// defaultSvgPrefetchAttrs creates default attributes for prefetch
func defaultSvgPrefetchAttrs() *SvgPrefetchAttrs {
	return &SvgPrefetchAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgPrefetch creates an SVG prefetch element
func SvgPrefetch(args ...SvgPrefetchArg) Node {
	a := defaultSvgPrefetchAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyPrefetch(a, &kids)
	}
	return Node{
		Tag:   "prefetch",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to prefetch
func (g Global) ApplyPrefetch(a *SvgPrefetchAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// BandwidthOpt applies to Prefetch
func (o BandwidthOpt) ApplyPrefetch(a *SvgPrefetchAttrs, _ *[]Component) {
	a.Bandwidth = o.v
}

// MediaCharacterEncodingOpt applies to Prefetch
func (o MediaCharacterEncodingOpt) ApplyPrefetch(a *SvgPrefetchAttrs, _ *[]Component) {
	a.MediaCharacterEncoding = o.v
}

// MediaContentEncodingsOpt applies to Prefetch
func (o MediaContentEncodingsOpt) ApplyPrefetch(a *SvgPrefetchAttrs, _ *[]Component) {
	a.MediaContentEncodings = o.v
}

// MediaSizeOpt applies to Prefetch
func (o MediaSizeOpt) ApplyPrefetch(a *SvgPrefetchAttrs, _ *[]Component) {
	a.MediaSize = o.v
}

// MediaTimeOpt applies to Prefetch
func (o MediaTimeOpt) ApplyPrefetch(a *SvgPrefetchAttrs, _ *[]Component) {
	a.MediaTime = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgPrefetchAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Bandwidth != "" {
		Attr(sb, "bandwidth", a.Bandwidth)
	}
	if a.MediaCharacterEncoding != "" {
		Attr(sb, "mediaCharacterEncoding", a.MediaCharacterEncoding)
	}
	if a.MediaContentEncodings != "" {
		Attr(sb, "mediaContentEncodings", a.MediaContentEncodings)
	}
	if a.MediaSize != "" {
		Attr(sb, "mediaSize", a.MediaSize)
	}
	if a.MediaTime != "" {
		Attr(sb, "mediaTime", a.MediaTime)
	}
}
