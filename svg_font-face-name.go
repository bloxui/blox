// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFontFaceNameAttrs holds the attributes for the font-face-name SVG element
type SvgFontFaceNameAttrs struct {
	GlobalAttrs
	Name string
}

// SvgFontFaceNameArg interface for font-face-name element arguments
type SvgFontFaceNameArg interface {
	ApplyFontFaceName(*SvgFontFaceNameAttrs, *[]Component)
}

// defaultSvgFontFaceNameAttrs creates default attributes for font-face-name
func defaultSvgFontFaceNameAttrs() *SvgFontFaceNameAttrs {
	return &SvgFontFaceNameAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFontFaceName creates an SVG font-face-name element
func SvgFontFaceName(args ...SvgFontFaceNameArg) Node {
	a := defaultSvgFontFaceNameAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFontFaceName(a, &kids)
	}
	return Node{
		Tag:   "font-face-name",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to font-face-name
func (g Global) ApplyFontFaceName(a *SvgFontFaceNameAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// NameOpt applies to FontFaceName
func (o NameOpt) ApplyFontFaceName(a *SvgFontFaceNameAttrs, _ *[]Component) {
	a.Name = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFontFaceNameAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Name != "" {
		Attr(sb, "name", a.Name)
	}
}
