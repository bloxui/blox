// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// FeFuncAAttrs holds the attributes for the feFuncA SVG element
type FeFuncAAttrs struct {
	SvgGlobal   SvgGlobalAttrs
	Amplitude   string
	Exponent    string
	Intercept   string
	Offset      string
	Slope       string
	TableValues string
	Type        string
}

// FeFuncAArg interface for feFuncA element arguments
type FeFuncAArg interface {
	ApplyFeFuncA(*FeFuncAAttrs, *[]html.Component)
}

// defaultFeFuncAAttrs creates default attributes for feFuncA
func defaultFeFuncAAttrs() *FeFuncAAttrs {
	return &FeFuncAAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeFuncA creates an SVG feFuncA element
func FeFuncA(args ...FeFuncAArg) html.Node {
	a := defaultFeFuncAAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyFeFuncA(a, &kids)
	}
	return html.Node{
		Tag:   "feFuncA",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feFuncA
func (g Global) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// AmplitudeOpt applies to FeFuncA
func (o AmplitudeOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.Amplitude = o.v
}

// ExponentOpt applies to FeFuncA
func (o ExponentOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.Exponent = o.v
}

// InterceptOpt applies to FeFuncA
func (o InterceptOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.Intercept = o.v
}

// OffsetOpt applies to FeFuncA
func (o OffsetOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.Offset = o.v
}

// SlopeOpt applies to FeFuncA
func (o SlopeOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.Slope = o.v
}

// TableValuesOpt applies to FeFuncA
func (o TableValuesOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.TableValues = o.v
}

// TypeOpt applies to FeFuncA
func (o TypeOpt) ApplyFeFuncA(a *FeFuncAAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeFuncAAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Amplitude != "" {
		SvgAttr(sb, "amplitude", a.Amplitude)
	}
	if a.Exponent != "" {
		SvgAttr(sb, "exponent", a.Exponent)
	}
	if a.Intercept != "" {
		SvgAttr(sb, "intercept", a.Intercept)
	}
	if a.Offset != "" {
		SvgAttr(sb, "offset", a.Offset)
	}
	if a.Slope != "" {
		SvgAttr(sb, "slope", a.Slope)
	}
	if a.TableValues != "" {
		SvgAttr(sb, "tableValues", a.TableValues)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
}
