// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgCircleAttrs holds the attributes for the circle SVG element
type SvgCircleAttrs struct {
	GlobalAttrs
	Cx   string
	Cy   string
	R    string
	Fill string
}

// SvgCircleArg interface for circle element arguments
type SvgCircleArg interface {
	applyCircle(*SvgCircleAttrs, *[]Component)
}

// defaultSvgCircleAttrs creates default attributes for circle
func defaultSvgCircleAttrs() *SvgCircleAttrs {
	return &SvgCircleAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgCircle creates an SVG circle element (self-closing)
func SvgCircle(args ...SvgCircleArg) Node {
	a := defaultSvgCircleAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyCircle(a, &kids)
	}
	return Node{
		Tag:   "circle",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to circle
func (g Global) applyCircle(a *SvgCircleAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// CxOpt applies to Circle
func (o CxOpt) applyCircle(a *SvgCircleAttrs, _ *[]Component) {
	a.Cx = o.v
}

// CyOpt applies to Circle
func (o CyOpt) applyCircle(a *SvgCircleAttrs, _ *[]Component) {
	a.Cy = o.v
}

// ROpt applies to Circle
func (o ROpt) applyCircle(a *SvgCircleAttrs, _ *[]Component) {
	a.R = o.v
}

// FillOpt applies to Circle
func (o FillOpt) applyCircle(a *SvgCircleAttrs, _ *[]Component) {
	a.Fill = o.v
}

// StrokeOpt applies to Circle
func (o StrokeOpt) applyCircle(a *SvgCircleAttrs, _ *[]Component) {
	a.GlobalAttrs.Style += "stroke: " + o.v + "; "
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgCircleAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Cx != "" {
		Attr(sb, "cx", a.Cx)
	}
	if a.Cy != "" {
		Attr(sb, "cy", a.Cy)
	}
	if a.R != "" {
		Attr(sb, "r", a.R)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
}
