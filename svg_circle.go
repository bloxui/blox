// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// CircleAttrs holds the attributes for the circle SVG element
type CircleAttrs struct {
	SvgGlobal SvgGlobalAttrs
	Cx        string
	Cy        string
	R         string
}

// CircleArg interface for circle element arguments
type CircleArg interface {
	ApplyCircle(*CircleAttrs, *[]html.Component)
}

// defaultCircleAttrs creates default attributes for circle
func defaultCircleAttrs() *CircleAttrs {
	return &CircleAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// Circle creates an SVG circle element (self-closing)
func Circle(args ...CircleArg) html.Node {
	a := defaultCircleAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyCircle(a, &kids)
	}
	return html.Node{
		Tag:   "circle",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to circle
func (g Global) ApplyCircle(a *CircleAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// CxOpt applies to Circle
func (o CxOpt) ApplyCircle(a *CircleAttrs, _ *[]html.Component) {
	a.Cx = o.v
}

// CyOpt applies to Circle
func (o CyOpt) ApplyCircle(a *CircleAttrs, _ *[]html.Component) {
	a.Cy = o.v
}

// ROpt applies to Circle
func (o ROpt) ApplyCircle(a *CircleAttrs, _ *[]html.Component) {
	a.R = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *CircleAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.Cx != "" {
		SvgAttr(sb, "cx", a.Cx)
	}
	if a.Cy != "" {
		SvgAttr(sb, "cy", a.Cy)
	}
	if a.R != "" {
		SvgAttr(sb, "r", a.R)
	}
}
