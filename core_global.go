package html

import (
	"sort"
	"strings"
)

// This file is generated by gen-tags; DO NOT EDIT.
// Global HTML attributes structure and option constructors.

type GlobalAttrs struct {
	// Generated from wooorm global attributes
	// Common core attributes
	Class string
	Name  string
	Type  string

	// Style attribute as a single string
	Style string

	// Map attributes
	Aria   map[string]string // aria-*
	Data   map[string]string // data-*
	Events map[string]string // "onclick" -> "handler()"
	Custom map[string]string // custom attributes like hx-*, x-*, etc.

	// Pointers for tri-state values

	// Booleans
}

// Helper methods for setting attributes
func (g *GlobalAttrs) addClass(v string) {
	if v == "" {
		return
	}
	if g.Class == "" {
		g.Class = v
	} else {
		g.Class += " " + v
	}
}

func (g *GlobalAttrs) setAria(k, v string) {
	if g.Aria == nil {
		g.Aria = map[string]string{}
	}
	g.Aria[k] = v
}

func (g *GlobalAttrs) setData(k, v string) {
	if g.Data == nil {
		g.Data = map[string]string{}
	}
	g.Data[k] = v
}

func (g *GlobalAttrs) setEvent(ev, handler string) {
	if g.Events == nil {
		g.Events = map[string]string{}
	}
	g.Events["on"+ev] = handler
}

func (g *GlobalAttrs) setCustom(k, v string) {
	if g.Custom == nil {
		g.Custom = map[string]string{}
	}
	g.Custom[k] = v
}

// Generated WriteGlobal function based on gostar global attributes
func WriteGlobal(sb *strings.Builder, g *GlobalAttrs) {
	if g.Class != "" {
		Attr(sb, "class", g.Class)
	}
	if g.Name != "" {
		Attr(sb, "name", g.Name)
	}
	if g.Type != "" {
		Attr(sb, "type", g.Type)
	}
	// Aria attributes
	for _, k := range sortedKeys(g.Aria) {
		Attr(sb, "aria-"+k, g.Aria[k])
	}

	// Data attributes
	for _, k := range sortedKeys(g.Data) {
		Attr(sb, "data-"+k, g.Data[k])
	}

	// Event handlers
	for _, evAttr := range sortedKeys(g.Events) {
		handler := g.Events[evAttr]
		if handler != "" {
			Attr(sb, evAttr, handler)
		}
	}

	// Custom attributes
	for _, k := range sortedKeys(g.Custom) {
		if v := g.Custom[k]; v != "" {
			Attr(sb, k, v)
		}
	}
}

func sortedKeys(m map[string]string) []string {
	if len(m) == 0 {
		return nil
	}
	keys := make([]string, 0, len(m))
	for k := range m {
		if k != "" {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// Global option: one glue impl for all tags (methods are added in tag files)
type Global struct {
	f func(*GlobalAttrs)
}

func (g Global) do(ga *GlobalAttrs) {
	g.f(ga)
}

// Global attribute constructors
func AClass(v string) Global {
	return Global{func(g *GlobalAttrs) { g.addClass(v) }}
}

func AName(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Name = v }}
}

func AType(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Type = v }}
}

// Map-like convenience functions
func AData(k, v string) Global {
	return Global{func(g *GlobalAttrs) { g.setData(k, v) }}
}

func AAria(k, v string) Global {
	return Global{func(g *GlobalAttrs) { g.setAria(k, v) }}
}

func AOn(ev, handler string) Global {
	return Global{func(g *GlobalAttrs) { g.setEvent(ev, handler) }}
}

func ACustom(k, v string) Global {
	return Global{func(g *GlobalAttrs) { g.setCustom(k, v) }}
}
