// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgTrefAttrs holds the attributes for the tref SVG element
type SvgTrefAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	Dx                         string
	Dy                         string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LengthAdjust               string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	Rotate                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	TextLength                 string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgTrefArg interface for tref element arguments
type SvgTrefArg interface {
	applyTref(*SvgTrefAttrs, *[]Component)
}

// defaultSvgTrefAttrs creates default attributes for tref
func defaultSvgTrefAttrs() *SvgTrefAttrs {
	return &SvgTrefAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgTref creates an SVG tref element
func SvgTref(args ...SvgTrefArg) Node {
	a := defaultSvgTrefAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyTref(a, &kids)
	}
	return Node{
		Tag:   "tref",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to tref
func (g Global) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Tref
func (o AlignmentBaselineOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Tref
func (o BaselineShiftOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Tref
func (o ClipOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Tref
func (o ClipPathOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Tref
func (o ClipRuleOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Tref
func (o ColorOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Tref
func (o ColorInterpolationOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Tref
func (o ColorInterpolationFiltersOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Tref
func (o ColorProfileOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Tref
func (o ColorRenderingOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Tref
func (o CursorOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Tref
func (o DirectionOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Tref
func (o DisplayOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Tref
func (o DominantBaselineOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// DxOpt applies to Tref
func (o DxOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Dx = o.v
}

// DyOpt applies to Tref
func (o DyOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Dy = o.v
}

// EnableBackgroundOpt applies to Tref
func (o EnableBackgroundOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to Tref
func (o ExternalResourcesRequiredOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to Tref
func (o FillOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Tref
func (o FillOpacityOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Tref
func (o FillRuleOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Tref
func (o FilterOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Tref
func (o FloodColorOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Tref
func (o FloodOpacityOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Tref
func (o FontFamilyOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Tref
func (o FontSizeOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Tref
func (o FontSizeAdjustOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Tref
func (o FontStretchOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Tref
func (o FontStyleOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Tref
func (o FontVariantOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Tref
func (o FontWeightOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Tref
func (o GlyphOrientationHorizontalOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Tref
func (o GlyphOrientationVerticalOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Tref
func (o ImageRenderingOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Tref
func (o KerningOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LengthAdjustOpt applies to Tref
func (o LengthAdjustOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.LengthAdjust = o.v
}

// LetterSpacingOpt applies to Tref
func (o LetterSpacingOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Tref
func (o LightingColorOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Tref
func (o MarkerEndOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Tref
func (o MarkerMidOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Tref
func (o MarkerStartOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Tref
func (o MaskOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to Tref
func (o OpacityOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Tref
func (o OverflowOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Tref
func (o PointerEventsOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to Tref
func (o RequiredExtensionsOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to Tref
func (o RequiredFeaturesOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RotateOpt applies to Tref
func (o RotateOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Rotate = o.v
}

// ShapeRenderingOpt applies to Tref
func (o ShapeRenderingOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Tref
func (o StopColorOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Tref
func (o StopOpacityOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Tref
func (o StrokeOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Tref
func (o StrokeDasharrayOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Tref
func (o StrokeDashoffsetOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Tref
func (o StrokeLinecapOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Tref
func (o StrokeLinejoinOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Tref
func (o StrokeMiterlimitOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Tref
func (o StrokeOpacityOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Tref
func (o StrokeWidthOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to Tref
func (o SystemLanguageOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to Tref
func (o TextAnchorOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Tref
func (o TextDecorationOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Tref
func (o TextRenderingOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// TextLengthOpt applies to Tref
func (o TextLengthOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.TextLength = o.v
}

// UnicodeBidiOpt applies to Tref
func (o UnicodeBidiOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Tref
func (o VisibilityOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Tref
func (o WordSpacingOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Tref
func (o WritingModeOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to Tref
func (o XOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to Tref
func (o YOpt) applyTref(a *SvgTrefAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgTrefAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.Dx != "" {
		Attr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		Attr(sb, "dy", a.Dy)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LengthAdjust != "" {
		Attr(sb, "lengthAdjust", a.LengthAdjust)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.Rotate != "" {
		Attr(sb, "rotate", a.Rotate)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.TextLength != "" {
		Attr(sb, "textLength", a.TextLength)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
