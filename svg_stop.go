// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgStopAttrs holds the attributes for the stop SVG element
type SvgStopAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Offset                     string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
}

// SvgStopArg interface for stop element arguments
type SvgStopArg interface {
	applyStop(*SvgStopAttrs, *[]Component)
}

// defaultSvgStopAttrs creates default attributes for stop
func defaultSvgStopAttrs() *SvgStopAttrs {
	return &SvgStopAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgStop creates an SVG stop element
func SvgStop(args ...SvgStopArg) Node {
	a := defaultSvgStopAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyStop(a, &kids)
	}
	return Node{
		Tag:   "stop",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to stop
func (g Global) applyStop(a *SvgStopAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to Stop
func (o AlignmentBaselineOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to Stop
func (o BaselineShiftOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to Stop
func (o ClipOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to Stop
func (o ClipPathOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to Stop
func (o ClipRuleOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to Stop
func (o ColorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to Stop
func (o ColorInterpolationOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to Stop
func (o ColorInterpolationFiltersOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to Stop
func (o ColorProfileOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to Stop
func (o ColorRenderingOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to Stop
func (o CursorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to Stop
func (o DirectionOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to Stop
func (o DisplayOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to Stop
func (o DominantBaselineOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to Stop
func (o EnableBackgroundOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to Stop
func (o FillOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to Stop
func (o FillOpacityOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to Stop
func (o FillRuleOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to Stop
func (o FilterOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to Stop
func (o FloodColorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to Stop
func (o FloodOpacityOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to Stop
func (o FontFamilyOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to Stop
func (o FontSizeOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to Stop
func (o FontSizeAdjustOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to Stop
func (o FontStretchOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to Stop
func (o FontStyleOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to Stop
func (o FontVariantOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to Stop
func (o FontWeightOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to Stop
func (o GlyphOrientationHorizontalOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to Stop
func (o GlyphOrientationVerticalOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// ImageRenderingOpt applies to Stop
func (o ImageRenderingOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to Stop
func (o KerningOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to Stop
func (o LetterSpacingOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to Stop
func (o LightingColorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to Stop
func (o MarkerEndOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to Stop
func (o MarkerMidOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to Stop
func (o MarkerStartOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to Stop
func (o MaskOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OffsetOpt applies to Stop
func (o OffsetOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Offset = o.v
}

// OpacityOpt applies to Stop
func (o OpacityOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to Stop
func (o OverflowOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to Stop
func (o PointerEventsOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ShapeRenderingOpt applies to Stop
func (o ShapeRenderingOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to Stop
func (o StopColorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to Stop
func (o StopOpacityOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to Stop
func (o StrokeOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to Stop
func (o StrokeDasharrayOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to Stop
func (o StrokeDashoffsetOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to Stop
func (o StrokeLinecapOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to Stop
func (o StrokeLinejoinOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to Stop
func (o StrokeMiterlimitOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to Stop
func (o StrokeOpacityOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to Stop
func (o StrokeWidthOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to Stop
func (o TextAnchorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to Stop
func (o TextDecorationOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to Stop
func (o TextRenderingOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to Stop
func (o UnicodeBidiOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to Stop
func (o VisibilityOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to Stop
func (o WordSpacingOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to Stop
func (o WritingModeOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgStopAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Offset != "" {
		Attr(sb, "offset", a.Offset)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
}
