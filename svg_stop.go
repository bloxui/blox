// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgStopAttrs holds the attributes for the stop SVG element
type SvgStopAttrs struct {
	GlobalAttrs
	Offset    string
	StopColor string
}

// SvgStopArg interface for stop element arguments
type SvgStopArg interface {
	applyStop(*SvgStopAttrs, *[]Component)
}

// defaultSvgStopAttrs creates default attributes for stop
func defaultSvgStopAttrs() *SvgStopAttrs {
	return &SvgStopAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgStop creates an SVG stop element (self-closing)
func SvgStop(args ...SvgStopArg) Node {
	a := defaultSvgStopAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyStop(a, &kids)
	}
	return Node{
		Tag:   "stop",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to stop
func (g Global) applyStop(a *SvgStopAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// OffsetOpt applies to Stop
func (o OffsetOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.Offset = o.v
}

// StopColorOpt applies to Stop
func (o StopColorOpt) applyStop(a *SvgStopAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgStopAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Offset != "" {
		Attr(sb, "offset", a.Offset)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
}
