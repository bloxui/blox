// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeImageAttrs holds the attributes for the feImage SVG element
type SvgFeImageAttrs struct {
	GlobalAttrs
	ExternalResourcesRequired bool
	Href                      string
	PreserveAspectRatio       string
}

// SvgFeImageArg interface for feImage element arguments
type SvgFeImageArg interface {
	applyFeImage(*SvgFeImageAttrs, *[]Component)
}

// defaultSvgFeImageAttrs creates default attributes for feImage
func defaultSvgFeImageAttrs() *SvgFeImageAttrs {
	return &SvgFeImageAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeImage creates an SVG feImage element
func SvgFeImage(args ...SvgFeImageArg) Node {
	a := defaultSvgFeImageAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeImage(a, &kids)
	}
	return Node{
		Tag:   "feImage",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feImage
func (g Global) applyFeImage(a *SvgFeImageAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// ExternalResourcesRequiredOpt applies to FeImage
func (o ExternalResourcesRequiredOpt) applyFeImage(a *SvgFeImageAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = true
}

// HrefOpt applies to FeImage
func (o HrefOpt) applyFeImage(a *SvgFeImageAttrs, _ *[]Component) {
	a.Href = o.v
}

// PreserveAspectRatioOpt applies to FeImage
func (o PreserveAspectRatioOpt) applyFeImage(a *SvgFeImageAttrs, _ *[]Component) {
	a.PreserveAspectRatio = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeImageAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.ExternalResourcesRequired {
		BoolAttr(sb, "externalResourcesRequired")
	}
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
	if a.PreserveAspectRatio != "" {
		Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
}
