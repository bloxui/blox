// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgAnimateMotionAttrs holds the attributes for the animateMotion SVG element
type SvgAnimateMotionAttrs struct {
	GlobalAttrs
	Accumulate  string
	Additive    string
	Begin       string
	By          string
	CalcMode    string
	Dur         string
	End         string
	From        string
	KeySplines  string
	KeyTimes    string
	Max         string
	Min         string
	RepeatCount string
	RepeatDur   string
	Restart     string
	To          string
	Values      string
}

// SvgAnimateMotionArg interface for animateMotion element arguments
type SvgAnimateMotionArg interface {
	applyAnimateMotion(*SvgAnimateMotionAttrs, *[]Component)
}

// defaultSvgAnimateMotionAttrs creates default attributes for animateMotion
func defaultSvgAnimateMotionAttrs() *SvgAnimateMotionAttrs {
	return &SvgAnimateMotionAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgAnimateMotion creates an SVG animateMotion element (self-closing)
func SvgAnimateMotion(args ...SvgAnimateMotionArg) Node {
	a := defaultSvgAnimateMotionAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyAnimateMotion(a, &kids)
	}
	return Node{
		Tag:   "animateMotion",
		Attrs: a,
		Void:  true,
	}
}

// Global applies global SVG attributes to animateMotion
func (g Global) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AccumulateOpt applies to AnimateMotion
func (o AccumulateOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Accumulate = o.v
}

// AdditiveOpt applies to AnimateMotion
func (o AdditiveOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Additive = o.v
}

// BeginOpt applies to AnimateMotion
func (o BeginOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Begin = o.v
}

// ByOpt applies to AnimateMotion
func (o ByOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.By = o.v
}

// CalcModeOpt applies to AnimateMotion
func (o CalcModeOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.CalcMode = o.v
}

// DurOpt applies to AnimateMotion
func (o DurOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Dur = o.v
}

// EndOpt applies to AnimateMotion
func (o EndOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.End = o.v
}

// FromOpt applies to AnimateMotion
func (o FromOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.From = o.v
}

// KeySplinesOpt applies to AnimateMotion
func (o KeySplinesOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.KeySplines = o.v
}

// KeyTimesOpt applies to AnimateMotion
func (o KeyTimesOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.KeyTimes = o.v
}

// MaxOpt applies to AnimateMotion
func (o MaxOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Max = o.v
}

// MinOpt applies to AnimateMotion
func (o MinOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Min = o.v
}

// RepeatCountOpt applies to AnimateMotion
func (o RepeatCountOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.RepeatCount = o.v
}

// RepeatDurOpt applies to AnimateMotion
func (o RepeatDurOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.RepeatDur = o.v
}

// RestartOpt applies to AnimateMotion
func (o RestartOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Restart = o.v
}

// ToOpt applies to AnimateMotion
func (o ToOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.To = o.v
}

// ValuesOpt applies to AnimateMotion
func (o ValuesOpt) applyAnimateMotion(a *SvgAnimateMotionAttrs, _ *[]Component) {
	a.Values = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgAnimateMotionAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Accumulate != "" {
		Attr(sb, "accumulate", a.Accumulate)
	}
	if a.Additive != "" {
		Attr(sb, "additive", a.Additive)
	}
	if a.Begin != "" {
		Attr(sb, "begin", a.Begin)
	}
	if a.By != "" {
		Attr(sb, "by", a.By)
	}
	if a.CalcMode != "" {
		Attr(sb, "calcMode", a.CalcMode)
	}
	if a.Dur != "" {
		Attr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		Attr(sb, "end", a.End)
	}
	if a.From != "" {
		Attr(sb, "from", a.From)
	}
	if a.KeySplines != "" {
		Attr(sb, "keySplines", a.KeySplines)
	}
	if a.KeyTimes != "" {
		Attr(sb, "keyTimes", a.KeyTimes)
	}
	if a.Max != "" {
		Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		Attr(sb, "min", a.Min)
	}
	if a.RepeatCount != "" {
		Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.Restart != "" {
		Attr(sb, "restart", a.Restart)
	}
	if a.To != "" {
		Attr(sb, "to", a.To)
	}
	if a.Values != "" {
		Attr(sb, "values", a.Values)
	}
}
