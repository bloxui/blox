// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgViewAttrs holds the attributes for the view SVG element
type SvgViewAttrs struct {
	GlobalAttrs
	ViewBox string
}

// SvgViewArg interface for view element arguments
type SvgViewArg interface {
	applyView(*SvgViewAttrs, *[]Component)
}

// defaultSvgViewAttrs creates default attributes for view
func defaultSvgViewAttrs() *SvgViewAttrs {
	return &SvgViewAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgView creates an SVG view element
func SvgView(args ...SvgViewArg) Node {
	a := defaultSvgViewAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyView(a, &kids)
	}
	return Node{
		Tag:   "view",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to view
func (g Global) applyView(a *SvgViewAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// ViewBoxOpt applies to View
func (o ViewBoxOpt) applyView(a *SvgViewAttrs, _ *[]Component) {
	a.ViewBox = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgViewAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.ViewBox != "" {
		Attr(sb, "viewBox", a.ViewBox)
	}
}
