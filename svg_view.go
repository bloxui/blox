// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgViewAttrs holds the attributes for the view SVG element
type SvgViewAttrs struct {
	GlobalAttrs
	ExternalResourcesRequired string
	PreserveAspectRatio       string
	ViewBox                   string
	ViewTarget                string
	ZoomAndPan                string
}

// SvgViewArg interface for view element arguments
type SvgViewArg interface {
	ApplyView(*SvgViewAttrs, *[]Component)
}

// defaultSvgViewAttrs creates default attributes for view
func defaultSvgViewAttrs() *SvgViewAttrs {
	return &SvgViewAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgView creates an SVG view element
func SvgView(args ...SvgViewArg) Node {
	a := defaultSvgViewAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyView(a, &kids)
	}
	return Node{
		Tag:   "view",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to view
func (g Global) ApplyView(a *SvgViewAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// ExternalResourcesRequiredOpt applies to View
func (o ExternalResourcesRequiredOpt) ApplyView(a *SvgViewAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// PreserveAspectRatioOpt applies to View
func (o PreserveAspectRatioOpt) ApplyView(a *SvgViewAttrs, _ *[]Component) {
	a.PreserveAspectRatio = o.v
}

// ViewBoxOpt applies to View
func (o ViewBoxOpt) ApplyView(a *SvgViewAttrs, _ *[]Component) {
	a.ViewBox = o.v
}

// ViewTargetOpt applies to View
func (o ViewTargetOpt) ApplyView(a *SvgViewAttrs, _ *[]Component) {
	a.ViewTarget = o.v
}

// ZoomAndPanOpt applies to View
func (o ZoomAndPanOpt) ApplyView(a *SvgViewAttrs, _ *[]Component) {
	a.ZoomAndPan = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgViewAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.PreserveAspectRatio != "" {
		Attr(sb, "preserveAspectRatio", a.PreserveAspectRatio)
	}
	if a.ViewBox != "" {
		Attr(sb, "viewBox", a.ViewBox)
	}
	if a.ViewTarget != "" {
		Attr(sb, "viewTarget", a.ViewTarget)
	}
	if a.ZoomAndPan != "" {
		Attr(sb, "zoomAndPan", a.ZoomAndPan)
	}
}
