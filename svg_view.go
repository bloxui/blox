// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// ViewAttrs holds the attributes for the view SVG element
type ViewAttrs struct {
	SvgGlobal SvgGlobalAttrs
	ViewBox   string
}

// ViewArg interface for view element arguments
type ViewArg interface {
	ApplyView(*ViewAttrs, *[]html.Component)
}

// defaultViewAttrs creates default attributes for view
func defaultViewAttrs() *ViewAttrs {
	return &ViewAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// View creates an SVG view element
func View(args ...ViewArg) html.Node {
	a := defaultViewAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyView(a, &kids)
	}
	return html.Node{
		Tag:   "view",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to view
func (g Global) ApplyView(a *ViewAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// ViewBoxOpt applies to View
func (o ViewBoxOpt) ApplyView(a *ViewAttrs, _ *[]html.Component) {
	a.ViewBox = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *ViewAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.ViewBox != "" {
		SvgAttr(sb, "viewBox", a.ViewBox)
	}
}
