// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgAnimateTransformAttrs holds the attributes for the animateTransform SVG element
type SvgAnimateTransformAttrs struct {
	GlobalAttrs
	Accumulate                string
	Additive                  string
	AttributeName             string
	AttributeType             string
	Begin                     string
	By                        string
	CalcMode                  string
	Dur                       string
	End                       string
	ExternalResourcesRequired string
	Fill                      string
	From                      string
	Href                      string
	KeySplines                string
	KeyTimes                  string
	Max                       string
	Min                       string
	RepeatCount               string
	RepeatDur                 string
	RequiredExtensions        string
	RequiredFeatures          string
	RequiredFonts             string
	RequiredFormats           string
	Restart                   string
	SystemLanguage            string
	To                        string
	Type                      string
	Values                    string
}

// SvgAnimateTransformArg interface for animateTransform element arguments
type SvgAnimateTransformArg interface {
	ApplyAnimateTransform(*SvgAnimateTransformAttrs, *[]Component)
}

// defaultSvgAnimateTransformAttrs creates default attributes for animateTransform
func defaultSvgAnimateTransformAttrs() *SvgAnimateTransformAttrs {
	return &SvgAnimateTransformAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgAnimateTransform creates an SVG animateTransform element
func SvgAnimateTransform(args ...SvgAnimateTransformArg) Node {
	a := defaultSvgAnimateTransformAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyAnimateTransform(a, &kids)
	}
	return Node{
		Tag:   "animateTransform",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to animateTransform
func (g Global) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AccumulateOpt applies to AnimateTransform
func (o AccumulateOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Accumulate = o.v
}

// AdditiveOpt applies to AnimateTransform
func (o AdditiveOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Additive = o.v
}

// AttributeNameOpt applies to AnimateTransform
func (o AttributeNameOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.AttributeName = o.v
}

// AttributeTypeOpt applies to AnimateTransform
func (o AttributeTypeOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.AttributeType = o.v
}

// BeginOpt applies to AnimateTransform
func (o BeginOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Begin = o.v
}

// ByOpt applies to AnimateTransform
func (o ByOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.By = o.v
}

// CalcModeOpt applies to AnimateTransform
func (o CalcModeOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.CalcMode = o.v
}

// DurOpt applies to AnimateTransform
func (o DurOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Dur = o.v
}

// EndOpt applies to AnimateTransform
func (o EndOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.End = o.v
}

// ExternalResourcesRequiredOpt applies to AnimateTransform
func (o ExternalResourcesRequiredOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to AnimateTransform
func (o FillOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FromOpt applies to AnimateTransform
func (o FromOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.From = o.v
}

// HrefOpt applies to AnimateTransform
func (o HrefOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Href = o.v
}

// KeySplinesOpt applies to AnimateTransform
func (o KeySplinesOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.KeySplines = o.v
}

// KeyTimesOpt applies to AnimateTransform
func (o KeyTimesOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.KeyTimes = o.v
}

// MaxOpt applies to AnimateTransform
func (o MaxOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Max = o.v
}

// MinOpt applies to AnimateTransform
func (o MinOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Min = o.v
}

// RepeatCountOpt applies to AnimateTransform
func (o RepeatCountOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.RepeatCount = o.v
}

// RepeatDurOpt applies to AnimateTransform
func (o RepeatDurOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.RepeatDur = o.v
}

// RequiredExtensionsOpt applies to AnimateTransform
func (o RequiredExtensionsOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to AnimateTransform
func (o RequiredFeaturesOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RequiredFontsOpt applies to AnimateTransform
func (o RequiredFontsOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.RequiredFonts = o.v
}

// RequiredFormatsOpt applies to AnimateTransform
func (o RequiredFormatsOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.RequiredFormats = o.v
}

// RestartOpt applies to AnimateTransform
func (o RestartOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Restart = o.v
}

// SystemLanguageOpt applies to AnimateTransform
func (o SystemLanguageOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// ToOpt applies to AnimateTransform
func (o ToOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.To = o.v
}

// TypeOpt applies to AnimateTransform
func (o TypeOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Type = o.v
}

// ValuesOpt applies to AnimateTransform
func (o ValuesOpt) ApplyAnimateTransform(a *SvgAnimateTransformAttrs, _ *[]Component) {
	a.Values = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgAnimateTransformAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.Accumulate != "" {
		Attr(sb, "accumulate", a.Accumulate)
	}
	if a.Additive != "" {
		Attr(sb, "additive", a.Additive)
	}
	if a.AttributeName != "" {
		Attr(sb, "attributeName", a.AttributeName)
	}
	if a.AttributeType != "" {
		Attr(sb, "attributeType", a.AttributeType)
	}
	if a.Begin != "" {
		Attr(sb, "begin", a.Begin)
	}
	if a.By != "" {
		Attr(sb, "by", a.By)
	}
	if a.CalcMode != "" {
		Attr(sb, "calcMode", a.CalcMode)
	}
	if a.Dur != "" {
		Attr(sb, "dur", a.Dur)
	}
	if a.End != "" {
		Attr(sb, "end", a.End)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.From != "" {
		Attr(sb, "from", a.From)
	}
	if a.Href != "" {
		Attr(sb, "href", a.Href)
	}
	if a.KeySplines != "" {
		Attr(sb, "keySplines", a.KeySplines)
	}
	if a.KeyTimes != "" {
		Attr(sb, "keyTimes", a.KeyTimes)
	}
	if a.Max != "" {
		Attr(sb, "max", a.Max)
	}
	if a.Min != "" {
		Attr(sb, "min", a.Min)
	}
	if a.RepeatCount != "" {
		Attr(sb, "repeatCount", a.RepeatCount)
	}
	if a.RepeatDur != "" {
		Attr(sb, "repeatDur", a.RepeatDur)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.RequiredFonts != "" {
		Attr(sb, "requiredFonts", a.RequiredFonts)
	}
	if a.RequiredFormats != "" {
		Attr(sb, "requiredFormats", a.RequiredFormats)
	}
	if a.Restart != "" {
		Attr(sb, "restart", a.Restart)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.To != "" {
		Attr(sb, "to", a.To)
	}
	if a.Type != "" {
		Attr(sb, "type", a.Type)
	}
	if a.Values != "" {
		Attr(sb, "values", a.Values)
	}
}
