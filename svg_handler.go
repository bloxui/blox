// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgHandlerAttrs holds the attributes for the handler SVG element
type SvgHandlerAttrs struct {
	GlobalAttrs
	ExternalResourcesRequired string
	Type                      string
}

// SvgHandlerArg interface for handler element arguments
type SvgHandlerArg interface {
	ApplyHandler(*SvgHandlerAttrs, *[]Component)
}

// defaultSvgHandlerAttrs creates default attributes for handler
func defaultSvgHandlerAttrs() *SvgHandlerAttrs {
	return &SvgHandlerAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgHandler creates an SVG handler element
func SvgHandler(args ...SvgHandlerArg) Node {
	a := defaultSvgHandlerAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyHandler(a, &kids)
	}
	return Node{
		Tag:   "handler",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to handler
func (g Global) ApplyHandler(a *SvgHandlerAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// ExternalResourcesRequiredOpt applies to Handler
func (o ExternalResourcesRequiredOpt) ApplyHandler(a *SvgHandlerAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// TypeOpt applies to Handler
func (o TypeOpt) ApplyHandler(a *SvgHandlerAttrs, _ *[]Component) {
	a.Type = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgHandlerAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Type != "" {
		Attr(sb, "type", a.Type)
	}
}
