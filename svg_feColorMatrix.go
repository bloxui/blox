// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeColorMatrixAttrs holds the attributes for the feColorMatrix SVG element
type SvgFeColorMatrixAttrs struct {
	GlobalAttrs
	In     string
	Type   string
	Values string
}

// SvgFeColorMatrixArg interface for feColorMatrix element arguments
type SvgFeColorMatrixArg interface {
	applyFeColorMatrix(*SvgFeColorMatrixAttrs, *[]Component)
}

// defaultSvgFeColorMatrixAttrs creates default attributes for feColorMatrix
func defaultSvgFeColorMatrixAttrs() *SvgFeColorMatrixAttrs {
	return &SvgFeColorMatrixAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeColorMatrix creates an SVG feColorMatrix element
func SvgFeColorMatrix(args ...SvgFeColorMatrixArg) Node {
	a := defaultSvgFeColorMatrixAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeColorMatrix(a, &kids)
	}
	return Node{
		Tag:   "feColorMatrix",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feColorMatrix
func (g Global) applyFeColorMatrix(a *SvgFeColorMatrixAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeColorMatrix
func (o InOpt) applyFeColorMatrix(a *SvgFeColorMatrixAttrs, _ *[]Component) {
	a.In = o.v
}

// TypeOpt applies to FeColorMatrix
func (o TypeOpt) applyFeColorMatrix(a *SvgFeColorMatrixAttrs, _ *[]Component) {
	a.Type = o.v
}

// ValuesOpt applies to FeColorMatrix
func (o ValuesOpt) applyFeColorMatrix(a *SvgFeColorMatrixAttrs, _ *[]Component) {
	a.Values = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeColorMatrixAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.Type != "" {
		Attr(sb, "type", a.Type)
	}
	if a.Values != "" {
		Attr(sb, "values", a.Values)
	}
}
