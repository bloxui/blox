// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// FeColorMatrixAttrs holds the attributes for the feColorMatrix SVG element
type FeColorMatrixAttrs struct {
	SvgGlobal SvgGlobalAttrs
	In        string
	Type      string
	Values    string
}

// FeColorMatrixArg interface for feColorMatrix element arguments
type FeColorMatrixArg interface {
	ApplyFeColorMatrix(*FeColorMatrixAttrs, *[]html.Component)
}

// defaultFeColorMatrixAttrs creates default attributes for feColorMatrix
func defaultFeColorMatrixAttrs() *FeColorMatrixAttrs {
	return &FeColorMatrixAttrs{
		SvgGlobal: SvgGlobalAttrs{},
	}
}

// FeColorMatrix creates an SVG feColorMatrix element
func FeColorMatrix(args ...FeColorMatrixArg) html.Node {
	a := defaultFeColorMatrixAttrs()
	var kids []html.Component
	for _, ar := range args {
		ar.ApplyFeColorMatrix(a, &kids)
	}
	return html.Node{
		Tag:   "feColorMatrix",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feColorMatrix
func (g Global) ApplyFeColorMatrix(a *FeColorMatrixAttrs, _ *[]html.Component) {
	g.do(&a.SvgGlobal)
}

// InOpt applies to FeColorMatrix
func (o InOpt) ApplyFeColorMatrix(a *FeColorMatrixAttrs, _ *[]html.Component) {
	a.In = o.v
}

// TypeOpt applies to FeColorMatrix
func (o TypeOpt) ApplyFeColorMatrix(a *FeColorMatrixAttrs, _ *[]html.Component) {
	a.Type = o.v
}

// ValuesOpt applies to FeColorMatrix
func (o ValuesOpt) ApplyFeColorMatrix(a *FeColorMatrixAttrs, _ *[]html.Component) {
	a.Values = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *FeColorMatrixAttrs) WriteAttrs(sb *strings.Builder) {
	WriteSvgGlobal(sb, &a.SvgGlobal)
	if a.In != "" {
		SvgAttr(sb, "in", a.In)
	}
	if a.Type != "" {
		SvgAttr(sb, "type", a.Type)
	}
	if a.Values != "" {
		SvgAttr(sb, "values", a.Values)
	}
}
