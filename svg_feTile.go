// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeTileAttrs holds the attributes for the feTile SVG element
type SvgFeTileAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	EnableBackground           string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	Height                     string
	ImageRendering             string
	In                         string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	Result                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	Width                      string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgFeTileArg interface for feTile element arguments
type SvgFeTileArg interface {
	ApplyFeTile(*SvgFeTileAttrs, *[]Component)
}

// defaultSvgFeTileAttrs creates default attributes for feTile
func defaultSvgFeTileAttrs() *SvgFeTileAttrs {
	return &SvgFeTileAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeTile creates an SVG feTile element
func SvgFeTile(args ...SvgFeTileArg) Node {
	a := defaultSvgFeTileAttrs()
	var kids []Component
	for _, ar := range args {
		ar.ApplyFeTile(a, &kids)
	}
	return Node{
		Tag:   "feTile",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feTile
func (g Global) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to FeTile
func (o AlignmentBaselineOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to FeTile
func (o BaselineShiftOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to FeTile
func (o ClipOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to FeTile
func (o ClipPathOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to FeTile
func (o ClipRuleOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to FeTile
func (o ColorOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to FeTile
func (o ColorInterpolationOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to FeTile
func (o ColorInterpolationFiltersOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to FeTile
func (o ColorProfileOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to FeTile
func (o ColorRenderingOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to FeTile
func (o CursorOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to FeTile
func (o DirectionOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to FeTile
func (o DisplayOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to FeTile
func (o DominantBaselineOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// EnableBackgroundOpt applies to FeTile
func (o EnableBackgroundOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// FillOpt applies to FeTile
func (o FillOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to FeTile
func (o FillOpacityOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to FeTile
func (o FillRuleOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to FeTile
func (o FilterOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to FeTile
func (o FloodColorOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to FeTile
func (o FloodOpacityOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to FeTile
func (o FontFamilyOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to FeTile
func (o FontSizeOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to FeTile
func (o FontSizeAdjustOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to FeTile
func (o FontStretchOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to FeTile
func (o FontStyleOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to FeTile
func (o FontVariantOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to FeTile
func (o FontWeightOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// GlyphOrientationHorizontalOpt applies to FeTile
func (o GlyphOrientationHorizontalOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to FeTile
func (o GlyphOrientationVerticalOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// HeightOpt applies to FeTile
func (o HeightOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Height = o.v
}

// ImageRenderingOpt applies to FeTile
func (o ImageRenderingOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// InOpt applies to FeTile
func (o InOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.In = o.v
}

// KerningOpt applies to FeTile
func (o KerningOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to FeTile
func (o LetterSpacingOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to FeTile
func (o LightingColorOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to FeTile
func (o MarkerEndOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to FeTile
func (o MarkerMidOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to FeTile
func (o MarkerStartOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to FeTile
func (o MaskOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to FeTile
func (o OpacityOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to FeTile
func (o OverflowOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to FeTile
func (o PointerEventsOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// ResultOpt applies to FeTile
func (o ResultOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Result = o.v
}

// ShapeRenderingOpt applies to FeTile
func (o ShapeRenderingOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to FeTile
func (o StopColorOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to FeTile
func (o StopOpacityOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to FeTile
func (o StrokeOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to FeTile
func (o StrokeDasharrayOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to FeTile
func (o StrokeDashoffsetOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to FeTile
func (o StrokeLinecapOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to FeTile
func (o StrokeLinejoinOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to FeTile
func (o StrokeMiterlimitOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to FeTile
func (o StrokeOpacityOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to FeTile
func (o StrokeWidthOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// TextAnchorOpt applies to FeTile
func (o TextAnchorOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to FeTile
func (o TextDecorationOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to FeTile
func (o TextRenderingOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to FeTile
func (o UnicodeBidiOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to FeTile
func (o VisibilityOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WidthOpt applies to FeTile
func (o WidthOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Width = o.v
}

// WordSpacingOpt applies to FeTile
func (o WordSpacingOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to FeTile
func (o WritingModeOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to FeTile
func (o XOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to FeTile
func (o YOpt) ApplyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeTileAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.Height != "" {
		Attr(sb, "height", a.Height)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.Result != "" {
		Attr(sb, "result", a.Result)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.Width != "" {
		Attr(sb, "width", a.Width)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
