// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgFeTileAttrs holds the attributes for the feTile SVG element
type SvgFeTileAttrs struct {
	GlobalAttrs
	In string
}

// SvgFeTileArg interface for feTile element arguments
type SvgFeTileArg interface {
	applyFeTile(*SvgFeTileAttrs, *[]Component)
}

// defaultSvgFeTileAttrs creates default attributes for feTile
func defaultSvgFeTileAttrs() *SvgFeTileAttrs {
	return &SvgFeTileAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgFeTile creates an SVG feTile element
func SvgFeTile(args ...SvgFeTileArg) Node {
	a := defaultSvgFeTileAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyFeTile(a, &kids)
	}
	return Node{
		Tag:   "feTile",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to feTile
func (g Global) applyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// InOpt applies to FeTile
func (o InOpt) applyFeTile(a *SvgFeTileAttrs, _ *[]Component) {
	a.In = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgFeTileAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.In != "" {
		Attr(sb, "in", a.In)
	}
}
