// Code generated by gen-svg; DO NOT EDIT.

package html

import (
	"strings"
)

// SvgAltGlyphAttrs holds the attributes for the altGlyph SVG element
type SvgAltGlyphAttrs struct {
	GlobalAttrs
	AlignmentBaseline          string
	BaselineShift              string
	Clip                       string
	ClipPath                   string
	ClipRule                   string
	Color                      string
	ColorInterpolation         string
	ColorInterpolationFilters  string
	ColorProfile               string
	ColorRendering             string
	Cursor                     string
	Direction                  string
	Display                    string
	DominantBaseline           string
	Dx                         string
	Dy                         string
	EnableBackground           string
	ExternalResourcesRequired  string
	Fill                       string
	FillOpacity                string
	FillRule                   string
	Filter                     string
	FloodColor                 string
	FloodOpacity               string
	FontFamily                 string
	FontSize                   string
	FontSizeAdjust             string
	FontStretch                string
	FontStyle                  string
	FontVariant                string
	FontWeight                 string
	Format                     string
	GlyphOrientationHorizontal string
	GlyphOrientationVertical   string
	GlyphRef                   string
	ImageRendering             string
	Kerning                    string
	LetterSpacing              string
	LightingColor              string
	MarkerEnd                  string
	MarkerMid                  string
	MarkerStart                string
	Mask                       string
	Opacity                    string
	Overflow                   string
	PointerEvents              string
	RequiredExtensions         string
	RequiredFeatures           string
	Rotate                     string
	ShapeRendering             string
	StopColor                  string
	StopOpacity                string
	Stroke                     string
	StrokeDasharray            string
	StrokeDashoffset           string
	StrokeLinecap              string
	StrokeLinejoin             string
	StrokeMiterlimit           string
	StrokeOpacity              string
	StrokeWidth                string
	SystemLanguage             string
	TextAnchor                 string
	TextDecoration             string
	TextRendering              string
	UnicodeBidi                string
	Visibility                 string
	WordSpacing                string
	WritingMode                string
	X                          string
	Y                          string
}

// SvgAltGlyphArg interface for altGlyph element arguments
type SvgAltGlyphArg interface {
	applyAltGlyph(*SvgAltGlyphAttrs, *[]Component)
}

// defaultSvgAltGlyphAttrs creates default attributes for altGlyph
func defaultSvgAltGlyphAttrs() *SvgAltGlyphAttrs {
	return &SvgAltGlyphAttrs{
		GlobalAttrs: GlobalAttrs{},
	}
}

// SvgAltGlyph creates an SVG altGlyph element
func SvgAltGlyph(args ...SvgAltGlyphArg) Node {
	a := defaultSvgAltGlyphAttrs()
	var kids []Component
	for _, ar := range args {
		ar.applyAltGlyph(a, &kids)
	}
	return Node{
		Tag:   "altGlyph",
		Attrs: a,
		Kids:  kids,
	}
}

// Global applies global SVG attributes to altGlyph
func (g Global) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	g.Do(&a.GlobalAttrs)
}

// AlignmentBaselineOpt applies to AltGlyph
func (o AlignmentBaselineOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.AlignmentBaseline = o.v
}

// BaselineShiftOpt applies to AltGlyph
func (o BaselineShiftOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.BaselineShift = o.v
}

// ClipOpt applies to AltGlyph
func (o ClipOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Clip = o.v
}

// ClipPathOpt applies to AltGlyph
func (o ClipPathOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ClipPath = o.v
}

// ClipRuleOpt applies to AltGlyph
func (o ClipRuleOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ClipRule = o.v
}

// ColorOpt applies to AltGlyph
func (o ColorOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Color = o.v
}

// ColorInterpolationOpt applies to AltGlyph
func (o ColorInterpolationOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ColorInterpolation = o.v
}

// ColorInterpolationFiltersOpt applies to AltGlyph
func (o ColorInterpolationFiltersOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ColorInterpolationFilters = o.v
}

// ColorProfileOpt applies to AltGlyph
func (o ColorProfileOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ColorProfile = o.v
}

// ColorRenderingOpt applies to AltGlyph
func (o ColorRenderingOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ColorRendering = o.v
}

// CursorOpt applies to AltGlyph
func (o CursorOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Cursor = o.v
}

// DirectionOpt applies to AltGlyph
func (o DirectionOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Direction = o.v
}

// DisplayOpt applies to AltGlyph
func (o DisplayOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Display = o.v
}

// DominantBaselineOpt applies to AltGlyph
func (o DominantBaselineOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.DominantBaseline = o.v
}

// DxOpt applies to AltGlyph
func (o DxOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Dx = o.v
}

// DyOpt applies to AltGlyph
func (o DyOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Dy = o.v
}

// EnableBackgroundOpt applies to AltGlyph
func (o EnableBackgroundOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.EnableBackground = o.v
}

// ExternalResourcesRequiredOpt applies to AltGlyph
func (o ExternalResourcesRequiredOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ExternalResourcesRequired = o.v
}

// FillOpt applies to AltGlyph
func (o FillOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Fill = o.v
}

// FillOpacityOpt applies to AltGlyph
func (o FillOpacityOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FillOpacity = o.v
}

// FillRuleOpt applies to AltGlyph
func (o FillRuleOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FillRule = o.v
}

// FilterOpt applies to AltGlyph
func (o FilterOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Filter = o.v
}

// FloodColorOpt applies to AltGlyph
func (o FloodColorOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FloodColor = o.v
}

// FloodOpacityOpt applies to AltGlyph
func (o FloodOpacityOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FloodOpacity = o.v
}

// FontFamilyOpt applies to AltGlyph
func (o FontFamilyOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontFamily = o.v
}

// FontSizeOpt applies to AltGlyph
func (o FontSizeOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontSize = o.v
}

// FontSizeAdjustOpt applies to AltGlyph
func (o FontSizeAdjustOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontSizeAdjust = o.v
}

// FontStretchOpt applies to AltGlyph
func (o FontStretchOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontStretch = o.v
}

// FontStyleOpt applies to AltGlyph
func (o FontStyleOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontStyle = o.v
}

// FontVariantOpt applies to AltGlyph
func (o FontVariantOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontVariant = o.v
}

// FontWeightOpt applies to AltGlyph
func (o FontWeightOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.FontWeight = o.v
}

// FormatOpt applies to AltGlyph
func (o FormatOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Format = o.v
}

// GlyphOrientationHorizontalOpt applies to AltGlyph
func (o GlyphOrientationHorizontalOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.GlyphOrientationHorizontal = o.v
}

// GlyphOrientationVerticalOpt applies to AltGlyph
func (o GlyphOrientationVerticalOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.GlyphOrientationVertical = o.v
}

// GlyphRefOpt applies to AltGlyph
func (o GlyphRefOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.GlyphRef = o.v
}

// ImageRenderingOpt applies to AltGlyph
func (o ImageRenderingOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ImageRendering = o.v
}

// KerningOpt applies to AltGlyph
func (o KerningOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Kerning = o.v
}

// LetterSpacingOpt applies to AltGlyph
func (o LetterSpacingOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.LetterSpacing = o.v
}

// LightingColorOpt applies to AltGlyph
func (o LightingColorOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.LightingColor = o.v
}

// MarkerEndOpt applies to AltGlyph
func (o MarkerEndOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.MarkerEnd = o.v
}

// MarkerMidOpt applies to AltGlyph
func (o MarkerMidOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.MarkerMid = o.v
}

// MarkerStartOpt applies to AltGlyph
func (o MarkerStartOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.MarkerStart = o.v
}

// MaskOpt applies to AltGlyph
func (o MaskOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Mask = o.v
}

// OpacityOpt applies to AltGlyph
func (o OpacityOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Opacity = o.v
}

// OverflowOpt applies to AltGlyph
func (o OverflowOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Overflow = o.v
}

// PointerEventsOpt applies to AltGlyph
func (o PointerEventsOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.PointerEvents = o.v
}

// RequiredExtensionsOpt applies to AltGlyph
func (o RequiredExtensionsOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.RequiredExtensions = o.v
}

// RequiredFeaturesOpt applies to AltGlyph
func (o RequiredFeaturesOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.RequiredFeatures = o.v
}

// RotateOpt applies to AltGlyph
func (o RotateOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Rotate = o.v
}

// ShapeRenderingOpt applies to AltGlyph
func (o ShapeRenderingOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.ShapeRendering = o.v
}

// StopColorOpt applies to AltGlyph
func (o StopColorOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StopColor = o.v
}

// StopOpacityOpt applies to AltGlyph
func (o StopOpacityOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StopOpacity = o.v
}

// StrokeOpt applies to AltGlyph
func (o StrokeOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Stroke = o.v
}

// StrokeDasharrayOpt applies to AltGlyph
func (o StrokeDasharrayOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeDasharray = o.v
}

// StrokeDashoffsetOpt applies to AltGlyph
func (o StrokeDashoffsetOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeDashoffset = o.v
}

// StrokeLinecapOpt applies to AltGlyph
func (o StrokeLinecapOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeLinecap = o.v
}

// StrokeLinejoinOpt applies to AltGlyph
func (o StrokeLinejoinOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeLinejoin = o.v
}

// StrokeMiterlimitOpt applies to AltGlyph
func (o StrokeMiterlimitOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeMiterlimit = o.v
}

// StrokeOpacityOpt applies to AltGlyph
func (o StrokeOpacityOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeOpacity = o.v
}

// StrokeWidthOpt applies to AltGlyph
func (o StrokeWidthOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.StrokeWidth = o.v
}

// SystemLanguageOpt applies to AltGlyph
func (o SystemLanguageOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.SystemLanguage = o.v
}

// TextAnchorOpt applies to AltGlyph
func (o TextAnchorOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.TextAnchor = o.v
}

// TextDecorationOpt applies to AltGlyph
func (o TextDecorationOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.TextDecoration = o.v
}

// TextRenderingOpt applies to AltGlyph
func (o TextRenderingOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.TextRendering = o.v
}

// UnicodeBidiOpt applies to AltGlyph
func (o UnicodeBidiOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.UnicodeBidi = o.v
}

// VisibilityOpt applies to AltGlyph
func (o VisibilityOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Visibility = o.v
}

// WordSpacingOpt applies to AltGlyph
func (o WordSpacingOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.WordSpacing = o.v
}

// WritingModeOpt applies to AltGlyph
func (o WritingModeOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.WritingMode = o.v
}

// XOpt applies to AltGlyph
func (o XOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.X = o.v
}

// YOpt applies to AltGlyph
func (o YOpt) applyAltGlyph(a *SvgAltGlyphAttrs, _ *[]Component) {
	a.Y = o.v
}

// WriteAttrs writes the SVG attributes to the string builder
func (a *SvgAltGlyphAttrs) WriteAttrs(sb *strings.Builder) {
	WriteGlobal(sb, &a.GlobalAttrs)
	if a.AlignmentBaseline != "" {
		Attr(sb, "alignment-baseline", a.AlignmentBaseline)
	}
	if a.BaselineShift != "" {
		Attr(sb, "baseline-shift", a.BaselineShift)
	}
	if a.Clip != "" {
		Attr(sb, "clip", a.Clip)
	}
	if a.ClipPath != "" {
		Attr(sb, "clip-path", a.ClipPath)
	}
	if a.ClipRule != "" {
		Attr(sb, "clip-rule", a.ClipRule)
	}
	if a.Color != "" {
		Attr(sb, "color", a.Color)
	}
	if a.ColorInterpolation != "" {
		Attr(sb, "color-interpolation", a.ColorInterpolation)
	}
	if a.ColorInterpolationFilters != "" {
		Attr(sb, "color-interpolation-filters", a.ColorInterpolationFilters)
	}
	if a.ColorProfile != "" {
		Attr(sb, "color-profile", a.ColorProfile)
	}
	if a.ColorRendering != "" {
		Attr(sb, "color-rendering", a.ColorRendering)
	}
	if a.Cursor != "" {
		Attr(sb, "cursor", a.Cursor)
	}
	if a.Direction != "" {
		Attr(sb, "direction", a.Direction)
	}
	if a.Display != "" {
		Attr(sb, "display", a.Display)
	}
	if a.DominantBaseline != "" {
		Attr(sb, "dominant-baseline", a.DominantBaseline)
	}
	if a.Dx != "" {
		Attr(sb, "dx", a.Dx)
	}
	if a.Dy != "" {
		Attr(sb, "dy", a.Dy)
	}
	if a.EnableBackground != "" {
		Attr(sb, "enable-background", a.EnableBackground)
	}
	if a.ExternalResourcesRequired != "" {
		Attr(sb, "externalResourcesRequired", a.ExternalResourcesRequired)
	}
	if a.Fill != "" {
		Attr(sb, "fill", a.Fill)
	}
	if a.FillOpacity != "" {
		Attr(sb, "fill-opacity", a.FillOpacity)
	}
	if a.FillRule != "" {
		Attr(sb, "fill-rule", a.FillRule)
	}
	if a.Filter != "" {
		Attr(sb, "filter", a.Filter)
	}
	if a.FloodColor != "" {
		Attr(sb, "flood-color", a.FloodColor)
	}
	if a.FloodOpacity != "" {
		Attr(sb, "flood-opacity", a.FloodOpacity)
	}
	if a.FontFamily != "" {
		Attr(sb, "font-family", a.FontFamily)
	}
	if a.FontSize != "" {
		Attr(sb, "font-size", a.FontSize)
	}
	if a.FontSizeAdjust != "" {
		Attr(sb, "font-size-adjust", a.FontSizeAdjust)
	}
	if a.FontStretch != "" {
		Attr(sb, "font-stretch", a.FontStretch)
	}
	if a.FontStyle != "" {
		Attr(sb, "font-style", a.FontStyle)
	}
	if a.FontVariant != "" {
		Attr(sb, "font-variant", a.FontVariant)
	}
	if a.FontWeight != "" {
		Attr(sb, "font-weight", a.FontWeight)
	}
	if a.Format != "" {
		Attr(sb, "format", a.Format)
	}
	if a.GlyphOrientationHorizontal != "" {
		Attr(sb, "glyph-orientation-horizontal", a.GlyphOrientationHorizontal)
	}
	if a.GlyphOrientationVertical != "" {
		Attr(sb, "glyph-orientation-vertical", a.GlyphOrientationVertical)
	}
	if a.GlyphRef != "" {
		Attr(sb, "glyphRef", a.GlyphRef)
	}
	if a.ImageRendering != "" {
		Attr(sb, "image-rendering", a.ImageRendering)
	}
	if a.Kerning != "" {
		Attr(sb, "kerning", a.Kerning)
	}
	if a.LetterSpacing != "" {
		Attr(sb, "letter-spacing", a.LetterSpacing)
	}
	if a.LightingColor != "" {
		Attr(sb, "lighting-color", a.LightingColor)
	}
	if a.MarkerEnd != "" {
		Attr(sb, "marker-end", a.MarkerEnd)
	}
	if a.MarkerMid != "" {
		Attr(sb, "marker-mid", a.MarkerMid)
	}
	if a.MarkerStart != "" {
		Attr(sb, "marker-start", a.MarkerStart)
	}
	if a.Mask != "" {
		Attr(sb, "mask", a.Mask)
	}
	if a.Opacity != "" {
		Attr(sb, "opacity", a.Opacity)
	}
	if a.Overflow != "" {
		Attr(sb, "overflow", a.Overflow)
	}
	if a.PointerEvents != "" {
		Attr(sb, "pointer-events", a.PointerEvents)
	}
	if a.RequiredExtensions != "" {
		Attr(sb, "requiredExtensions", a.RequiredExtensions)
	}
	if a.RequiredFeatures != "" {
		Attr(sb, "requiredFeatures", a.RequiredFeatures)
	}
	if a.Rotate != "" {
		Attr(sb, "rotate", a.Rotate)
	}
	if a.ShapeRendering != "" {
		Attr(sb, "shape-rendering", a.ShapeRendering)
	}
	if a.StopColor != "" {
		Attr(sb, "stop-color", a.StopColor)
	}
	if a.StopOpacity != "" {
		Attr(sb, "stop-opacity", a.StopOpacity)
	}
	if a.Stroke != "" {
		Attr(sb, "stroke", a.Stroke)
	}
	if a.StrokeDasharray != "" {
		Attr(sb, "stroke-dasharray", a.StrokeDasharray)
	}
	if a.StrokeDashoffset != "" {
		Attr(sb, "stroke-dashoffset", a.StrokeDashoffset)
	}
	if a.StrokeLinecap != "" {
		Attr(sb, "stroke-linecap", a.StrokeLinecap)
	}
	if a.StrokeLinejoin != "" {
		Attr(sb, "stroke-linejoin", a.StrokeLinejoin)
	}
	if a.StrokeMiterlimit != "" {
		Attr(sb, "stroke-miterlimit", a.StrokeMiterlimit)
	}
	if a.StrokeOpacity != "" {
		Attr(sb, "stroke-opacity", a.StrokeOpacity)
	}
	if a.StrokeWidth != "" {
		Attr(sb, "stroke-width", a.StrokeWidth)
	}
	if a.SystemLanguage != "" {
		Attr(sb, "systemLanguage", a.SystemLanguage)
	}
	if a.TextAnchor != "" {
		Attr(sb, "text-anchor", a.TextAnchor)
	}
	if a.TextDecoration != "" {
		Attr(sb, "text-decoration", a.TextDecoration)
	}
	if a.TextRendering != "" {
		Attr(sb, "text-rendering", a.TextRendering)
	}
	if a.UnicodeBidi != "" {
		Attr(sb, "unicode-bidi", a.UnicodeBidi)
	}
	if a.Visibility != "" {
		Attr(sb, "visibility", a.Visibility)
	}
	if a.WordSpacing != "" {
		Attr(sb, "word-spacing", a.WordSpacing)
	}
	if a.WritingMode != "" {
		Attr(sb, "writing-mode", a.WritingMode)
	}
	if a.X != "" {
		Attr(sb, "x", a.X)
	}
	if a.Y != "" {
		Attr(sb, "y", a.Y)
	}
}
